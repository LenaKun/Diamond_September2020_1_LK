@model CC.Web.Models.RegEditModel
@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm("Edit", "Users"))
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>User Details</legend>

        <div class="editor-label">
            @Html.LabelFor(m => m.UserName)
        </div>
        <div class="editor-field">
            @Html.DisplayFor(m => m.UserName)
			@Html.HiddenFor(m => m.UserName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(m => m.FirstName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.FirstName)
            @Html.ValidationMessageFor(m => m.FirstName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(m => m.LastName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.LastName)
            @Html.ValidationMessageFor(m => m.LastName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(m => m.Email)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.Email)
            @Html.ValidationMessageFor(m => m.Email)
        </div>

        <div class="editor-label">
			@Html.LabelFor(m => m.AddToBcc)
		</div>
		<div class="editor-field">
			@Html.CheckBoxFor(m => m.AddToBcc)
		</div>

        <div class="editor-label">
            @Html.LabelFor(m => m.DecimalDisplayDigits)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.DecimalDisplayDigits)
            @Html.ValidationMessageFor(m => m.DecimalDisplayDigits)
        </div>


        <div class="editor-label">
            @Html.LabelFor(m => m.Password)
        </div>
        <div class="editor-field">
            @Html.PasswordFor(m => m.Password)
            @Html.ValidationMessageFor(m => m.Password)
        </div>

        <div class="editor-label">
            @Html.LabelFor(m => m.ConfirmPassword)
        </div>
        <div class="editor-field">
            @Html.PasswordFor(m => m.ConfirmPassword)
            @Html.ValidationMessageFor(m => m.ConfirmPassword)
        </div>
        <div class="editor-label">
            @Html.LabelFor(m => m.TemporaryPassword)
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(m => m.TemporaryPassword)
        </div>
        <div class="editor-label">
            @Html.LabelFor(m => m.Disabled)
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(m => m.Disabled)
        </div>

        @if (Model.IsRoleEditable)
        {
            <div class="role">
                <div class="editor-label">
                    @Html.LabelFor(model => model.RoleId, "Role")
                </div>
				@if ((CC.Data.FixedRoles.Ser | CC.Data.FixedRoles.SerAndReviewer | CC.Data.FixedRoles.AgencyUser | CC.Data.FixedRoles.AgencyUserAndReviewer).HasFlag((CC.Data.FixedRoles)Model.RoleId))
				{
					<div class="editor-field">
						@Html.DropDownListFor(model => model.RoleId, Model.EditRolesSelectList)
						@Html.ValidationMessageFor(model => model.RoleId)
					</div>
				}
				else
				{
					<div class="editor-field">
						@Html.HiddenFor(model => model.RoleId)
						@Html.DisplayFor(model => model.RoleName)
					</div>
				}

                @switch (Model.Role)
                {
                    case CC.Data.FixedRoles.Admin:
                    <text></text>
                        break;
                    case CC.Data.FixedRoles.GlobalOfficer:
                    <text></text>
                        break;
                    case CC.Data.FixedRoles.RegionOfficer:
                    case CC.Data.FixedRoles.RegionAssistant:
                    <text>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.AgencyGroupIds, "SERs")
                    </div>
                    <div class="editor-field">
                        @Html.ListBoxFor(f => f.AgencyGroupIds, Model.POAgencyGroups, new { size = 10 })
                        @Html.ValidationMessageFor(model => model.AgencyGroupIds)
                    </div>
                    </text>
                        break;
                    case CC.Data.FixedRoles.Ser:
					case CC.Data.FixedRoles.SerAndReviewer:
                    <text>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.AgencyGroupId, "AgencyGroup")
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.AgencyGroupId, Model.AgencyGroupsSelectList, Model.AgencyGroupId)
                        @Html.ValidationMessageFor(model => model.AgencyGroupId)
                    </div>
                    </text>
                        break;
                    case CC.Data.FixedRoles.RegionReadOnly:
                    <text>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.RegionId, "AgencyGroup")
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.RegionId, Model.RegionsSelectList, Model.RegionId)
                            @Html.ValidationMessageFor(model => model.RegionId)
                        </div>
                    </text>
                        break;
                    case CC.Data.FixedRoles.AgencyUser:
					case CC.Data.FixedRoles.DafEvaluator:
					case CC.Data.FixedRoles.DafReviewer:
					case CC.Data.FixedRoles.AgencyUserAndReviewer:
                    <text>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.AgencyId, "Agency")
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.AgencyId, Model.AgenciesSelectList, Model.AgencyId)
                        @Html.ValidationMessageFor(model => model.AgencyId)
                    </div>
                    </text>
                        break;
                }
            </div>
        }
        else
        {
            <text>
                @Html.HiddenFor(f=>f.RoleId)
                @Html.HiddenFor(f=>f.AgencyId)
                @Html.HiddenFor(f=>f.AgencyGroupId)
                @Html.HiddenFor(f=>f.AgencyGroupIdsString)
            </text>
        }

        <p>
            <input type="submit" value="Update" />
        </p>
    </fieldset>
}


<div>
    @Html.ActionLink("Back to List", "Index")
</div>
