//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class AppBudget
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string AgencyRemarks
        {
            get;
            set;
        }
    
        public virtual string PoRemarks
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdatedAt
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UpdatedById
        {
            get { return _updatedById; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_updatedById != value)
                    {
                        if (User2 != null && User2.Id != value)
                        {
                            User2 = null;
                        }
                        _updatedById = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _updatedById;
    
        public virtual Nullable<System.DateTime> UpdatedByAgencyAt
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UpdatedByAgencyId
        {
            get { return _updatedByAgencyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_updatedByAgencyId != value)
                    {
                        if (User3 != null && User3.Id != value)
                        {
                            User3 = null;
                        }
                        _updatedByAgencyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _updatedByAgencyId;
    
        public virtual Nullable<System.DateTime> UpdatedBySerAt
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UpdatedBySerId
        {
            get { return _updatedBySerId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_updatedBySerId != value)
                    {
                        if (User1 != null && User1.Id != value)
                        {
                            User1 = null;
                        }
                        _updatedBySerId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _updatedBySerId;
    
        public virtual Nullable<System.DateTime> UpdatedByRpoAt
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UpdatedByRpoId
        {
            get { return _updatedByRpoId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_updatedByRpoId != value)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                        _updatedByRpoId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _updatedByRpoId;
    
        public virtual Nullable<System.DateTime> UpdatedByGpoAt
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UpdatedByGpoId
        {
            get { return _updatedByGpoId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_updatedByGpoId != value)
                    {
                        if (User4 != null && User4.Id != value)
                        {
                            User4 = null;
                        }
                        _updatedByGpoId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _updatedByGpoId;
    
        public virtual int AppId
        {
            get { return _appId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_appId != value)
                    {
                        if (App != null && App.Id != value)
                        {
                            App = null;
                        }
                        _appId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _appId;
    
        public virtual bool Revised
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ValidUntill
        {
            get;
            set;
        }
    
        public virtual string ValidRemarks
        {
            get;
            set;
        }
    
        public virtual Nullable<int> StatusId
        {
            get;
            set;
        }
    
        public virtual decimal TotalCcGrant
        {
            get;
            set;
        }
    
        public virtual decimal RequiredMatch
        {
            get;
            set;
        }
    
        public virtual bool FormASubmitted
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> FluxxStateUpdatedAt
        {
            get;
            set;
        }
    
        public virtual string FluxxGrantRequestError
        {
            get;
            set;
        }
    
        public virtual Nullable<int> FluxxModelDocumentId
        {
            get;
            set;
        }
    
        public virtual string FluxxModelDocumentError
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<MainReport> MainReports
        {
            get
            {
                if (_mainReports == null)
                {
                    var newCollection = new FixupCollection<MainReport>();
                    newCollection.CollectionChanged += FixupMainReports;
                    _mainReports = newCollection;
                }
                return _mainReports;
            }
            set
            {
                if (!ReferenceEquals(_mainReports, value))
                {
                    var previousValue = _mainReports as FixupCollection<MainReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMainReports;
                    }
                    _mainReports = value;
                    var newValue = value as FixupCollection<MainReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMainReports;
                    }
                }
            }
        }
        private ICollection<MainReport> _mainReports;
    
        public virtual ICollection<AppBudgetService> AppBudgetServices
        {
            get
            {
                if (_appBudgetServices == null)
                {
                    var newCollection = new FixupCollection<AppBudgetService>();
                    newCollection.CollectionChanged += FixupAppBudgetServices;
                    _appBudgetServices = newCollection;
                }
                return _appBudgetServices;
            }
            set
            {
                if (!ReferenceEquals(_appBudgetServices, value))
                {
                    var previousValue = _appBudgetServices as FixupCollection<AppBudgetService>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppBudgetServices;
                    }
                    _appBudgetServices = value;
                    var newValue = value as FixupCollection<AppBudgetService>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppBudgetServices;
                    }
                }
            }
        }
        private ICollection<AppBudgetService> _appBudgetServices;
    
    		
    	public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
    		
    	public virtual User User1
        {
            get { return _user1; }
            set
            {
                if (!ReferenceEquals(_user1, value))
                {
                    var previousValue = _user1;
                    _user1 = value;
                    FixupUser1(previousValue);
                }
            }
        }
        private User _user1;
    
    		
    	public virtual User User2
        {
            get { return _user2; }
            set
            {
                if (!ReferenceEquals(_user2, value))
                {
                    var previousValue = _user2;
                    _user2 = value;
                    FixupUser2(previousValue);
                }
            }
        }
        private User _user2;
    
    		
    	public virtual User User3
        {
            get { return _user3; }
            set
            {
                if (!ReferenceEquals(_user3, value))
                {
                    var previousValue = _user3;
                    _user3 = value;
                    FixupUser3(previousValue);
                }
            }
        }
        private User _user3;
    
    		
    	public virtual User User4
        {
            get { return _user4; }
            set
            {
                if (!ReferenceEquals(_user4, value))
                {
                    var previousValue = _user4;
                    _user4 = value;
                    FixupUser4(previousValue);
                }
            }
        }
        private User _user4;
    
    	
    	public virtual App App
        {
            get { return _app; }
            set
            {
                if (!ReferenceEquals(_app, value))
                {
                    var previousValue = _app;
                    _app = value;
                    FixupApp(previousValue);
                }
            }
        }
        private App _app;
    
        public virtual ICollection<AppBudgetServiceAudit> AppBudgetServiceAudits
        {
            get
            {
                if (_appBudgetServiceAudits == null)
                {
                    var newCollection = new FixupCollection<AppBudgetServiceAudit>();
                    newCollection.CollectionChanged += FixupAppBudgetServiceAudits;
                    _appBudgetServiceAudits = newCollection;
                }
                return _appBudgetServiceAudits;
            }
            set
            {
                if (!ReferenceEquals(_appBudgetServiceAudits, value))
                {
                    var previousValue = _appBudgetServiceAudits as FixupCollection<AppBudgetServiceAudit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppBudgetServiceAudits;
                    }
                    _appBudgetServiceAudits = value;
                    var newValue = value as FixupCollection<AppBudgetServiceAudit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppBudgetServiceAudits;
                    }
                }
            }
        }
        private ICollection<AppBudgetServiceAudit> _appBudgetServiceAudits;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.AppBudgets.Contains(this))
            {
                previousValue.AppBudgets.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.AppBudgets.Contains(this))
                {
                    User.AppBudgets.Add(this);
                }
                if (UpdatedByRpoId != User.Id)
                {
                    UpdatedByRpoId = User.Id;
                }
            }
            else if (!_settingFK)
            {
                UpdatedByRpoId = null;
            }
        }
    
        private void FixupUser1(User previousValue)
        {
            if (previousValue != null && previousValue.AppBudgets1.Contains(this))
            {
                previousValue.AppBudgets1.Remove(this);
            }
    
            if (User1 != null)
            {
                if (!User1.AppBudgets1.Contains(this))
                {
                    User1.AppBudgets1.Add(this);
                }
                if (UpdatedBySerId != User1.Id)
                {
                    UpdatedBySerId = User1.Id;
                }
            }
            else if (!_settingFK)
            {
                UpdatedBySerId = null;
            }
        }
    
        private void FixupUser2(User previousValue)
        {
            if (previousValue != null && previousValue.AppBudgets2.Contains(this))
            {
                previousValue.AppBudgets2.Remove(this);
            }
    
            if (User2 != null)
            {
                if (!User2.AppBudgets2.Contains(this))
                {
                    User2.AppBudgets2.Add(this);
                }
                if (UpdatedById != User2.Id)
                {
                    UpdatedById = User2.Id;
                }
            }
            else if (!_settingFK)
            {
                UpdatedById = null;
            }
        }
    
        private void FixupUser3(User previousValue)
        {
            if (previousValue != null && previousValue.AppBudgets3.Contains(this))
            {
                previousValue.AppBudgets3.Remove(this);
            }
    
            if (User3 != null)
            {
                if (!User3.AppBudgets3.Contains(this))
                {
                    User3.AppBudgets3.Add(this);
                }
                if (UpdatedByAgencyId != User3.Id)
                {
                    UpdatedByAgencyId = User3.Id;
                }
            }
            else if (!_settingFK)
            {
                UpdatedByAgencyId = null;
            }
        }
    
        private void FixupUser4(User previousValue)
        {
            if (previousValue != null && previousValue.AppBudgets4.Contains(this))
            {
                previousValue.AppBudgets4.Remove(this);
            }
    
            if (User4 != null)
            {
                if (!User4.AppBudgets4.Contains(this))
                {
                    User4.AppBudgets4.Add(this);
                }
                if (UpdatedByGpoId != User4.Id)
                {
                    UpdatedByGpoId = User4.Id;
                }
            }
            else if (!_settingFK)
            {
                UpdatedByGpoId = null;
            }
        }
    
        private void FixupApp(App previousValue)
        {
            if (previousValue != null && previousValue.AppBudgets.Contains(this))
            {
                previousValue.AppBudgets.Remove(this);
            }
    
            if (App != null)
            {
                if (!App.AppBudgets.Contains(this))
                {
                    App.AppBudgets.Add(this);
                }
                if (AppId != App.Id)
                {
                    AppId = App.Id;
                }
            }
        }
    
        private void FixupMainReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MainReport item in e.NewItems)
                {
                    item.AppBudget = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MainReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.AppBudget, this))
                    {
                        item.AppBudget = null;
                    }
                }
            }
        }
    
        private void FixupAppBudgetServices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppBudgetService item in e.NewItems)
                {
                    item.AppBudget = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppBudgetService item in e.OldItems)
                {
                    if (ReferenceEquals(item.AppBudget, this))
                    {
                        item.AppBudget = null;
                    }
                }
            }
        }
    
        private void FixupAppBudgetServiceAudits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppBudgetServiceAudit item in e.NewItems)
                {
                    item.AppBudget = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppBudgetServiceAudit item in e.OldItems)
                {
                    if (ReferenceEquals(item.AppBudget, this))
                    {
                        item.AppBudget = null;
                    }
                }
            }
        }

        #endregion

    }
}
