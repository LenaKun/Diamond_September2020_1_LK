//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class CfsRow
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedAt
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdatedAt
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> StartDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> EndDate
        {
            get;
            set;
        }
    
        public virtual Nullable<int> EndDateReasonId
        {
            get { return _endDateReasonId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_endDateReasonId != value)
                    {
                        if (CfsEndDateReason != null && CfsEndDateReason.Id != value)
                        {
                            CfsEndDateReason = null;
                        }
                        _endDateReasonId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _endDateReasonId;
    
        public virtual bool ClientResponseIsYes
        {
            get;
            set;
        }
    
        public virtual bool AgencyOverRide
        {
            get;
            set;
        }
    
        public virtual string OverRideDetails
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CfsApproved
        {
            get;
            set;
        }
    
        public virtual string AgencyRequestorFirstName
        {
            get;
            set;
        }
    
        public virtual string AgencyRequestorTitle
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> EndRequestDate
        {
            get;
            set;
        }
    
        public virtual string CfsAdminRemarks
        {
            get;
            set;
        }
    
        public virtual bool CfsAdminRejected
        {
            get;
            set;
        }
    
        public virtual string CfsAdminInternalRemarks
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CfsAdminLastUpdate
        {
            get;
            set;
        }
    
        public virtual int ClientId
        {
            get { return _clientId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_clientId != value)
                    {
                        if (Client != null && Client.Id != value)
                        {
                            Client = null;
                        }
                        _clientId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _clientId;
    
        public virtual string AgencyRequestorLastName
        {
            get;
            set;
        }
    
        public virtual int CreatedById
        {
            get { return _createdById; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_createdById != value)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                        _createdById = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _createdById;
    
        public virtual Nullable<int> UpdatedById
        {
            get { return _updatedById; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_updatedById != value)
                    {
                        if (User1 != null && User1.Id != value)
                        {
                            User1 = null;
                        }
                        _updatedById = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _updatedById;
    
        public virtual string OverrideAgencyFirstName
        {
            get;
            set;
        }
    
        public virtual string OverrideAgencyLastName
        {
            get;
            set;
        }
    
        public virtual string OverrideAgencyTitle
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    		
    	public virtual CfsEndDateReason CfsEndDateReason
        {
            get { return _cfsEndDateReason; }
            set
            {
                if (!ReferenceEquals(_cfsEndDateReason, value))
                {
                    var previousValue = _cfsEndDateReason;
                    _cfsEndDateReason = value;
                    FixupCfsEndDateReason(previousValue);
                }
            }
        }
        private CfsEndDateReason _cfsEndDateReason;
    
    	
    	public virtual Client Client
        {
            get { return _client; }
            set
            {
                if (!ReferenceEquals(_client, value))
                {
                    var previousValue = _client;
                    _client = value;
                    FixupClient(previousValue);
                }
            }
        }
        private Client _client;
    
        public virtual ICollection<AgencyOverRideReason> AgencyOverRideReasons
        {
            get
            {
                if (_agencyOverRideReasons == null)
                {
                    var newCollection = new FixupCollection<AgencyOverRideReason>();
                    newCollection.CollectionChanged += FixupAgencyOverRideReasons;
                    _agencyOverRideReasons = newCollection;
                }
                return _agencyOverRideReasons;
            }
            set
            {
                if (!ReferenceEquals(_agencyOverRideReasons, value))
                {
                    var previousValue = _agencyOverRideReasons as FixupCollection<AgencyOverRideReason>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgencyOverRideReasons;
                    }
                    _agencyOverRideReasons = value;
                    var newValue = value as FixupCollection<AgencyOverRideReason>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgencyOverRideReasons;
                    }
                }
            }
        }
        private ICollection<AgencyOverRideReason> _agencyOverRideReasons;
    
    		
    	public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
    		
    	public virtual User User1
        {
            get { return _user1; }
            set
            {
                if (!ReferenceEquals(_user1, value))
                {
                    var previousValue = _user1;
                    _user1 = value;
                    FixupUser1(previousValue);
                }
            }
        }
        private User _user1;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCfsEndDateReason(CfsEndDateReason previousValue)
        {
            if (previousValue != null && previousValue.CfsRows.Contains(this))
            {
                previousValue.CfsRows.Remove(this);
            }
    
            if (CfsEndDateReason != null)
            {
                if (!CfsEndDateReason.CfsRows.Contains(this))
                {
                    CfsEndDateReason.CfsRows.Add(this);
                }
                if (EndDateReasonId != CfsEndDateReason.Id)
                {
                    EndDateReasonId = CfsEndDateReason.Id;
                }
            }
            else if (!_settingFK)
            {
                EndDateReasonId = null;
            }
        }
    
        private void FixupClient(Client previousValue)
        {
            if (previousValue != null && previousValue.CfsRows.Contains(this))
            {
                previousValue.CfsRows.Remove(this);
            }
    
            if (Client != null)
            {
                if (!Client.CfsRows.Contains(this))
                {
                    Client.CfsRows.Add(this);
                }
                if (ClientId != Client.Id)
                {
                    ClientId = Client.Id;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.CfsRows.Contains(this))
            {
                previousValue.CfsRows.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.CfsRows.Contains(this))
                {
                    User.CfsRows.Add(this);
                }
                if (CreatedById != User.Id)
                {
                    CreatedById = User.Id;
                }
            }
        }
    
        private void FixupUser1(User previousValue)
        {
            if (previousValue != null && previousValue.CfsRows1.Contains(this))
            {
                previousValue.CfsRows1.Remove(this);
            }
    
            if (User1 != null)
            {
                if (!User1.CfsRows1.Contains(this))
                {
                    User1.CfsRows1.Add(this);
                }
                if (UpdatedById != User1.Id)
                {
                    UpdatedById = User1.Id;
                }
            }
            else if (!_settingFK)
            {
                UpdatedById = null;
            }
        }
    
        private void FixupAgencyOverRideReasons(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AgencyOverRideReason item in e.NewItems)
                {
                    if (!item.CfsRows.Contains(this))
                    {
                        item.CfsRows.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AgencyOverRideReason item in e.OldItems)
                {
                    if (item.CfsRows.Contains(this))
                    {
                        item.CfsRows.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}
