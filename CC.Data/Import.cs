//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class Import
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual System.DateTime StartedAt
        {
            get;
            set;
        }
    
        public virtual Nullable<int> TargetId
        {
            get;
            set;
        }
    
        public virtual int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (User != null && User.Id != value)
                    {
                        User = null;
                    }
                    _userId = value;
                }
            }
        }
        private int _userId;

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Cri> ImportClientReports
        {
            get
            {
                if (_importClientReports == null)
                {
                    var newCollection = new FixupCollection<Cri>();
                    newCollection.CollectionChanged += FixupImportClientReports;
                    _importClientReports = newCollection;
                }
                return _importClientReports;
            }
            set
            {
                if (!ReferenceEquals(_importClientReports, value))
                {
                    var previousValue = _importClientReports as FixupCollection<Cri>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupImportClientReports;
                    }
                    _importClientReports = value;
                    var newValue = value as FixupCollection<Cri>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupImportClientReports;
                    }
                }
            }
        }
        private ICollection<Cri> _importClientReports;
    
    	
    	public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual ICollection<ImportClient> ImportClients
        {
            get
            {
                if (_importClients == null)
                {
                    var newCollection = new FixupCollection<ImportClient>();
                    newCollection.CollectionChanged += FixupImportClients;
                    _importClients = newCollection;
                }
                return _importClients;
            }
            set
            {
                if (!ReferenceEquals(_importClients, value))
                {
                    var previousValue = _importClients as FixupCollection<ImportClient>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupImportClients;
                    }
                    _importClients = value;
                    var newValue = value as FixupCollection<ImportClient>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupImportClients;
                    }
                }
            }
        }
        private ICollection<ImportClient> _importClients;
    
        public virtual ICollection<ImportFunctionalityScore> ImportFunctionalityScores
        {
            get
            {
                if (_importFunctionalityScores == null)
                {
                    var newCollection = new FixupCollection<ImportFunctionalityScore>();
                    newCollection.CollectionChanged += FixupImportFunctionalityScores;
                    _importFunctionalityScores = newCollection;
                }
                return _importFunctionalityScores;
            }
            set
            {
                if (!ReferenceEquals(_importFunctionalityScores, value))
                {
                    var previousValue = _importFunctionalityScores as FixupCollection<ImportFunctionalityScore>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupImportFunctionalityScores;
                    }
                    _importFunctionalityScores = value;
                    var newValue = value as FixupCollection<ImportFunctionalityScore>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupImportFunctionalityScores;
                    }
                }
            }
        }
        private ICollection<ImportFunctionalityScore> _importFunctionalityScores;
    
        public virtual ICollection<ImportHcep> ImportHceps
        {
            get
            {
                if (_importHceps == null)
                {
                    var newCollection = new FixupCollection<ImportHcep>();
                    newCollection.CollectionChanged += FixupImportHceps;
                    _importHceps = newCollection;
                }
                return _importHceps;
            }
            set
            {
                if (!ReferenceEquals(_importHceps, value))
                {
                    var previousValue = _importHceps as FixupCollection<ImportHcep>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupImportHceps;
                    }
                    _importHceps = value;
                    var newValue = value as FixupCollection<ImportHcep>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupImportHceps;
                    }
                }
            }
        }
        private ICollection<ImportHcep> _importHceps;

        #endregion

        #region Association Fixup
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Imports.Contains(this))
            {
                previousValue.Imports.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Imports.Contains(this))
                {
                    User.Imports.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
        }
    
        private void FixupImportClientReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Cri item in e.NewItems)
                {
                    item.Import = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Cri item in e.OldItems)
                {
                    if (ReferenceEquals(item.Import, this))
                    {
                        item.Import = null;
                    }
                }
            }
        }
    
        private void FixupImportClients(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ImportClient item in e.NewItems)
                {
                    item.Import = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ImportClient item in e.OldItems)
                {
                    if (ReferenceEquals(item.Import, this))
                    {
                        item.Import = null;
                    }
                }
            }
        }
    
        private void FixupImportFunctionalityScores(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ImportFunctionalityScore item in e.NewItems)
                {
                    item.Import = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ImportFunctionalityScore item in e.OldItems)
                {
                    if (ReferenceEquals(item.Import, this))
                    {
                        item.Import = null;
                    }
                }
            }
        }
    
        private void FixupImportHceps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ImportHcep item in e.NewItems)
                {
                    item.Import = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ImportHcep item in e.OldItems)
                {
                    if (ReferenceEquals(item.Import, this))
                    {
                        item.Import = null;
                    }
                }
            }
        }

        #endregion

    }
}
