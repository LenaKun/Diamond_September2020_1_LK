@model CC.Data.App
@{
	ViewBag.Title = "Edit";
}
<h2>
	Edit
</h2>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
	@Html.ValidationSummary(true)
<fieldset>
    <legend>App</legend>
    <div class="editor-label">
        @Html.LabelFor(model => model.FundId)
    </div>
    <div class="editor-field">
        @Html.DisplayFor(model => model.Fund.Name)
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.AgencyGroupId)
    </div>
    <div class="editor-field">
        @Html.DisplayFor(model => model.AgencyGroup.Name)
    </div>
    @if (!@HttpContext.Current.User.IsInRole("GlobalOfficer"))
    {
        <div class="editor-label">
            @Html.LabelFor(model => model.CurrencyId)
        </div>
        <div class="editor-field">
            @Html.DropDownList("CurrencyId", String.Empty)
            @Html.ValidationMessageFor(model => model.CurrencyId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.AgencyContribution)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.AgencyContribution)
            @Html.ValidationMessageFor(model => model.AgencyContribution)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.CcGrant)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.CcGrant)
            @Html.ValidationMessageFor(model => model.CcGrant)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.RequiredMatch)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.RequiredMatch)
            @Html.ValidationMessageFor(model => model.RequiredMatch)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.CalendaricYear);
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.CalendaricYear)
            @Html.ValidationMessageFor(model => model.CalendaricYear)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.OtherServicesMax, "Other Services Max (%)")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.OtherServicesMax)
            @Html.ValidationMessageFor(model => model.OtherServicesMax)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.HomecareMin, "Homecare Min (%)")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.HomecareMin)
            @Html.ValidationMessageFor(model => model.HomecareMin)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.AdminMax, "Admin Max (%)")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.AdminMax)
            @Html.ValidationMessageFor(model => model.AdminMax)
        </div>
        <div>Admin% and Other % are only in effect if the total NONE homecare services amount allowed is zero/ empty.</div>
        <div class="editor-label">
            @Html.LabelFor(model => model.EndOfYearValidationOnly);
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.EndOfYearValidationOnly)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.InterlineTransfer);
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.InterlineTransfer)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.MaxAdminAmount)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.MaxAdminAmount)
            @Html.ValidationMessageFor(model => model.MaxAdminAmount)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MaxNonHcAmount)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.MaxNonHcAmount)
            @Html.ValidationMessageFor(model => model.MaxNonHcAmount)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.HistoricalExpenditureAmount)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.HistoricalExpenditureAmount)
            @Html.ValidationMessageFor(model => model.HistoricalExpenditureAmount)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.AvgReimbursementCost)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.AvgReimbursementCost)
            @Html.ValidationMessageFor(model => model.AvgReimbursementCost)
        </div>
        <div class="display-label">@Html.LabelFor(model => model.MaxHcCaseManagementPersonnel, "Cap for Homecare - Case Management Personnel")</div>
        <div class="display-field">
            @Html.EditorFor(model => model.MaxHcCaseManagementPersonnel)
        </div>
        <div class="display-label">@Html.LabelFor(model => model.MaxServicesPersonnelOther, "Cap for Other Services - Personnel - Other and Other Services - Personnel - Other with names")</div>
        <div class="display-field">
            @Html.EditorFor(model => model.MaxServicesPersonnelOther)
        </div>
        <div class="display-label">@Html.LabelFor(model => model.FuneralExpenses, "Cap for Other Services - Funeral Expenses")</div>
        <div class="display-field">
            @Html.EditorFor(model => model.FuneralExpenses)
        </div>
        <div class="editor-label">
            Exchange Rates
        </div>
        <div>
            <table>
                <tr>
                    <th>CUR</th>
                    <th>Rate</th>
                </tr>
                @foreach (var item in CC.Data.Currency.ConvertableCurrencies)
                {

                    <text>

                        <tr>
                            <td>
                                @Html.DisplayFor(f => item)
                            </td>
                            <td>
                                <input type="text" name="@item" value="@Model.GetExchangeRateString(item)" />
                            </td>
                        </tr>
                    </text>

                }
            </table>
        </div>
    }
    else
    {
        <div class="editor-label">
            @Html.LabelFor(model => model.CurrencyId)
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.CurrencyId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.Name)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.AgencyContribution)
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.AgencyContribution)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.CcGrant)
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.CcGrant)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.RequiredMatch)
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.RequiredMatch)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.CalendaricYear);
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.CalendaricYear)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.EndOfYearValidationOnly);
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.EndOfYearValidationOnly)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.InterlineTransfer);
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.InterlineTransfer)
        </div>

        <div class="display-label">@Html.LabelFor(model => model.MaxAdminAmount)</div>
        <div class="display-field"> @Html.DisplayFor(model => model.MaxAdminAmount) </div>
        <div class="display-label">@Html.LabelFor(model => model.MaxNonHcAmount)</div>
        <div class="display-field"> @Html.DisplayFor(model => model.MaxNonHcAmount) </div>
        <div class="editor-label">
            Exchange Rates
        </div>
        <div>
            <table>
                <tr>
                    <th>CUR</th>
                    <th>Rate</th>
                </tr>
                @foreach (var item in CC.Data.Currency.ConvertableCurrencies)
                {
                    <text>
                        <tr>
                            <td>
                                @Html.DisplayFor(f => item)
                            </td>
                            <td>
                                @Model.GetExchangeRateString(item)
                            </td>
                        </tr>
                    </text>
                }
            </table>
        </div>
    }

    <div class="editor-label">App Services:</div>
    <div>
        @foreach (SelectListItem item in ViewBag.Services)
        {
            <div>
                @Html.CheckBox("sids", item.Selected, new { value = item.Value, id = "s_" + item.Value })
                <label for="@("s_" + item.Value)">@item.Text</label>
            </div>
        }
        <p>
            <input type="submit" value="Save" />
        </p>
    </div>
</fieldset>
}


<div>
	@Html.ActionLink("Back to List", "Index")
</div>
