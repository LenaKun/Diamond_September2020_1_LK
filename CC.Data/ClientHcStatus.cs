//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class ClientHcStatus
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int ClientId
        {
            get { return _clientId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_clientId != value)
                    {
                        if (Client != null && Client.Id != value)
                        {
                            Client = null;
                        }
                        _clientId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _clientId;
    
        public virtual Nullable<int> HcStatusId
        {
            get { return _hcStatusId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_hcStatusId != value)
                    {
                        if (HcStatus != null && HcStatus.Id != value)
                        {
                            HcStatus = null;
                        }
                        _hcStatusId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _hcStatusId;
    
        public virtual System.DateTime StartDate
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ApprovalStatusId
        {
            get { return _approvalStatusId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_approvalStatusId != value)
                    {
                        if (ApprovalStatus != null && ApprovalStatus.Id != value)
                        {
                            ApprovalStatus = null;
                        }
                        _approvalStatusId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _approvalStatusId;
    
        public virtual Nullable<int> FundStatusId
        {
            get { return _fundStatusId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_fundStatusId != value)
                    {
                        if (FundStatus != null && FundStatus.Id != value)
                        {
                            FundStatus = null;
                        }
                        _fundStatusId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _fundStatusId;
    
        public virtual bool Notify
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CountryId
        {
            get { return _countryId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_countryId != value)
                    {
                        if (Country != null && Country.Id != value)
                        {
                            Country = null;
                        }
                        _countryId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _countryId;
    
        public virtual Nullable<int> BirthCountryId
        {
            get { return _birthCountryId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_birthCountryId != value)
                    {
                        if (BirthCountry != null && BirthCountry.Id != value)
                        {
                            BirthCountry = null;
                        }
                        _birthCountryId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _birthCountryId;
    
        public virtual System.DateTime UpdateDate
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	
    	public virtual Client Client
        {
            get { return _client; }
            set
            {
                if (!ReferenceEquals(_client, value))
                {
                    var previousValue = _client;
                    _client = value;
                    FixupClient(previousValue);
                }
            }
        }
        private Client _client;
    
    	
    	public virtual ApprovalStatus ApprovalStatus
        {
            get { return _approvalStatus; }
            set
            {
                if (!ReferenceEquals(_approvalStatus, value))
                {
                    var previousValue = _approvalStatus;
                    _approvalStatus = value;
                    FixupApprovalStatus(previousValue);
                }
            }
        }
        private ApprovalStatus _approvalStatus;
    
    	
    	public virtual FundStatus FundStatus
        {
            get { return _fundStatus; }
            set
            {
                if (!ReferenceEquals(_fundStatus, value))
                {
                    var previousValue = _fundStatus;
                    _fundStatus = value;
                    FixupFundStatus(previousValue);
                }
            }
        }
        private FundStatus _fundStatus;
    
    	
    	public virtual HcStatus HcStatus
        {
            get { return _hcStatus; }
            set
            {
                if (!ReferenceEquals(_hcStatus, value))
                {
                    var previousValue = _hcStatus;
                    _hcStatus = value;
                    FixupHcStatus(previousValue);
                }
            }
        }
        private HcStatus _hcStatus;
    
    	
    	public virtual BirthCountry BirthCountry
        {
            get { return _birthCountry; }
            set
            {
                if (!ReferenceEquals(_birthCountry, value))
                {
                    var previousValue = _birthCountry;
                    _birthCountry = value;
                    FixupBirthCountry(previousValue);
                }
            }
        }
        private BirthCountry _birthCountry;
    
    	
    	public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupClient(Client previousValue)
        {
            if (previousValue != null && previousValue.ClientHcStatuses.Contains(this))
            {
                previousValue.ClientHcStatuses.Remove(this);
            }
    
            if (Client != null)
            {
                if (!Client.ClientHcStatuses.Contains(this))
                {
                    Client.ClientHcStatuses.Add(this);
                }
                if (ClientId != Client.Id)
                {
                    ClientId = Client.Id;
                }
            }
        }
    
        private void FixupApprovalStatus(ApprovalStatus previousValue)
        {
            if (previousValue != null && previousValue.ClientHcStatuses.Contains(this))
            {
                previousValue.ClientHcStatuses.Remove(this);
            }
    
            if (ApprovalStatus != null)
            {
                if (!ApprovalStatus.ClientHcStatuses.Contains(this))
                {
                    ApprovalStatus.ClientHcStatuses.Add(this);
                }
                if (ApprovalStatusId != ApprovalStatus.Id)
                {
                    ApprovalStatusId = ApprovalStatus.Id;
                }
            }
            else if (!_settingFK)
            {
                ApprovalStatusId = null;
            }
        }
    
        private void FixupFundStatus(FundStatus previousValue)
        {
            if (previousValue != null && previousValue.ClientHcStatuses.Contains(this))
            {
                previousValue.ClientHcStatuses.Remove(this);
            }
    
            if (FundStatus != null)
            {
                if (!FundStatus.ClientHcStatuses.Contains(this))
                {
                    FundStatus.ClientHcStatuses.Add(this);
                }
                if (FundStatusId != FundStatus.Id)
                {
                    FundStatusId = FundStatus.Id;
                }
            }
            else if (!_settingFK)
            {
                FundStatusId = null;
            }
        }
    
        private void FixupHcStatus(HcStatus previousValue)
        {
            if (previousValue != null && previousValue.ClientHcStatuses.Contains(this))
            {
                previousValue.ClientHcStatuses.Remove(this);
            }
    
            if (HcStatus != null)
            {
                if (!HcStatus.ClientHcStatuses.Contains(this))
                {
                    HcStatus.ClientHcStatuses.Add(this);
                }
                if (HcStatusId != HcStatus.Id)
                {
                    HcStatusId = HcStatus.Id;
                }
            }
            else if (!_settingFK)
            {
                HcStatusId = null;
            }
        }
    
        private void FixupBirthCountry(BirthCountry previousValue)
        {
            if (previousValue != null && previousValue.ClientHcStatuses.Contains(this))
            {
                previousValue.ClientHcStatuses.Remove(this);
            }
    
            if (BirthCountry != null)
            {
                if (!BirthCountry.ClientHcStatuses.Contains(this))
                {
                    BirthCountry.ClientHcStatuses.Add(this);
                }
                if (BirthCountryId != BirthCountry.Id)
                {
                    BirthCountryId = BirthCountry.Id;
                }
            }
            else if (!_settingFK)
            {
                BirthCountryId = null;
            }
        }
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.ClientHcStatuses.Contains(this))
            {
                previousValue.ClientHcStatuses.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.ClientHcStatuses.Contains(this))
                {
                    Country.ClientHcStatuses.Add(this);
                }
                if (CountryId != Country.Id)
                {
                    CountryId = Country.Id;
                }
            }
            else if (!_settingFK)
            {
                CountryId = null;
            }
        }

        #endregion

    }
}
