//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class SubReport
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int MainReportId
        {
            get { return _mainReportId; }
            set
            {
                if (_mainReportId != value)
                {
                    if (MainReport != null && MainReport.Id != value)
                    {
                        MainReport = null;
                    }
                    _mainReportId = value;
                }
            }
        }
        private int _mainReportId;
    
        public virtual int AppBudgetServiceId
        {
            get { return _appBudgetServiceId; }
            set
            {
                if (_appBudgetServiceId != value)
                {
                    if (AppBudgetService != null && AppBudgetService.Id != value)
                    {
                        AppBudgetService = null;
                    }
                    _appBudgetServiceId = value;
                }
            }
        }
        private int _appBudgetServiceId;
    
        public virtual Nullable<decimal> Amount
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> MatchingSum
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> AgencyContribution
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> ServiceUnits
        {
            get;
            set;
        }
    
        public virtual Nullable<int> TotalHouseholdsServed
        {
            get;
            set;
        }
    
        public virtual string OverFlowReason
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	
    	public virtual AppBudgetService AppBudgetService
        {
            get { return _appBudgetService; }
            set
            {
                if (!ReferenceEquals(_appBudgetService, value))
                {
                    var previousValue = _appBudgetService;
                    _appBudgetService = value;
                    FixupAppBudgetService(previousValue);
                }
            }
        }
        private AppBudgetService _appBudgetService;
    
    	
    	public virtual MainReport MainReport
        {
            get { return _mainReport; }
            set
            {
                if (!ReferenceEquals(_mainReport, value))
                {
                    var previousValue = _mainReport;
                    _mainReport = value;
                    FixupMainReport(previousValue);
                }
            }
        }
        private MainReport _mainReport;
    
        public virtual ICollection<ProgramCost> ProgramCosts
        {
            get
            {
                if (_programCosts == null)
                {
                    var newCollection = new FixupCollection<ProgramCost>();
                    newCollection.CollectionChanged += FixupProgramCosts;
                    _programCosts = newCollection;
                }
                return _programCosts;
            }
            set
            {
                if (!ReferenceEquals(_programCosts, value))
                {
                    var previousValue = _programCosts as FixupCollection<ProgramCost>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProgramCosts;
                    }
                    _programCosts = value;
                    var newValue = value as FixupCollection<ProgramCost>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProgramCosts;
                    }
                }
            }
        }
        private ICollection<ProgramCost> _programCosts;
    
        public virtual ICollection<MedicalEquipmentReport> MedicalEquipmentReports
        {
            get
            {
                if (_medicalEquipmentReports == null)
                {
                    var newCollection = new FixupCollection<MedicalEquipmentReport>();
                    newCollection.CollectionChanged += FixupMedicalEquipmentReports;
                    _medicalEquipmentReports = newCollection;
                }
                return _medicalEquipmentReports;
            }
            set
            {
                if (!ReferenceEquals(_medicalEquipmentReports, value))
                {
                    var previousValue = _medicalEquipmentReports as FixupCollection<MedicalEquipmentReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMedicalEquipmentReports;
                    }
                    _medicalEquipmentReports = value;
                    var newValue = value as FixupCollection<MedicalEquipmentReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMedicalEquipmentReports;
                    }
                }
            }
        }
        private ICollection<MedicalEquipmentReport> _medicalEquipmentReports;
    
        public virtual ICollection<MhmReport> MhmReports
        {
            get
            {
                if (_mhmReports == null)
                {
                    var newCollection = new FixupCollection<MhmReport>();
                    newCollection.CollectionChanged += FixupMhmReports;
                    _mhmReports = newCollection;
                }
                return _mhmReports;
            }
            set
            {
                if (!ReferenceEquals(_mhmReports, value))
                {
                    var previousValue = _mhmReports as FixupCollection<MhmReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMhmReports;
                    }
                    _mhmReports = value;
                    var newValue = value as FixupCollection<MhmReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMhmReports;
                    }
                }
            }
        }
        private ICollection<MhmReport> _mhmReports;
    
        public virtual ICollection<ClientReport> ClientReports
        {
            get
            {
                if (_clientReports == null)
                {
                    var newCollection = new FixupCollection<ClientReport>();
                    newCollection.CollectionChanged += FixupClientReports;
                    _clientReports = newCollection;
                }
                return _clientReports;
            }
            set
            {
                if (!ReferenceEquals(_clientReports, value))
                {
                    var previousValue = _clientReports as FixupCollection<ClientReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClientReports;
                    }
                    _clientReports = value;
                    var newValue = value as FixupCollection<ClientReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClientReports;
                    }
                }
            }
        }
        private ICollection<ClientReport> _clientReports;
    
        public virtual ICollection<EmergencyReport> EmergencyReports
        {
            get
            {
                if (_emergencyReports == null)
                {
                    var newCollection = new FixupCollection<EmergencyReport>();
                    newCollection.CollectionChanged += FixupEmergencyReports;
                    _emergencyReports = newCollection;
                }
                return _emergencyReports;
            }
            set
            {
                if (!ReferenceEquals(_emergencyReports, value))
                {
                    var previousValue = _emergencyReports as FixupCollection<EmergencyReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmergencyReports;
                    }
                    _emergencyReports = value;
                    var newValue = value as FixupCollection<EmergencyReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmergencyReports;
                    }
                }
            }
        }
        private ICollection<EmergencyReport> _emergencyReports;
    
        public virtual ICollection<SupportiveCommunitiesReport> SupportiveCommunitiesReports
        {
            get
            {
                if (_supportiveCommunitiesReports == null)
                {
                    var newCollection = new FixupCollection<SupportiveCommunitiesReport>();
                    newCollection.CollectionChanged += FixupSupportiveCommunitiesReports;
                    _supportiveCommunitiesReports = newCollection;
                }
                return _supportiveCommunitiesReports;
            }
            set
            {
                if (!ReferenceEquals(_supportiveCommunitiesReports, value))
                {
                    var previousValue = _supportiveCommunitiesReports as FixupCollection<SupportiveCommunitiesReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSupportiveCommunitiesReports;
                    }
                    _supportiveCommunitiesReports = value;
                    var newValue = value as FixupCollection<SupportiveCommunitiesReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSupportiveCommunitiesReports;
                    }
                }
            }
        }
        private ICollection<SupportiveCommunitiesReport> _supportiveCommunitiesReports;
    
        public virtual ICollection<DaysCentersReport> DaysCentersReports
        {
            get
            {
                if (_daysCentersReports == null)
                {
                    var newCollection = new FixupCollection<DaysCentersReport>();
                    newCollection.CollectionChanged += FixupDaysCentersReports;
                    _daysCentersReports = newCollection;
                }
                return _daysCentersReports;
            }
            set
            {
                if (!ReferenceEquals(_daysCentersReports, value))
                {
                    var previousValue = _daysCentersReports as FixupCollection<DaysCentersReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDaysCentersReports;
                    }
                    _daysCentersReports = value;
                    var newValue = value as FixupCollection<DaysCentersReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDaysCentersReports;
                    }
                }
            }
        }
        private ICollection<DaysCentersReport> _daysCentersReports;
    
        public virtual ICollection<DccMemberVisit> DccMemberVisits
        {
            get
            {
                if (_dccMemberVisits == null)
                {
                    var newCollection = new FixupCollection<DccMemberVisit>();
                    newCollection.CollectionChanged += FixupDccMemberVisits;
                    _dccMemberVisits = newCollection;
                }
                return _dccMemberVisits;
            }
            set
            {
                if (!ReferenceEquals(_dccMemberVisits, value))
                {
                    var previousValue = _dccMemberVisits as FixupCollection<DccMemberVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDccMemberVisits;
                    }
                    _dccMemberVisits = value;
                    var newValue = value as FixupCollection<DccMemberVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDccMemberVisits;
                    }
                }
            }
        }
        private ICollection<DccMemberVisit> _dccMemberVisits;
    
        public virtual ICollection<SoupKitchensReport> SoupKitchensReports
        {
            get
            {
                if (_soupKitchensReports == null)
                {
                    var newCollection = new FixupCollection<SoupKitchensReport>();
                    newCollection.CollectionChanged += FixupSoupKitchensReports;
                    _soupKitchensReports = newCollection;
                }
                return _soupKitchensReports;
            }
            set
            {
                if (!ReferenceEquals(_soupKitchensReports, value))
                {
                    var previousValue = _soupKitchensReports as FixupCollection<SoupKitchensReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSoupKitchensReports;
                    }
                    _soupKitchensReports = value;
                    var newValue = value as FixupCollection<SoupKitchensReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSoupKitchensReports;
                    }
                }
            }
        }
        private ICollection<SoupKitchensReport> _soupKitchensReports;
    
        public virtual ICollection<ClientEventsCountReport> ClientEventsCountReports
        {
            get
            {
                if (_clientEventsCountReports == null)
                {
                    var newCollection = new FixupCollection<ClientEventsCountReport>();
                    newCollection.CollectionChanged += FixupClientEventsCountReports;
                    _clientEventsCountReports = newCollection;
                }
                return _clientEventsCountReports;
            }
            set
            {
                if (!ReferenceEquals(_clientEventsCountReports, value))
                {
                    var previousValue = _clientEventsCountReports as FixupCollection<ClientEventsCountReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClientEventsCountReports;
                    }
                    _clientEventsCountReports = value;
                    var newValue = value as FixupCollection<ClientEventsCountReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClientEventsCountReports;
                    }
                }
            }
        }
        private ICollection<ClientEventsCountReport> _clientEventsCountReports;

        #endregion

        #region Association Fixup
    
        private void FixupAppBudgetService(AppBudgetService previousValue)
        {
            if (previousValue != null && previousValue.SubReports.Contains(this))
            {
                previousValue.SubReports.Remove(this);
            }
    
            if (AppBudgetService != null)
            {
                if (!AppBudgetService.SubReports.Contains(this))
                {
                    AppBudgetService.SubReports.Add(this);
                }
                if (AppBudgetServiceId != AppBudgetService.Id)
                {
                    AppBudgetServiceId = AppBudgetService.Id;
                }
            }
        }
    
        private void FixupMainReport(MainReport previousValue)
        {
            if (previousValue != null && previousValue.SubReports.Contains(this))
            {
                previousValue.SubReports.Remove(this);
            }
    
            if (MainReport != null)
            {
                if (!MainReport.SubReports.Contains(this))
                {
                    MainReport.SubReports.Add(this);
                }
                if (MainReportId != MainReport.Id)
                {
                    MainReportId = MainReport.Id;
                }
            }
        }
    
        private void FixupProgramCosts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProgramCost item in e.NewItems)
                {
                    item.SubReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProgramCost item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubReport, this))
                    {
                        item.SubReport = null;
                    }
                }
            }
        }
    
        private void FixupMedicalEquipmentReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MedicalEquipmentReport item in e.NewItems)
                {
                    item.SubReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MedicalEquipmentReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubReport, this))
                    {
                        item.SubReport = null;
                    }
                }
            }
        }
    
        private void FixupMhmReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MhmReport item in e.NewItems)
                {
                    item.SubReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MhmReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubReport, this))
                    {
                        item.SubReport = null;
                    }
                }
            }
        }
    
        private void FixupClientReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ClientReport item in e.NewItems)
                {
                    item.SubReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ClientReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubReport, this))
                    {
                        item.SubReport = null;
                    }
                }
            }
        }
    
        private void FixupEmergencyReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmergencyReport item in e.NewItems)
                {
                    item.SubReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmergencyReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubReport, this))
                    {
                        item.SubReport = null;
                    }
                }
            }
        }
    
        private void FixupSupportiveCommunitiesReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SupportiveCommunitiesReport item in e.NewItems)
                {
                    item.SubReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SupportiveCommunitiesReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubReport, this))
                    {
                        item.SubReport = null;
                    }
                }
            }
        }
    
        private void FixupDaysCentersReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DaysCentersReport item in e.NewItems)
                {
                    item.SubReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DaysCentersReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubReport, this))
                    {
                        item.SubReport = null;
                    }
                }
            }
        }
    
        private void FixupDccMemberVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DccMemberVisit item in e.NewItems)
                {
                    item.SubReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DccMemberVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubReport, this))
                    {
                        item.SubReport = null;
                    }
                }
            }
        }
    
        private void FixupSoupKitchensReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SoupKitchensReport item in e.NewItems)
                {
                    item.SubReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SoupKitchensReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubReport, this))
                    {
                        item.SubReport = null;
                    }
                }
            }
        }
    
        private void FixupClientEventsCountReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ClientEventsCountReport item in e.NewItems)
                {
                    item.SubReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ClientEventsCountReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubReport, this))
                    {
                        item.SubReport = null;
                    }
                }
            }
        }

        #endregion

    }
}
