//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class FunctionalityLevel
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual bool Active
        {
            get;
            set;
        }
    
        public virtual decimal MinScore
        {
            get;
            set;
        }
    
        public virtual decimal MaxScore
        {
            get;
            set;
        }
    
        public virtual int HcHoursLimit
        {
            get;
            set;
        }
    
        public virtual System.DateTime StartDate
        {
            get;
            set;
        }
    
        public virtual int RelatedLevel
        {
            get { return _relatedLevel; }
            set
            {
                if (_relatedLevel != value)
                {
                    if (RelatedFunctionalityLevel != null && RelatedFunctionalityLevel.Id != value)
                    {
                        RelatedFunctionalityLevel = null;
                    }
                    _relatedLevel = value;
                }
            }
        }
        private int _relatedLevel;
    
        public virtual bool SubstractGovHours
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    		
    	public virtual RelatedFunctionalityLevel RelatedFunctionalityLevel
        {
            get { return _relatedFunctionalityLevel; }
            set
            {
                if (!ReferenceEquals(_relatedFunctionalityLevel, value))
                {
                    var previousValue = _relatedFunctionalityLevel;
                    _relatedFunctionalityLevel = value;
                    FixupRelatedFunctionalityLevel(previousValue);
                }
            }
        }
        private RelatedFunctionalityLevel _relatedFunctionalityLevel;
    
        public virtual ICollection<FunctionalityScore> FunctionalityScores
        {
            get
            {
                if (_functionalityScores == null)
                {
                    var newCollection = new FixupCollection<FunctionalityScore>();
                    newCollection.CollectionChanged += FixupFunctionalityScores;
                    _functionalityScores = newCollection;
                }
                return _functionalityScores;
            }
            set
            {
                if (!ReferenceEquals(_functionalityScores, value))
                {
                    var previousValue = _functionalityScores as FixupCollection<FunctionalityScore>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFunctionalityScores;
                    }
                    _functionalityScores = value;
                    var newValue = value as FixupCollection<FunctionalityScore>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFunctionalityScores;
                    }
                }
            }
        }
        private ICollection<FunctionalityScore> _functionalityScores;

        #endregion

        #region Association Fixup
    
        private void FixupRelatedFunctionalityLevel(RelatedFunctionalityLevel previousValue)
        {
            if (previousValue != null && previousValue.FunctionalityLevels.Contains(this))
            {
                previousValue.FunctionalityLevels.Remove(this);
            }
    
            if (RelatedFunctionalityLevel != null)
            {
                if (!RelatedFunctionalityLevel.FunctionalityLevels.Contains(this))
                {
                    RelatedFunctionalityLevel.FunctionalityLevels.Add(this);
                }
                if (RelatedLevel != RelatedFunctionalityLevel.Id)
                {
                    RelatedLevel = RelatedFunctionalityLevel.Id;
                }
            }
        }
    
        private void FixupFunctionalityScores(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FunctionalityScore item in e.NewItems)
                {
                    item.FunctionalityLevel = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FunctionalityScore item in e.OldItems)
                {
                    if (ReferenceEquals(item.FunctionalityLevel, this))
                    {
                        item.FunctionalityLevel = null;
                    }
                }
            }
        }

        #endregion

    }
}
