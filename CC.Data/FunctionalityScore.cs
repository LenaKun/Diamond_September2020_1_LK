//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class FunctionalityScore
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int ClientId
        {
            get { return _clientId; }
            set
            {
                if (_clientId != value)
                {
                    if (Client != null && Client.Id != value)
                    {
                        Client = null;
                    }
                    _clientId = value;
                }
            }
        }
        private int _clientId;
    
        public virtual decimal DiagnosticScore
        {
            get;
            set;
        }
    
        public virtual System.DateTime StartDate
        {
            get;
            set;
        }
    
        public virtual int FunctionalityLevelId
        {
            get { return _functionalityLevelId; }
            set
            {
                if (_functionalityLevelId != value)
                {
                    if (FunctionalityLevel != null && FunctionalityLevel.Id != value)
                    {
                        FunctionalityLevel = null;
                    }
                    _functionalityLevelId = value;
                }
            }
        }
        private int _functionalityLevelId;
    
        public virtual System.DateTime UpdatedAt
        {
            get;
            set;
        }
    
        public virtual int UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    if (User != null && User.Id != value)
                    {
                        User = null;
                    }
                    _updatedBy = value;
                }
            }
        }
        private int _updatedBy;
    
        public virtual string Errors
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	
    	public virtual FunctionalityLevel FunctionalityLevel
        {
            get { return _functionalityLevel; }
            set
            {
                if (!ReferenceEquals(_functionalityLevel, value))
                {
                    var previousValue = _functionalityLevel;
                    _functionalityLevel = value;
                    FixupFunctionalityLevel(previousValue);
                }
            }
        }
        private FunctionalityLevel _functionalityLevel;
    
    		
    	public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
    	
    	public virtual Client Client
        {
            get { return _client; }
            set
            {
                if (!ReferenceEquals(_client, value))
                {
                    var previousValue = _client;
                    _client = value;
                    FixupClient(previousValue);
                }
            }
        }
        private Client _client;
    
        public virtual ICollection<Daf> Dafs
        {
            get
            {
                if (_dafs == null)
                {
                    var newCollection = new FixupCollection<Daf>();
                    newCollection.CollectionChanged += FixupDafs;
                    _dafs = newCollection;
                }
                return _dafs;
            }
            set
            {
                if (!ReferenceEquals(_dafs, value))
                {
                    var previousValue = _dafs as FixupCollection<Daf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDafs;
                    }
                    _dafs = value;
                    var newValue = value as FixupCollection<Daf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDafs;
                    }
                }
            }
        }
        private ICollection<Daf> _dafs;

        #endregion

        #region Association Fixup
    
        private void FixupFunctionalityLevel(FunctionalityLevel previousValue)
        {
            if (previousValue != null && previousValue.FunctionalityScores.Contains(this))
            {
                previousValue.FunctionalityScores.Remove(this);
            }
    
            if (FunctionalityLevel != null)
            {
                if (!FunctionalityLevel.FunctionalityScores.Contains(this))
                {
                    FunctionalityLevel.FunctionalityScores.Add(this);
                }
                if (FunctionalityLevelId != FunctionalityLevel.Id)
                {
                    FunctionalityLevelId = FunctionalityLevel.Id;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.FunctionalityScores.Contains(this))
            {
                previousValue.FunctionalityScores.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.FunctionalityScores.Contains(this))
                {
                    User.FunctionalityScores.Add(this);
                }
                if (UpdatedBy != User.Id)
                {
                    UpdatedBy = User.Id;
                }
            }
        }
    
        private void FixupClient(Client previousValue)
        {
            if (previousValue != null && previousValue.FunctionalityScores.Contains(this))
            {
                previousValue.FunctionalityScores.Remove(this);
            }
    
            if (Client != null)
            {
                if (!Client.FunctionalityScores.Contains(this))
                {
                    Client.FunctionalityScores.Add(this);
                }
                if (ClientId != Client.Id)
                {
                    ClientId = Client.Id;
                }
            }
        }
    
        private void FixupDafs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Daf item in e.NewItems)
                {
                    item.FunctionalityScore = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Daf item in e.OldItems)
                {
                    if (ReferenceEquals(item.FunctionalityScore, this))
                    {
                        item.FunctionalityScore = null;
                    }
                }
            }
        }

        #endregion

    }
}
