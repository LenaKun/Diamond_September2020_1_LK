//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class Client
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual Nullable<int> MasterId
        {
            get { return _masterId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_masterId != value)
                    {
                        if (Client1 != null && Client1.Id != value)
                        {
                            Client1 = null;
                        }
                        _masterId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _masterId;
    
        public virtual int AgencyId
        {
            get { return _agencyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_agencyId != value)
                    {
                        if (Agency != null && Agency.Id != value)
                        {
                            Agency = null;
                        }
                        _agencyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _agencyId;
    
        public virtual string NationalId
        {
            get;
            set;
        }
    
        public virtual Nullable<int> NationalIdTypeId
        {
            get { return _nationalIdTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_nationalIdTypeId != value)
                    {
                        if (NationalIdType != null && NationalIdType.Id != value)
                        {
                            NationalIdType = null;
                        }
                        _nationalIdTypeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _nationalIdTypeId;
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string MiddleName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string Phone
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> BirthDate
        {
            get;
            set;
        }
    
        public virtual string Address
        {
            get;
            set;
        }
    
        public virtual string City
        {
            get;
            set;
        }
    
        public virtual Nullable<int> StateId
        {
            get { return _stateId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_stateId != value)
                    {
                        if (State != null && State.Id != value)
                        {
                            State = null;
                        }
                        _stateId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _stateId;
    
        public virtual string ZIP
        {
            get;
            set;
        }
    
        public virtual System.DateTime JoinDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LeaveDate
        {
            get;
            set;
        }
    
        public virtual Nullable<int> LeaveReasonId
        {
            get { return _leaveReasonId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_leaveReasonId != value)
                    {
                        if (LeaveReason != null && LeaveReason.Id != value)
                        {
                            LeaveReason = null;
                        }
                        _leaveReasonId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _leaveReasonId;
    
        public virtual string LeaveRemarks
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DeceasedDate
        {
            get;
            set;
        }
    
        public virtual int ApprovalStatusId
        {
            get { return _approvalStatusId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_approvalStatusId != value)
                    {
                        if (ApprovalStatus != null && ApprovalStatus.Id != value)
                        {
                            ApprovalStatus = null;
                        }
                        _approvalStatusId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _approvalStatusId;
    
        public virtual Nullable<int> FundStatusId
        {
            get { return _fundStatusId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_fundStatusId != value)
                    {
                        if (FundStatus != null && FundStatus.Id != value)
                        {
                            FundStatus = null;
                        }
                        _fundStatusId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _fundStatusId;
    
        public virtual bool IncomeCriteriaComplied
        {
            get;
            set;
        }
    
        public virtual bool IncomeVerificationRequired
        {
            get;
            set;
        }
    
        public virtual string NaziPersecutionDetails
        {
            get;
            set;
        }
    
        public virtual string Remarks
        {
            get;
            set;
        }
    
        public virtual string PobCity
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> EmigrationDate
        {
            get;
            set;
        }
    
        public virtual string PrevFirstName
        {
            get;
            set;
        }
    
        public virtual string PrevLastName
        {
            get;
            set;
        }
    
        public virtual string OtherFirstName
        {
            get;
            set;
        }
    
        public virtual string OtherLastName
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> OtherDob
        {
            get;
            set;
        }
    
        public virtual string OtherId
        {
            get;
            set;
        }
    
        public virtual Nullable<int> OtherIdTypeId
        {
            get { return _otherIdTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_otherIdTypeId != value)
                    {
                        if (OtherNationalIdType != null && OtherNationalIdType.Id != value)
                        {
                            OtherNationalIdType = null;
                        }
                        _otherIdTypeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _otherIdTypeId;
    
        public virtual string OtherAddress
        {
            get;
            set;
        }
    
        public virtual string PreviousAddressInIsrael
        {
            get;
            set;
        }
    
        public virtual string CompensationProgramName
        {
            get;
            set;
        }
    
        public virtual bool IsCeefRecipient
        {
            get;
            set;
        }
    
        public virtual string CeefId
        {
            get;
            set;
        }
    
        public virtual string AddCompName
        {
            get;
            set;
        }
    
        public virtual string AddCompId
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> ExceptionalHours
        {
            get;
            set;
        }
    
        public virtual int UpdatedById
        {
            get { return _updatedById; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_updatedById != value)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                        _updatedById = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _updatedById;
    
        public virtual System.DateTime UpdatedAt
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedAt
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> MatchFlag
        {
            get;
            set;
        }
    
        public virtual string New_Client
        {
            get;
            set;
        }
    
        public virtual string InternalId
        {
            get;
            set;
        }
    
        public virtual bool ACPExported
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Gender
        {
            get;
            set;
        }
    
        public virtual bool AdministrativeLeave
        {
            get;
            set;
        }
    
        public virtual bool AustrianEligible
        {
            get;
            set;
        }
    
        public virtual Nullable<int> BirthCountryId
        {
            get { return _birthCountryId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_birthCountryId != value)
                    {
                        if (BirthCountry != null && BirthCountry.Id != value)
                        {
                            BirthCountry = null;
                        }
                        _birthCountryId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _birthCountryId;
    
        public virtual Nullable<int> GGReportedCount
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ApprovalStatusUpdated
        {
            get;
            set;
        }
    
        public virtual bool RomanianEligible
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CountryId
        {
            get { return _countryId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_countryId != value)
                    {
                        if (Country != null && Country.Id != value)
                        {
                            Country = null;
                        }
                        _countryId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _countryId;
    
        public virtual Nullable<int> MasterIdClcd
        {
            get;
            set;
        }
    
        public virtual Nullable<int> DCC_Subside
        {
            get { return _dCC_Subside; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_dCC_Subside != value)
                    {
                        if (DccSubside != null && DccSubside.Id != value)
                        {
                            DccSubside = null;
                        }
                        _dCC_Subside = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _dCC_Subside;
    
        public virtual Nullable<decimal> DCC_VisitCost
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> SC_MonthlyCost
        {
            get;
            set;
        }
    
        public virtual bool DCC_Client
        {
            get;
            set;
        }
    
        public virtual bool SC_Client
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> AutoLeaveOverride
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> MAFDate
        {
            get;
            set;
        }
    
        public virtual bool HomecareWaitlist
        {
            get;
            set;
        }
    
        public virtual bool OtherServicesWaitlist
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CommPrefsId
        {
            get { return _commPrefsId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_commPrefsId != value)
                    {
                        if (CommunicationsPreference != null && CommunicationsPreference.Id != value)
                        {
                            CommunicationsPreference = null;
                        }
                        _commPrefsId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _commPrefsId;
    
        public virtual Nullable<int> CareReceivedId
        {
            get { return _careReceivedId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_careReceivedId != value)
                    {
                        if (CareReceivingOption != null && CareReceivingOption.Id != value)
                        {
                            CareReceivingOption = null;
                        }
                        _careReceivedId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _careReceivedId;
    
        public virtual Nullable<System.DateTime> MAF105Date
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> HAS2Date
        {
            get;
            set;
        }
    
        public virtual bool UnableToSign
        {
            get;
            set;
        }
    
        public virtual bool NursingHome
        {
            get;
            set;
        }
    
        public virtual bool AssistedLiving
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	
    	public virtual Agency Agency
        {
            get { return _agency; }
            set
            {
                if (!ReferenceEquals(_agency, value))
                {
                    var previousValue = _agency;
                    _agency = value;
                    FixupAgency(previousValue);
                }
            }
        }
        private Agency _agency;
    
    	
    	public virtual ApprovalStatus ApprovalStatus
        {
            get { return _approvalStatus; }
            set
            {
                if (!ReferenceEquals(_approvalStatus, value))
                {
                    var previousValue = _approvalStatus;
                    _approvalStatus = value;
                    FixupApprovalStatus(previousValue);
                }
            }
        }
        private ApprovalStatus _approvalStatus;
    
        public virtual ICollection<ClientReport> ClientReports
        {
            get
            {
                if (_clientReports == null)
                {
                    var newCollection = new FixupCollection<ClientReport>();
                    newCollection.CollectionChanged += FixupClientReports;
                    _clientReports = newCollection;
                }
                return _clientReports;
            }
            set
            {
                if (!ReferenceEquals(_clientReports, value))
                {
                    var previousValue = _clientReports as FixupCollection<ClientReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClientReports;
                    }
                    _clientReports = value;
                    var newValue = value as FixupCollection<ClientReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClientReports;
                    }
                }
            }
        }
        private ICollection<ClientReport> _clientReports;
    
    	
    	public virtual FundStatus FundStatus
        {
            get { return _fundStatus; }
            set
            {
                if (!ReferenceEquals(_fundStatus, value))
                {
                    var previousValue = _fundStatus;
                    _fundStatus = value;
                    FixupFundStatus(previousValue);
                }
            }
        }
        private FundStatus _fundStatus;
    
    	
    	public virtual LeaveReason LeaveReason
        {
            get { return _leaveReason; }
            set
            {
                if (!ReferenceEquals(_leaveReason, value))
                {
                    var previousValue = _leaveReason;
                    _leaveReason = value;
                    FixupLeaveReason(previousValue);
                }
            }
        }
        private LeaveReason _leaveReason;
    
        public virtual ICollection<Client> Clients1
        {
            get
            {
                if (_clients1 == null)
                {
                    var newCollection = new FixupCollection<Client>();
                    newCollection.CollectionChanged += FixupClients1;
                    _clients1 = newCollection;
                }
                return _clients1;
            }
            set
            {
                if (!ReferenceEquals(_clients1, value))
                {
                    var previousValue = _clients1 as FixupCollection<Client>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClients1;
                    }
                    _clients1 = value;
                    var newValue = value as FixupCollection<Client>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClients1;
                    }
                }
            }
        }
        private ICollection<Client> _clients1;
    
    		
    	public virtual Client Client1
        {
            get { return _client1; }
            set
            {
                if (!ReferenceEquals(_client1, value))
                {
                    var previousValue = _client1;
                    _client1 = value;
                    FixupClient1(previousValue);
                }
            }
        }
        private Client _client1;
    
    	
    	public virtual NationalIdType NationalIdType
        {
            get { return _nationalIdType; }
            set
            {
                if (!ReferenceEquals(_nationalIdType, value))
                {
                    var previousValue = _nationalIdType;
                    _nationalIdType = value;
                    FixupNationalIdType(previousValue);
                }
            }
        }
        private NationalIdType _nationalIdType;
    
    		
    	public virtual NationalIdType OtherNationalIdType
        {
            get { return _otherNationalIdType; }
            set
            {
                if (!ReferenceEquals(_otherNationalIdType, value))
                {
                    var previousValue = _otherNationalIdType;
                    _otherNationalIdType = value;
                    FixupOtherNationalIdType(previousValue);
                }
            }
        }
        private NationalIdType _otherNationalIdType;
    
    	
    	public virtual State State
        {
            get { return _state; }
            set
            {
                if (!ReferenceEquals(_state, value))
                {
                    var previousValue = _state;
                    _state = value;
                    FixupState(previousValue);
                }
            }
        }
        private State _state;
    
    		
    	public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual ICollection<EmergencyReport> EmergencyReports
        {
            get
            {
                if (_emergencyReports == null)
                {
                    var newCollection = new FixupCollection<EmergencyReport>();
                    newCollection.CollectionChanged += FixupEmergencyReports;
                    _emergencyReports = newCollection;
                }
                return _emergencyReports;
            }
            set
            {
                if (!ReferenceEquals(_emergencyReports, value))
                {
                    var previousValue = _emergencyReports as FixupCollection<EmergencyReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmergencyReports;
                    }
                    _emergencyReports = value;
                    var newValue = value as FixupCollection<EmergencyReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmergencyReports;
                    }
                }
            }
        }
        private ICollection<EmergencyReport> _emergencyReports;
    
        public virtual ICollection<FunctionalityScore> FunctionalityScores
        {
            get
            {
                if (_functionalityScores == null)
                {
                    var newCollection = new FixupCollection<FunctionalityScore>();
                    newCollection.CollectionChanged += FixupFunctionalityScores;
                    _functionalityScores = newCollection;
                }
                return _functionalityScores;
            }
            set
            {
                if (!ReferenceEquals(_functionalityScores, value))
                {
                    var previousValue = _functionalityScores as FixupCollection<FunctionalityScore>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFunctionalityScores;
                    }
                    _functionalityScores = value;
                    var newValue = value as FixupCollection<FunctionalityScore>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFunctionalityScores;
                    }
                }
            }
        }
        private ICollection<FunctionalityScore> _functionalityScores;
    
        public virtual ICollection<HomeCareEntitledPeriod> HomeCareEntitledPeriods
        {
            get
            {
                if (_homeCareEntitledPeriods == null)
                {
                    var newCollection = new FixupCollection<HomeCareEntitledPeriod>();
                    newCollection.CollectionChanged += FixupHomeCareEntitledPeriods;
                    _homeCareEntitledPeriods = newCollection;
                }
                return _homeCareEntitledPeriods;
            }
            set
            {
                if (!ReferenceEquals(_homeCareEntitledPeriods, value))
                {
                    var previousValue = _homeCareEntitledPeriods as FixupCollection<HomeCareEntitledPeriod>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHomeCareEntitledPeriods;
                    }
                    _homeCareEntitledPeriods = value;
                    var newValue = value as FixupCollection<HomeCareEntitledPeriod>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHomeCareEntitledPeriods;
                    }
                }
            }
        }
        private ICollection<HomeCareEntitledPeriod> _homeCareEntitledPeriods;
    
        public virtual ICollection<MedicalEquipmentReport> MedicalEquipmentReports
        {
            get
            {
                if (_medicalEquipmentReports == null)
                {
                    var newCollection = new FixupCollection<MedicalEquipmentReport>();
                    newCollection.CollectionChanged += FixupMedicalEquipmentReports;
                    _medicalEquipmentReports = newCollection;
                }
                return _medicalEquipmentReports;
            }
            set
            {
                if (!ReferenceEquals(_medicalEquipmentReports, value))
                {
                    var previousValue = _medicalEquipmentReports as FixupCollection<MedicalEquipmentReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMedicalEquipmentReports;
                    }
                    _medicalEquipmentReports = value;
                    var newValue = value as FixupCollection<MedicalEquipmentReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMedicalEquipmentReports;
                    }
                }
            }
        }
        private ICollection<MedicalEquipmentReport> _medicalEquipmentReports;
    
        public virtual ICollection<MhmReport> MhmReports
        {
            get
            {
                if (_mhmReports == null)
                {
                    var newCollection = new FixupCollection<MhmReport>();
                    newCollection.CollectionChanged += FixupMhmReports;
                    _mhmReports = newCollection;
                }
                return _mhmReports;
            }
            set
            {
                if (!ReferenceEquals(_mhmReports, value))
                {
                    var previousValue = _mhmReports as FixupCollection<MhmReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMhmReports;
                    }
                    _mhmReports = value;
                    var newValue = value as FixupCollection<MhmReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMhmReports;
                    }
                }
            }
        }
        private ICollection<MhmReport> _mhmReports;
    
        public virtual ICollection<GovHcHour> GovHcHours1
        {
            get
            {
                if (_govHcHours1 == null)
                {
                    var newCollection = new FixupCollection<GovHcHour>();
                    newCollection.CollectionChanged += FixupGovHcHours1;
                    _govHcHours1 = newCollection;
                }
                return _govHcHours1;
            }
            set
            {
                if (!ReferenceEquals(_govHcHours1, value))
                {
                    var previousValue = _govHcHours1 as FixupCollection<GovHcHour>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGovHcHours1;
                    }
                    _govHcHours1 = value;
                    var newValue = value as FixupCollection<GovHcHour>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGovHcHours1;
                    }
                }
            }
        }
        private ICollection<GovHcHour> _govHcHours1;
    
        public virtual ICollection<ClientContact> ClientContacts
        {
            get
            {
                if (_clientContacts == null)
                {
                    var newCollection = new FixupCollection<ClientContact>();
                    newCollection.CollectionChanged += FixupClientContacts;
                    _clientContacts = newCollection;
                }
                return _clientContacts;
            }
            set
            {
                if (!ReferenceEquals(_clientContacts, value))
                {
                    var previousValue = _clientContacts as FixupCollection<ClientContact>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClientContacts;
                    }
                    _clientContacts = value;
                    var newValue = value as FixupCollection<ClientContact>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClientContacts;
                    }
                }
            }
        }
        private ICollection<ClientContact> _clientContacts;
    
    	
    	public virtual BirthCountry BirthCountry
        {
            get { return _birthCountry; }
            set
            {
                if (!ReferenceEquals(_birthCountry, value))
                {
                    var previousValue = _birthCountry;
                    _birthCountry = value;
                    FixupBirthCountry(previousValue);
                }
            }
        }
        private BirthCountry _birthCountry;
    
        public virtual ICollection<UnmetNeed> UnmetNeeds1
        {
            get
            {
                if (_unmetNeeds1 == null)
                {
                    var newCollection = new FixupCollection<UnmetNeed>();
                    newCollection.CollectionChanged += FixupUnmetNeeds1;
                    _unmetNeeds1 = newCollection;
                }
                return _unmetNeeds1;
            }
            set
            {
                if (!ReferenceEquals(_unmetNeeds1, value))
                {
                    var previousValue = _unmetNeeds1 as FixupCollection<UnmetNeed>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUnmetNeeds1;
                    }
                    _unmetNeeds1 = value;
                    var newValue = value as FixupCollection<UnmetNeed>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUnmetNeeds1;
                    }
                }
            }
        }
        private ICollection<UnmetNeed> _unmetNeeds1;
    
    	
    	public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;
    
        public virtual ICollection<SupportiveCommunitiesReport> SupportiveCommunitiesReports
        {
            get
            {
                if (_supportiveCommunitiesReports == null)
                {
                    var newCollection = new FixupCollection<SupportiveCommunitiesReport>();
                    newCollection.CollectionChanged += FixupSupportiveCommunitiesReports;
                    _supportiveCommunitiesReports = newCollection;
                }
                return _supportiveCommunitiesReports;
            }
            set
            {
                if (!ReferenceEquals(_supportiveCommunitiesReports, value))
                {
                    var previousValue = _supportiveCommunitiesReports as FixupCollection<SupportiveCommunitiesReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSupportiveCommunitiesReports;
                    }
                    _supportiveCommunitiesReports = value;
                    var newValue = value as FixupCollection<SupportiveCommunitiesReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSupportiveCommunitiesReports;
                    }
                }
            }
        }
        private ICollection<SupportiveCommunitiesReport> _supportiveCommunitiesReports;
    
    		
    	public virtual DccSubside DccSubside
        {
            get { return _dccSubside; }
            set
            {
                if (!ReferenceEquals(_dccSubside, value))
                {
                    var previousValue = _dccSubside;
                    _dccSubside = value;
                    FixupDccSubside(previousValue);
                }
            }
        }
        private DccSubside _dccSubside;
    
        public virtual ICollection<DaysCentersReport> DaysCentersReports
        {
            get
            {
                if (_daysCentersReports == null)
                {
                    var newCollection = new FixupCollection<DaysCentersReport>();
                    newCollection.CollectionChanged += FixupDaysCentersReports;
                    _daysCentersReports = newCollection;
                }
                return _daysCentersReports;
            }
            set
            {
                if (!ReferenceEquals(_daysCentersReports, value))
                {
                    var previousValue = _daysCentersReports as FixupCollection<DaysCentersReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDaysCentersReports;
                    }
                    _daysCentersReports = value;
                    var newValue = value as FixupCollection<DaysCentersReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDaysCentersReports;
                    }
                }
            }
        }
        private ICollection<DaysCentersReport> _daysCentersReports;
    
        public virtual ICollection<DccMemberVisit> DccMemberVisits
        {
            get
            {
                if (_dccMemberVisits == null)
                {
                    var newCollection = new FixupCollection<DccMemberVisit>();
                    newCollection.CollectionChanged += FixupDccMemberVisits;
                    _dccMemberVisits = newCollection;
                }
                return _dccMemberVisits;
            }
            set
            {
                if (!ReferenceEquals(_dccMemberVisits, value))
                {
                    var previousValue = _dccMemberVisits as FixupCollection<DccMemberVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDccMemberVisits;
                    }
                    _dccMemberVisits = value;
                    var newValue = value as FixupCollection<DccMemberVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDccMemberVisits;
                    }
                }
            }
        }
        private ICollection<DccMemberVisit> _dccMemberVisits;
    
        public virtual ICollection<Daf> Dafs
        {
            get
            {
                if (_dafs == null)
                {
                    var newCollection = new FixupCollection<Daf>();
                    newCollection.CollectionChanged += FixupDafs;
                    _dafs = newCollection;
                }
                return _dafs;
            }
            set
            {
                if (!ReferenceEquals(_dafs, value))
                {
                    var previousValue = _dafs as FixupCollection<Daf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDafs;
                    }
                    _dafs = value;
                    var newValue = value as FixupCollection<Daf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDafs;
                    }
                }
            }
        }
        private ICollection<Daf> _dafs;
    
        public virtual ICollection<ClientHcStatus> ClientHcStatuses
        {
            get
            {
                if (_clientHcStatuses == null)
                {
                    var newCollection = new FixupCollection<ClientHcStatus>();
                    newCollection.CollectionChanged += FixupClientHcStatuses;
                    _clientHcStatuses = newCollection;
                }
                return _clientHcStatuses;
            }
            set
            {
                if (!ReferenceEquals(_clientHcStatuses, value))
                {
                    var previousValue = _clientHcStatuses as FixupCollection<ClientHcStatus>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClientHcStatuses;
                    }
                    _clientHcStatuses = value;
                    var newValue = value as FixupCollection<ClientHcStatus>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClientHcStatuses;
                    }
                }
            }
        }
        private ICollection<ClientHcStatus> _clientHcStatuses;
    
        public virtual ICollection<SoupKitchensReport> SoupKitchensReports
        {
            get
            {
                if (_soupKitchensReports == null)
                {
                    var newCollection = new FixupCollection<SoupKitchensReport>();
                    newCollection.CollectionChanged += FixupSoupKitchensReports;
                    _soupKitchensReports = newCollection;
                }
                return _soupKitchensReports;
            }
            set
            {
                if (!ReferenceEquals(_soupKitchensReports, value))
                {
                    var previousValue = _soupKitchensReports as FixupCollection<SoupKitchensReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSoupKitchensReports;
                    }
                    _soupKitchensReports = value;
                    var newValue = value as FixupCollection<SoupKitchensReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSoupKitchensReports;
                    }
                }
            }
        }
        private ICollection<SoupKitchensReport> _soupKitchensReports;
    
        public virtual ICollection<UnmetNeedsOther> UnmetNeedsOthers
        {
            get
            {
                if (_unmetNeedsOthers == null)
                {
                    var newCollection = new FixupCollection<UnmetNeedsOther>();
                    newCollection.CollectionChanged += FixupUnmetNeedsOthers;
                    _unmetNeedsOthers = newCollection;
                }
                return _unmetNeedsOthers;
            }
            set
            {
                if (!ReferenceEquals(_unmetNeedsOthers, value))
                {
                    var previousValue = _unmetNeedsOthers as FixupCollection<UnmetNeedsOther>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUnmetNeedsOthers;
                    }
                    _unmetNeedsOthers = value;
                    var newValue = value as FixupCollection<UnmetNeedsOther>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUnmetNeedsOthers;
                    }
                }
            }
        }
        private ICollection<UnmetNeedsOther> _unmetNeedsOthers;
    
        public virtual ICollection<GrandfatherHour> GrandfatherHours
        {
            get
            {
                if (_grandfatherHours == null)
                {
                    var newCollection = new FixupCollection<GrandfatherHour>();
                    newCollection.CollectionChanged += FixupGrandfatherHours;
                    _grandfatherHours = newCollection;
                }
                return _grandfatherHours;
            }
            set
            {
                if (!ReferenceEquals(_grandfatherHours, value))
                {
                    var previousValue = _grandfatherHours as FixupCollection<GrandfatherHour>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGrandfatherHours;
                    }
                    _grandfatherHours = value;
                    var newValue = value as FixupCollection<GrandfatherHour>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGrandfatherHours;
                    }
                }
            }
        }
        private ICollection<GrandfatherHour> _grandfatherHours;
    
    		
    	public virtual CommunicationsPreference CommunicationsPreference
        {
            get { return _communicationsPreference; }
            set
            {
                if (!ReferenceEquals(_communicationsPreference, value))
                {
                    var previousValue = _communicationsPreference;
                    _communicationsPreference = value;
                    FixupCommunicationsPreference(previousValue);
                }
            }
        }
        private CommunicationsPreference _communicationsPreference;
    
    		
    	public virtual CareReceivingOption CareReceivingOption
        {
            get { return _careReceivingOption; }
            set
            {
                if (!ReferenceEquals(_careReceivingOption, value))
                {
                    var previousValue = _careReceivingOption;
                    _careReceivingOption = value;
                    FixupCareReceivingOption(previousValue);
                }
            }
        }
        private CareReceivingOption _careReceivingOption;
    
        public virtual ICollection<CfsRow> CfsRows
        {
            get
            {
                if (_cfsRows == null)
                {
                    var newCollection = new FixupCollection<CfsRow>();
                    newCollection.CollectionChanged += FixupCfsRows;
                    _cfsRows = newCollection;
                }
                return _cfsRows;
            }
            set
            {
                if (!ReferenceEquals(_cfsRows, value))
                {
                    var previousValue = _cfsRows as FixupCollection<CfsRow>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCfsRows;
                    }
                    _cfsRows = value;
                    var newValue = value as FixupCollection<CfsRow>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCfsRows;
                    }
                }
            }
        }
        private ICollection<CfsRow> _cfsRows;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAgency(Agency previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (Agency != null)
            {
                if (!Agency.Clients.Contains(this))
                {
                    Agency.Clients.Add(this);
                }
                if (AgencyId != Agency.Id)
                {
                    AgencyId = Agency.Id;
                }
            }
        }
    
        private void FixupApprovalStatus(ApprovalStatus previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (ApprovalStatus != null)
            {
                if (!ApprovalStatus.Clients.Contains(this))
                {
                    ApprovalStatus.Clients.Add(this);
                }
                if (ApprovalStatusId != ApprovalStatus.Id)
                {
                    ApprovalStatusId = ApprovalStatus.Id;
                }
            }
        }
    
        private void FixupFundStatus(FundStatus previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (FundStatus != null)
            {
                if (!FundStatus.Clients.Contains(this))
                {
                    FundStatus.Clients.Add(this);
                }
                if (FundStatusId != FundStatus.Id)
                {
                    FundStatusId = FundStatus.Id;
                }
            }
            else if (!_settingFK)
            {
                FundStatusId = null;
            }
        }
    
        private void FixupLeaveReason(LeaveReason previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (LeaveReason != null)
            {
                if (!LeaveReason.Clients.Contains(this))
                {
                    LeaveReason.Clients.Add(this);
                }
                if (LeaveReasonId != LeaveReason.Id)
                {
                    LeaveReasonId = LeaveReason.Id;
                }
            }
            else if (!_settingFK)
            {
                LeaveReasonId = null;
            }
        }
    
        private void FixupClient1(Client previousValue)
        {
            if (previousValue != null && previousValue.Clients1.Contains(this))
            {
                previousValue.Clients1.Remove(this);
            }
    
            if (Client1 != null)
            {
                if (!Client1.Clients1.Contains(this))
                {
                    Client1.Clients1.Add(this);
                }
                if (MasterId != Client1.Id)
                {
                    MasterId = Client1.Id;
                }
            }
            else if (!_settingFK)
            {
                MasterId = null;
            }
        }
    
        private void FixupNationalIdType(NationalIdType previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (NationalIdType != null)
            {
                if (!NationalIdType.Clients.Contains(this))
                {
                    NationalIdType.Clients.Add(this);
                }
                if (NationalIdTypeId != NationalIdType.Id)
                {
                    NationalIdTypeId = NationalIdType.Id;
                }
            }
            else if (!_settingFK)
            {
                NationalIdTypeId = null;
            }
        }
    
        private void FixupOtherNationalIdType(NationalIdType previousValue)
        {
            if (previousValue != null && previousValue.Clients1.Contains(this))
            {
                previousValue.Clients1.Remove(this);
            }
    
            if (OtherNationalIdType != null)
            {
                if (!OtherNationalIdType.Clients1.Contains(this))
                {
                    OtherNationalIdType.Clients1.Add(this);
                }
                if (OtherIdTypeId != OtherNationalIdType.Id)
                {
                    OtherIdTypeId = OtherNationalIdType.Id;
                }
            }
            else if (!_settingFK)
            {
                OtherIdTypeId = null;
            }
        }
    
        private void FixupState(State previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (State != null)
            {
                if (!State.Clients.Contains(this))
                {
                    State.Clients.Add(this);
                }
                if (StateId != State.Id)
                {
                    StateId = State.Id;
                }
            }
            else if (!_settingFK)
            {
                StateId = null;
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Clients.Contains(this))
                {
                    User.Clients.Add(this);
                }
                if (UpdatedById != User.Id)
                {
                    UpdatedById = User.Id;
                }
            }
        }
    
        private void FixupBirthCountry(BirthCountry previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (BirthCountry != null)
            {
                if (!BirthCountry.Clients.Contains(this))
                {
                    BirthCountry.Clients.Add(this);
                }
                if (BirthCountryId != BirthCountry.Id)
                {
                    BirthCountryId = BirthCountry.Id;
                }
            }
            else if (!_settingFK)
            {
                BirthCountryId = null;
            }
        }
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.Clients.Contains(this))
                {
                    Country.Clients.Add(this);
                }
                if (CountryId != Country.Id)
                {
                    CountryId = Country.Id;
                }
            }
            else if (!_settingFK)
            {
                CountryId = null;
            }
        }
    
        private void FixupDccSubside(DccSubside previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (DccSubside != null)
            {
                if (!DccSubside.Clients.Contains(this))
                {
                    DccSubside.Clients.Add(this);
                }
                if (DCC_Subside != DccSubside.Id)
                {
                    DCC_Subside = DccSubside.Id;
                }
            }
            else if (!_settingFK)
            {
                DCC_Subside = null;
            }
        }
    
        private void FixupCommunicationsPreference(CommunicationsPreference previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (CommunicationsPreference != null)
            {
                if (!CommunicationsPreference.Clients.Contains(this))
                {
                    CommunicationsPreference.Clients.Add(this);
                }
                if (CommPrefsId != CommunicationsPreference.Id)
                {
                    CommPrefsId = CommunicationsPreference.Id;
                }
            }
            else if (!_settingFK)
            {
                CommPrefsId = null;
            }
        }
    
        private void FixupCareReceivingOption(CareReceivingOption previousValue)
        {
            if (previousValue != null && previousValue.Clients.Contains(this))
            {
                previousValue.Clients.Remove(this);
            }
    
            if (CareReceivingOption != null)
            {
                if (!CareReceivingOption.Clients.Contains(this))
                {
                    CareReceivingOption.Clients.Add(this);
                }
                if (CareReceivedId != CareReceivingOption.Id)
                {
                    CareReceivedId = CareReceivingOption.Id;
                }
            }
            else if (!_settingFK)
            {
                CareReceivedId = null;
            }
        }
    
        private void FixupClientReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ClientReport item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ClientReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupClients1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Client item in e.NewItems)
                {
                    item.Client1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Client item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client1, this))
                    {
                        item.Client1 = null;
                    }
                }
            }
        }
    
        private void FixupEmergencyReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmergencyReport item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmergencyReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupFunctionalityScores(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FunctionalityScore item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FunctionalityScore item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupHomeCareEntitledPeriods(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (HomeCareEntitledPeriod item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HomeCareEntitledPeriod item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupMedicalEquipmentReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MedicalEquipmentReport item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MedicalEquipmentReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupMhmReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MhmReport item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MhmReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupGovHcHours1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GovHcHour item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GovHcHour item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupClientContacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ClientContact item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ClientContact item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupUnmetNeeds1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UnmetNeed item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UnmetNeed item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupSupportiveCommunitiesReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SupportiveCommunitiesReport item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SupportiveCommunitiesReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupDaysCentersReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DaysCentersReport item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DaysCentersReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupDccMemberVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DccMemberVisit item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DccMemberVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupDafs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Daf item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Daf item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupClientHcStatuses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ClientHcStatus item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ClientHcStatus item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupSoupKitchensReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SoupKitchensReport item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SoupKitchensReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupUnmetNeedsOthers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UnmetNeedsOther item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UnmetNeedsOther item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupGrandfatherHours(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GrandfatherHour item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GrandfatherHour item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupCfsRows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CfsRow item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CfsRow item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }

        #endregion

    }
}
