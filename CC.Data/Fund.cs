//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class Fund
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int MasterFundId
        {
            get { return _masterFundId; }
            set
            {
                if (_masterFundId != value)
                {
                    if (MasterFund != null && MasterFund.Id != value)
                    {
                        MasterFund = null;
                    }
                    _masterFundId = value;
                }
            }
        }
        private int _masterFundId;
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual System.DateTime StartDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime EndDate
        {
            get;
            set;
        }
    
        public virtual decimal Amount
        {
            get;
            set;
        }
    
        public virtual string CurrencyCode
        {
            get { return _currencyCode; }
            set
            {
                if (_currencyCode != value)
                {
                    if (Currency != null && Currency.Id != value)
                    {
                        Currency = null;
                    }
                    _currencyCode = value;
                }
            }
        }
        private string _currencyCode;
    
        public virtual bool AustrianEligibleOnly
        {
            get;
            set;
        }
    
        public virtual bool RomanianEligibleOnly
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> OtherServicesMax
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> HomecareMin
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> AdminMax
        {
            get;
            set;
        }
    
        public virtual Nullable<int> FluxxFundId
        {
            get;
            set;
        }
    
        public virtual string FluxxFundName
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    		
    	public virtual Currency Currency
        {
            get { return _currency; }
            set
            {
                if (!ReferenceEquals(_currency, value))
                {
                    var previousValue = _currency;
                    _currency = value;
                    FixupCurrency(previousValue);
                }
            }
        }
        private Currency _currency;
    
    	
    	public virtual MasterFund MasterFund
        {
            get { return _masterFund; }
            set
            {
                if (!ReferenceEquals(_masterFund, value))
                {
                    var previousValue = _masterFund;
                    _masterFund = value;
                    FixupMasterFund(previousValue);
                }
            }
        }
        private MasterFund _masterFund;
    
        public virtual ICollection<App> Apps
        {
            get
            {
                if (_apps == null)
                {
                    var newCollection = new FixupCollection<App>();
                    newCollection.CollectionChanged += FixupApps;
                    _apps = newCollection;
                }
                return _apps;
            }
            set
            {
                if (!ReferenceEquals(_apps, value))
                {
                    var previousValue = _apps as FixupCollection<App>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApps;
                    }
                    _apps = value;
                    var newValue = value as FixupCollection<App>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApps;
                    }
                }
            }
        }
        private ICollection<App> _apps;
    
        public virtual ICollection<EmergencyCap> EmergencyCaps
        {
            get
            {
                if (_emergencyCaps == null)
                {
                    var newCollection = new FixupCollection<EmergencyCap>();
                    newCollection.CollectionChanged += FixupEmergencyCaps;
                    _emergencyCaps = newCollection;
                }
                return _emergencyCaps;
            }
            set
            {
                if (!ReferenceEquals(_emergencyCaps, value))
                {
                    var previousValue = _emergencyCaps as FixupCollection<EmergencyCap>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmergencyCaps;
                    }
                    _emergencyCaps = value;
                    var newValue = value as FixupCollection<EmergencyCap>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmergencyCaps;
                    }
                }
            }
        }
        private ICollection<EmergencyCap> _emergencyCaps;
    
        public virtual ICollection<FundExchangeRate> FundExchangeRates
        {
            get
            {
                if (_fundExchangeRates == null)
                {
                    var newCollection = new FixupCollection<FundExchangeRate>();
                    newCollection.CollectionChanged += FixupFundExchangeRates;
                    _fundExchangeRates = newCollection;
                }
                return _fundExchangeRates;
            }
            set
            {
                if (!ReferenceEquals(_fundExchangeRates, value))
                {
                    var previousValue = _fundExchangeRates as FixupCollection<FundExchangeRate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFundExchangeRates;
                    }
                    _fundExchangeRates = value;
                    var newValue = value as FixupCollection<FundExchangeRate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFundExchangeRates;
                    }
                }
            }
        }
        private ICollection<FundExchangeRate> _fundExchangeRates;
    
        public virtual ICollection<ServiceConstraint> ServiceConstraints
        {
            get
            {
                if (_serviceConstraints == null)
                {
                    var newCollection = new FixupCollection<ServiceConstraint>();
                    newCollection.CollectionChanged += FixupServiceConstraints;
                    _serviceConstraints = newCollection;
                }
                return _serviceConstraints;
            }
            set
            {
                if (!ReferenceEquals(_serviceConstraints, value))
                {
                    var previousValue = _serviceConstraints as FixupCollection<ServiceConstraint>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupServiceConstraints;
                    }
                    _serviceConstraints = value;
                    var newValue = value as FixupCollection<ServiceConstraint>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupServiceConstraints;
                    }
                }
            }
        }
        private ICollection<ServiceConstraint> _serviceConstraints;
    
        public virtual ICollection<MhmCap> MhmCaps
        {
            get
            {
                if (_mhmCaps == null)
                {
                    var newCollection = new FixupCollection<MhmCap>();
                    newCollection.CollectionChanged += FixupMhmCaps;
                    _mhmCaps = newCollection;
                }
                return _mhmCaps;
            }
            set
            {
                if (!ReferenceEquals(_mhmCaps, value))
                {
                    var previousValue = _mhmCaps as FixupCollection<MhmCap>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMhmCaps;
                    }
                    _mhmCaps = value;
                    var newValue = value as FixupCollection<MhmCap>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMhmCaps;
                    }
                }
            }
        }
        private ICollection<MhmCap> _mhmCaps;
    
        public virtual ICollection<HCWeeklyCap> HCWeeklyCaps
        {
            get
            {
                if (_hCWeeklyCaps == null)
                {
                    var newCollection = new FixupCollection<HCWeeklyCap>();
                    newCollection.CollectionChanged += FixupHCWeeklyCaps;
                    _hCWeeklyCaps = newCollection;
                }
                return _hCWeeklyCaps;
            }
            set
            {
                if (!ReferenceEquals(_hCWeeklyCaps, value))
                {
                    var previousValue = _hCWeeklyCaps as FixupCollection<HCWeeklyCap>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHCWeeklyCaps;
                    }
                    _hCWeeklyCaps = value;
                    var newValue = value as FixupCollection<HCWeeklyCap>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHCWeeklyCaps;
                    }
                }
            }
        }
        private ICollection<HCWeeklyCap> _hCWeeklyCaps;

        #endregion

        #region Association Fixup
    
        private void FixupCurrency(Currency previousValue)
        {
            if (previousValue != null && previousValue.Funds.Contains(this))
            {
                previousValue.Funds.Remove(this);
            }
    
            if (Currency != null)
            {
                if (!Currency.Funds.Contains(this))
                {
                    Currency.Funds.Add(this);
                }
                if (CurrencyCode != Currency.Id)
                {
                    CurrencyCode = Currency.Id;
                }
            }
        }
    
        private void FixupMasterFund(MasterFund previousValue)
        {
            if (previousValue != null && previousValue.Funds.Contains(this))
            {
                previousValue.Funds.Remove(this);
            }
    
            if (MasterFund != null)
            {
                if (!MasterFund.Funds.Contains(this))
                {
                    MasterFund.Funds.Add(this);
                }
                if (MasterFundId != MasterFund.Id)
                {
                    MasterFundId = MasterFund.Id;
                }
            }
        }
    
        private void FixupApps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (App item in e.NewItems)
                {
                    item.Fund = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (App item in e.OldItems)
                {
                    if (ReferenceEquals(item.Fund, this))
                    {
                        item.Fund = null;
                    }
                }
            }
        }
    
        private void FixupEmergencyCaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmergencyCap item in e.NewItems)
                {
                    if (!item.Funds.Contains(this))
                    {
                        item.Funds.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmergencyCap item in e.OldItems)
                {
                    if (item.Funds.Contains(this))
                    {
                        item.Funds.Remove(this);
                    }
                }
            }
        }
    
        private void FixupFundExchangeRates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FundExchangeRate item in e.NewItems)
                {
                    item.Fund = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FundExchangeRate item in e.OldItems)
                {
                    if (ReferenceEquals(item.Fund, this))
                    {
                        item.Fund = null;
                    }
                }
            }
        }
    
        private void FixupServiceConstraints(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ServiceConstraint item in e.NewItems)
                {
                    item.Fund = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ServiceConstraint item in e.OldItems)
                {
                    if (ReferenceEquals(item.Fund, this))
                    {
                        item.Fund = null;
                    }
                }
            }
        }
    
        private void FixupMhmCaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MhmCap item in e.NewItems)
                {
                    if (!item.Funds.Contains(this))
                    {
                        item.Funds.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MhmCap item in e.OldItems)
                {
                    if (item.Funds.Contains(this))
                    {
                        item.Funds.Remove(this);
                    }
                }
            }
        }
    
        private void FixupHCWeeklyCaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (HCWeeklyCap item in e.NewItems)
                {
                    if (!item.Funds.Contains(this))
                    {
                        item.Funds.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HCWeeklyCap item in e.OldItems)
                {
                    if (item.Funds.Contains(this))
                    {
                        item.Funds.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}
