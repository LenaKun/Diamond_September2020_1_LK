//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class Service
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual int TypeId
        {
            get { return _typeId; }
            set
            {
                if (_typeId != value)
                {
                    if (ServiceType != null && ServiceType.Id != value)
                    {
                        ServiceType = null;
                    }
                    _typeId = value;
                }
            }
        }
        private int _typeId;
    
        public virtual int ReportingMethodId
        {
            get;
            set;
        }
    
        public virtual bool Personnel
        {
            get;
            set;
        }
    
        public virtual bool EnforceTypeConstraints
        {
            get;
            set;
        }
    
        public virtual bool Active
        {
            get;
            set;
        }
    
        public virtual bool SingleClientPerYearAgency
        {
            get;
            set;
        }
    
        public virtual int ServiceLevel
        {
            get;
            set;
        }
    
        public virtual bool ExceptionalHomeCareHours
        {
            get;
            set;
        }
    
        public virtual bool CoPGovHoursValidation
        {
            get;
            set;
        }
    
        public virtual string FluxxFieldName
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<AppBudgetService> AppBudgetServices
        {
            get
            {
                if (_appBudgetServices == null)
                {
                    var newCollection = new FixupCollection<AppBudgetService>();
                    newCollection.CollectionChanged += FixupAppBudgetServices;
                    _appBudgetServices = newCollection;
                }
                return _appBudgetServices;
            }
            set
            {
                if (!ReferenceEquals(_appBudgetServices, value))
                {
                    var previousValue = _appBudgetServices as FixupCollection<AppBudgetService>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppBudgetServices;
                    }
                    _appBudgetServices = value;
                    var newValue = value as FixupCollection<AppBudgetService>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppBudgetServices;
                    }
                }
            }
        }
        private ICollection<AppBudgetService> _appBudgetServices;
    
        public virtual ICollection<App> Apps
        {
            get
            {
                if (_apps == null)
                {
                    var newCollection = new FixupCollection<App>();
                    newCollection.CollectionChanged += FixupApps;
                    _apps = newCollection;
                }
                return _apps;
            }
            set
            {
                if (!ReferenceEquals(_apps, value))
                {
                    var previousValue = _apps as FixupCollection<App>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApps;
                    }
                    _apps = value;
                    var newValue = value as FixupCollection<App>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApps;
                    }
                }
            }
        }
        private ICollection<App> _apps;
    
        public virtual ICollection<AppBudgetServiceAudit> AppBudgetServiceAudits
        {
            get
            {
                if (_appBudgetServiceAudits == null)
                {
                    var newCollection = new FixupCollection<AppBudgetServiceAudit>();
                    newCollection.CollectionChanged += FixupAppBudgetServiceAudits;
                    _appBudgetServiceAudits = newCollection;
                }
                return _appBudgetServiceAudits;
            }
            set
            {
                if (!ReferenceEquals(_appBudgetServiceAudits, value))
                {
                    var previousValue = _appBudgetServiceAudits as FixupCollection<AppBudgetServiceAudit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppBudgetServiceAudits;
                    }
                    _appBudgetServiceAudits = value;
                    var newValue = value as FixupCollection<AppBudgetServiceAudit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppBudgetServiceAudits;
                    }
                }
            }
        }
        private ICollection<AppBudgetServiceAudit> _appBudgetServiceAudits;
    
        public virtual ICollection<ServiceConstraint> ServiceConstraints
        {
            get
            {
                if (_serviceConstraints == null)
                {
                    var newCollection = new FixupCollection<ServiceConstraint>();
                    newCollection.CollectionChanged += FixupServiceConstraints;
                    _serviceConstraints = newCollection;
                }
                return _serviceConstraints;
            }
            set
            {
                if (!ReferenceEquals(_serviceConstraints, value))
                {
                    var previousValue = _serviceConstraints as FixupCollection<ServiceConstraint>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupServiceConstraints;
                    }
                    _serviceConstraints = value;
                    var newValue = value as FixupCollection<ServiceConstraint>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupServiceConstraints;
                    }
                }
            }
        }
        private ICollection<ServiceConstraint> _serviceConstraints;
    
    		
    	public virtual ServiceType ServiceType
        {
            get { return _serviceType; }
            set
            {
                if (!ReferenceEquals(_serviceType, value))
                {
                    var previousValue = _serviceType;
                    _serviceType = value;
                    FixupServiceType(previousValue);
                }
            }
        }
        private ServiceType _serviceType;

        #endregion

        #region Association Fixup
    
        private void FixupServiceType(ServiceType previousValue)
        {
            if (previousValue != null && previousValue.Services.Contains(this))
            {
                previousValue.Services.Remove(this);
            }
    
            if (ServiceType != null)
            {
                if (!ServiceType.Services.Contains(this))
                {
                    ServiceType.Services.Add(this);
                }
                if (TypeId != ServiceType.Id)
                {
                    TypeId = ServiceType.Id;
                }
            }
        }
    
        private void FixupAppBudgetServices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppBudgetService item in e.NewItems)
                {
                    item.Service = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppBudgetService item in e.OldItems)
                {
                    if (ReferenceEquals(item.Service, this))
                    {
                        item.Service = null;
                    }
                }
            }
        }
    
        private void FixupApps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (App item in e.NewItems)
                {
                    if (!item.Services.Contains(this))
                    {
                        item.Services.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (App item in e.OldItems)
                {
                    if (item.Services.Contains(this))
                    {
                        item.Services.Remove(this);
                    }
                }
            }
        }
    
        private void FixupAppBudgetServiceAudits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppBudgetServiceAudit item in e.NewItems)
                {
                    item.Service = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppBudgetServiceAudit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Service, this))
                    {
                        item.Service = null;
                    }
                }
            }
        }
    
        private void FixupServiceConstraints(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ServiceConstraint item in e.NewItems)
                {
                    item.Service = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ServiceConstraint item in e.OldItems)
                {
                    if (ReferenceEquals(item.Service, this))
                    {
                        item.Service = null;
                    }
                }
            }
        }

        #endregion

    }
}
