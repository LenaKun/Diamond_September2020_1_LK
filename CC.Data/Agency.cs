//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class Agency
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual int GroupId
        {
            get { return _groupId; }
            set
            {
                if (_groupId != value)
                {
                    if (AgencyGroup != null && AgencyGroup.Id != value)
                    {
                        AgencyGroup = null;
                    }
                    _groupId = value;
                }
            }
        }
        private int _groupId;

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<AppBudgetService> AppBudgetServices
        {
            get
            {
                if (_appBudgetServices == null)
                {
                    var newCollection = new FixupCollection<AppBudgetService>();
                    newCollection.CollectionChanged += FixupAppBudgetServices;
                    _appBudgetServices = newCollection;
                }
                return _appBudgetServices;
            }
            set
            {
                if (!ReferenceEquals(_appBudgetServices, value))
                {
                    var previousValue = _appBudgetServices as FixupCollection<AppBudgetService>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppBudgetServices;
                    }
                    _appBudgetServices = value;
                    var newValue = value as FixupCollection<AppBudgetService>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppBudgetServices;
                    }
                }
            }
        }
        private ICollection<AppBudgetService> _appBudgetServices;
    
    		
    	public virtual AgencyGroup AgencyGroup
        {
            get { return _agencyGroup; }
            set
            {
                if (!ReferenceEquals(_agencyGroup, value))
                {
                    var previousValue = _agencyGroup;
                    _agencyGroup = value;
                    FixupAgencyGroup(previousValue);
                }
            }
        }
        private AgencyGroup _agencyGroup;
    
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;
    
        public virtual ICollection<AppBudgetServiceAudit> AppBudgetServiceAudits
        {
            get
            {
                if (_appBudgetServiceAudits == null)
                {
                    var newCollection = new FixupCollection<AppBudgetServiceAudit>();
                    newCollection.CollectionChanged += FixupAppBudgetServiceAudits;
                    _appBudgetServiceAudits = newCollection;
                }
                return _appBudgetServiceAudits;
            }
            set
            {
                if (!ReferenceEquals(_appBudgetServiceAudits, value))
                {
                    var previousValue = _appBudgetServiceAudits as FixupCollection<AppBudgetServiceAudit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppBudgetServiceAudits;
                    }
                    _appBudgetServiceAudits = value;
                    var newValue = value as FixupCollection<AppBudgetServiceAudit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppBudgetServiceAudits;
                    }
                }
            }
        }
        private ICollection<AppBudgetServiceAudit> _appBudgetServiceAudits;
    
        public virtual ICollection<Client> Clients
        {
            get
            {
                if (_clients == null)
                {
                    var newCollection = new FixupCollection<Client>();
                    newCollection.CollectionChanged += FixupClients;
                    _clients = newCollection;
                }
                return _clients;
            }
            set
            {
                if (!ReferenceEquals(_clients, value))
                {
                    var previousValue = _clients as FixupCollection<Client>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClients;
                    }
                    _clients = value;
                    var newValue = value as FixupCollection<Client>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClients;
                    }
                }
            }
        }
        private ICollection<Client> _clients;
    
        public virtual ICollection<AgencyApp> AgencyApps
        {
            get
            {
                if (_agencyApps == null)
                {
                    var newCollection = new FixupCollection<AgencyApp>();
                    newCollection.CollectionChanged += FixupAgencyApps;
                    _agencyApps = newCollection;
                }
                return _agencyApps;
            }
            set
            {
                if (!ReferenceEquals(_agencyApps, value))
                {
                    var previousValue = _agencyApps as FixupCollection<AgencyApp>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgencyApps;
                    }
                    _agencyApps = value;
                    var newValue = value as FixupCollection<AgencyApp>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgencyApps;
                    }
                }
            }
        }
        private ICollection<AgencyApp> _agencyApps;

        #endregion

        #region Association Fixup
    
        private void FixupAgencyGroup(AgencyGroup previousValue)
        {
            if (previousValue != null && previousValue.Agencies.Contains(this))
            {
                previousValue.Agencies.Remove(this);
            }
    
            if (AgencyGroup != null)
            {
                if (!AgencyGroup.Agencies.Contains(this))
                {
                    AgencyGroup.Agencies.Add(this);
                }
                if (GroupId != AgencyGroup.Id)
                {
                    GroupId = AgencyGroup.Id;
                }
            }
        }
    
        private void FixupAppBudgetServices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppBudgetService item in e.NewItems)
                {
                    item.Agency = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppBudgetService item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agency, this))
                    {
                        item.Agency = null;
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.Agency = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agency, this))
                    {
                        item.Agency = null;
                    }
                }
            }
        }
    
        private void FixupAppBudgetServiceAudits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppBudgetServiceAudit item in e.NewItems)
                {
                    item.Agency = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppBudgetServiceAudit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agency, this))
                    {
                        item.Agency = null;
                    }
                }
            }
        }
    
        private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Client item in e.NewItems)
                {
                    item.Agency = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Client item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agency, this))
                    {
                        item.Agency = null;
                    }
                }
            }
        }
    
        private void FixupAgencyApps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AgencyApp item in e.NewItems)
                {
                    item.Agency = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AgencyApp item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agency, this))
                    {
                        item.Agency = null;
                    }
                }
            }
        }

        #endregion

    }
}
