//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class User
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual System.Guid UniqueId
        {
            get;
            set;
        }
    
        public virtual int RoleId
        {
            get { return _roleId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_roleId != value)
                    {
                        if (Role != null && Role.Id != value)
                        {
                            Role = null;
                        }
                        _roleId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _roleId;
    
        public virtual Nullable<int> AgencyId
        {
            get { return _agencyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_agencyId != value)
                    {
                        if (Agency != null && Agency.Id != value)
                        {
                            Agency = null;
                        }
                        _agencyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _agencyId;
    
        public virtual Nullable<int> AgencyGroupId
        {
            get { return _agencyGroupId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_agencyGroupId != value)
                    {
                        if (AgencyGroup != null && AgencyGroup.Id != value)
                        {
                            AgencyGroup = null;
                        }
                        _agencyGroupId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _agencyGroupId;
    
        public virtual Nullable<int> RegionId
        {
            get { return _regionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_regionId != value)
                    {
                        if (Region != null && Region.Id != value)
                        {
                            Region = null;
                        }
                        _regionId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _regionId;
    
        public virtual string UserName
        {
            get;
            set;
        }
    
        public virtual string Email
        {
            get;
            set;
        }
    
        public virtual string Comment
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual int DecimalDisplayDigits
        {
            get;
            set;
        }
    
        public virtual bool AddToBcc
        {
            get;
            set;
        }
    
        public virtual bool TemporaryPassword
        {
            get;
            set;
        }
    
        public virtual bool Disabled
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	
    	public virtual Agency Agency
        {
            get { return _agency; }
            set
            {
                if (!ReferenceEquals(_agency, value))
                {
                    var previousValue = _agency;
                    _agency = value;
                    FixupAgency(previousValue);
                }
            }
        }
        private Agency _agency;
    
    	
    	public virtual AgencyGroup AgencyGroup
        {
            get { return _agencyGroup; }
            set
            {
                if (!ReferenceEquals(_agencyGroup, value))
                {
                    var previousValue = _agencyGroup;
                    _agencyGroup = value;
                    FixupAgencyGroup(previousValue);
                }
            }
        }
        private AgencyGroup _agencyGroup;
    
        public virtual ICollection<AppBudget> AppBudgets
        {
            get
            {
                if (_appBudgets == null)
                {
                    var newCollection = new FixupCollection<AppBudget>();
                    newCollection.CollectionChanged += FixupAppBudgets;
                    _appBudgets = newCollection;
                }
                return _appBudgets;
            }
            set
            {
                if (!ReferenceEquals(_appBudgets, value))
                {
                    var previousValue = _appBudgets as FixupCollection<AppBudget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppBudgets;
                    }
                    _appBudgets = value;
                    var newValue = value as FixupCollection<AppBudget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppBudgets;
                    }
                }
            }
        }
        private ICollection<AppBudget> _appBudgets;
    
        public virtual ICollection<AppBudget> AppBudgets1
        {
            get
            {
                if (_appBudgets1 == null)
                {
                    var newCollection = new FixupCollection<AppBudget>();
                    newCollection.CollectionChanged += FixupAppBudgets1;
                    _appBudgets1 = newCollection;
                }
                return _appBudgets1;
            }
            set
            {
                if (!ReferenceEquals(_appBudgets1, value))
                {
                    var previousValue = _appBudgets1 as FixupCollection<AppBudget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppBudgets1;
                    }
                    _appBudgets1 = value;
                    var newValue = value as FixupCollection<AppBudget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppBudgets1;
                    }
                }
            }
        }
        private ICollection<AppBudget> _appBudgets1;
    
        public virtual ICollection<AppBudget> AppBudgets2
        {
            get
            {
                if (_appBudgets2 == null)
                {
                    var newCollection = new FixupCollection<AppBudget>();
                    newCollection.CollectionChanged += FixupAppBudgets2;
                    _appBudgets2 = newCollection;
                }
                return _appBudgets2;
            }
            set
            {
                if (!ReferenceEquals(_appBudgets2, value))
                {
                    var previousValue = _appBudgets2 as FixupCollection<AppBudget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppBudgets2;
                    }
                    _appBudgets2 = value;
                    var newValue = value as FixupCollection<AppBudget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppBudgets2;
                    }
                }
            }
        }
        private ICollection<AppBudget> _appBudgets2;
    
        public virtual ICollection<AppBudget> AppBudgets3
        {
            get
            {
                if (_appBudgets3 == null)
                {
                    var newCollection = new FixupCollection<AppBudget>();
                    newCollection.CollectionChanged += FixupAppBudgets3;
                    _appBudgets3 = newCollection;
                }
                return _appBudgets3;
            }
            set
            {
                if (!ReferenceEquals(_appBudgets3, value))
                {
                    var previousValue = _appBudgets3 as FixupCollection<AppBudget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppBudgets3;
                    }
                    _appBudgets3 = value;
                    var newValue = value as FixupCollection<AppBudget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppBudgets3;
                    }
                }
            }
        }
        private ICollection<AppBudget> _appBudgets3;
    
        public virtual ICollection<AppBudget> AppBudgets4
        {
            get
            {
                if (_appBudgets4 == null)
                {
                    var newCollection = new FixupCollection<AppBudget>();
                    newCollection.CollectionChanged += FixupAppBudgets4;
                    _appBudgets4 = newCollection;
                }
                return _appBudgets4;
            }
            set
            {
                if (!ReferenceEquals(_appBudgets4, value))
                {
                    var previousValue = _appBudgets4 as FixupCollection<AppBudget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppBudgets4;
                    }
                    _appBudgets4 = value;
                    var newValue = value as FixupCollection<AppBudget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppBudgets4;
                    }
                }
            }
        }
        private ICollection<AppBudget> _appBudgets4;
    
        public virtual ICollection<Comment> Comments
        {
            get
            {
                if (_comments == null)
                {
                    var newCollection = new FixupCollection<Comment>();
                    newCollection.CollectionChanged += FixupComments;
                    _comments = newCollection;
                }
                return _comments;
            }
            set
            {
                if (!ReferenceEquals(_comments, value))
                {
                    var previousValue = _comments as FixupCollection<Comment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupComments;
                    }
                    _comments = value;
                    var newValue = value as FixupCollection<Comment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupComments;
                    }
                }
            }
        }
        private ICollection<Comment> _comments;
    
        public virtual ICollection<FunctionalityScore> FunctionalityScores
        {
            get
            {
                if (_functionalityScores == null)
                {
                    var newCollection = new FixupCollection<FunctionalityScore>();
                    newCollection.CollectionChanged += FixupFunctionalityScores;
                    _functionalityScores = newCollection;
                }
                return _functionalityScores;
            }
            set
            {
                if (!ReferenceEquals(_functionalityScores, value))
                {
                    var previousValue = _functionalityScores as FixupCollection<FunctionalityScore>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFunctionalityScores;
                    }
                    _functionalityScores = value;
                    var newValue = value as FixupCollection<FunctionalityScore>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFunctionalityScores;
                    }
                }
            }
        }
        private ICollection<FunctionalityScore> _functionalityScores;
    
        public virtual ICollection<History> Histories
        {
            get
            {
                if (_histories == null)
                {
                    var newCollection = new FixupCollection<History>();
                    newCollection.CollectionChanged += FixupHistories;
                    _histories = newCollection;
                }
                return _histories;
            }
            set
            {
                if (!ReferenceEquals(_histories, value))
                {
                    var previousValue = _histories as FixupCollection<History>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHistories;
                    }
                    _histories = value;
                    var newValue = value as FixupCollection<History>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHistories;
                    }
                }
            }
        }
        private ICollection<History> _histories;
    
        public virtual ICollection<HomeCareEntitledPeriod> HomeCareEntitledPeriods
        {
            get
            {
                if (_homeCareEntitledPeriods == null)
                {
                    var newCollection = new FixupCollection<HomeCareEntitledPeriod>();
                    newCollection.CollectionChanged += FixupHomeCareEntitledPeriods;
                    _homeCareEntitledPeriods = newCollection;
                }
                return _homeCareEntitledPeriods;
            }
            set
            {
                if (!ReferenceEquals(_homeCareEntitledPeriods, value))
                {
                    var previousValue = _homeCareEntitledPeriods as FixupCollection<HomeCareEntitledPeriod>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHomeCareEntitledPeriods;
                    }
                    _homeCareEntitledPeriods = value;
                    var newValue = value as FixupCollection<HomeCareEntitledPeriod>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHomeCareEntitledPeriods;
                    }
                }
            }
        }
        private ICollection<HomeCareEntitledPeriod> _homeCareEntitledPeriods;
    
        public virtual ICollection<MainReport> MainReports
        {
            get
            {
                if (_mainReports == null)
                {
                    var newCollection = new FixupCollection<MainReport>();
                    newCollection.CollectionChanged += FixupMainReports;
                    _mainReports = newCollection;
                }
                return _mainReports;
            }
            set
            {
                if (!ReferenceEquals(_mainReports, value))
                {
                    var previousValue = _mainReports as FixupCollection<MainReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMainReports;
                    }
                    _mainReports = value;
                    var newValue = value as FixupCollection<MainReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMainReports;
                    }
                }
            }
        }
        private ICollection<MainReport> _mainReports;
    
        public virtual ICollection<MainReport> MainReports1
        {
            get
            {
                if (_mainReports1 == null)
                {
                    var newCollection = new FixupCollection<MainReport>();
                    newCollection.CollectionChanged += FixupMainReports1;
                    _mainReports1 = newCollection;
                }
                return _mainReports1;
            }
            set
            {
                if (!ReferenceEquals(_mainReports1, value))
                {
                    var previousValue = _mainReports1 as FixupCollection<MainReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMainReports1;
                    }
                    _mainReports1 = value;
                    var newValue = value as FixupCollection<MainReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMainReports1;
                    }
                }
            }
        }
        private ICollection<MainReport> _mainReports1;
    
        public virtual ICollection<MainReport> MainReports2
        {
            get
            {
                if (_mainReports2 == null)
                {
                    var newCollection = new FixupCollection<MainReport>();
                    newCollection.CollectionChanged += FixupMainReports2;
                    _mainReports2 = newCollection;
                }
                return _mainReports2;
            }
            set
            {
                if (!ReferenceEquals(_mainReports2, value))
                {
                    var previousValue = _mainReports2 as FixupCollection<MainReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMainReports2;
                    }
                    _mainReports2 = value;
                    var newValue = value as FixupCollection<MainReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMainReports2;
                    }
                }
            }
        }
        private ICollection<MainReport> _mainReports2;
    
        public virtual ICollection<MainReportStatusAudit> MainReportStatusAudits
        {
            get
            {
                if (_mainReportStatusAudits == null)
                {
                    var newCollection = new FixupCollection<MainReportStatusAudit>();
                    newCollection.CollectionChanged += FixupMainReportStatusAudits;
                    _mainReportStatusAudits = newCollection;
                }
                return _mainReportStatusAudits;
            }
            set
            {
                if (!ReferenceEquals(_mainReportStatusAudits, value))
                {
                    var previousValue = _mainReportStatusAudits as FixupCollection<MainReportStatusAudit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMainReportStatusAudits;
                    }
                    _mainReportStatusAudits = value;
                    var newValue = value as FixupCollection<MainReportStatusAudit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMainReportStatusAudits;
                    }
                }
            }
        }
        private ICollection<MainReportStatusAudit> _mainReportStatusAudits;
    
    	
    	public virtual MembershipUser MembershipUser
        {
            get { return _membershipUser; }
            set
            {
                if (!ReferenceEquals(_membershipUser, value))
                {
                    var previousValue = _membershipUser;
                    _membershipUser = value;
                    FixupMembershipUser(previousValue);
                }
            }
        }
        private MembershipUser _membershipUser;
    
    	
    	public virtual Region Region
        {
            get { return _region; }
            set
            {
                if (!ReferenceEquals(_region, value))
                {
                    var previousValue = _region;
                    _region = value;
                    FixupRegion(previousValue);
                }
            }
        }
        private Region _region;
    
    	
    	public virtual Role Role
        {
            get { return _role; }
            set
            {
                if (!ReferenceEquals(_role, value))
                {
                    var previousValue = _role;
                    _role = value;
                    FixupRole(previousValue);
                }
            }
        }
        private Role _role;
    
        public virtual ICollection<EmergencyCap> EmergencyCaps
        {
            get
            {
                if (_emergencyCaps == null)
                {
                    var newCollection = new FixupCollection<EmergencyCap>();
                    newCollection.CollectionChanged += FixupEmergencyCaps;
                    _emergencyCaps = newCollection;
                }
                return _emergencyCaps;
            }
            set
            {
                if (!ReferenceEquals(_emergencyCaps, value))
                {
                    var previousValue = _emergencyCaps as FixupCollection<EmergencyCap>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmergencyCaps;
                    }
                    _emergencyCaps = value;
                    var newValue = value as FixupCollection<EmergencyCap>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmergencyCaps;
                    }
                }
            }
        }
        private ICollection<EmergencyCap> _emergencyCaps;
    
        public virtual ICollection<DeletedClient> DeletedClients
        {
            get
            {
                if (_deletedClients == null)
                {
                    var newCollection = new FixupCollection<DeletedClient>();
                    newCollection.CollectionChanged += FixupDeletedClients;
                    _deletedClients = newCollection;
                }
                return _deletedClients;
            }
            set
            {
                if (!ReferenceEquals(_deletedClients, value))
                {
                    var previousValue = _deletedClients as FixupCollection<DeletedClient>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDeletedClients;
                    }
                    _deletedClients = value;
                    var newValue = value as FixupCollection<DeletedClient>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDeletedClients;
                    }
                }
            }
        }
        private ICollection<DeletedClient> _deletedClients;
    
        public virtual ICollection<Client> Clients
        {
            get
            {
                if (_clients == null)
                {
                    var newCollection = new FixupCollection<Client>();
                    newCollection.CollectionChanged += FixupClients;
                    _clients = newCollection;
                }
                return _clients;
            }
            set
            {
                if (!ReferenceEquals(_clients, value))
                {
                    var previousValue = _clients as FixupCollection<Client>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClients;
                    }
                    _clients = value;
                    var newValue = value as FixupCollection<Client>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClients;
                    }
                }
            }
        }
        private ICollection<Client> _clients;
    
        public virtual ICollection<UserAgreementAudit> UserAgreementAudits
        {
            get
            {
                if (_userAgreementAudits == null)
                {
                    var newCollection = new FixupCollection<UserAgreementAudit>();
                    newCollection.CollectionChanged += FixupUserAgreementAudits;
                    _userAgreementAudits = newCollection;
                }
                return _userAgreementAudits;
            }
            set
            {
                if (!ReferenceEquals(_userAgreementAudits, value))
                {
                    var previousValue = _userAgreementAudits as FixupCollection<UserAgreementAudit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserAgreementAudits;
                    }
                    _userAgreementAudits = value;
                    var newValue = value as FixupCollection<UserAgreementAudit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserAgreementAudits;
                    }
                }
            }
        }
        private ICollection<UserAgreementAudit> _userAgreementAudits;
    
        public virtual ICollection<Import> Imports
        {
            get
            {
                if (_imports == null)
                {
                    var newCollection = new FixupCollection<Import>();
                    newCollection.CollectionChanged += FixupImports;
                    _imports = newCollection;
                }
                return _imports;
            }
            set
            {
                if (!ReferenceEquals(_imports, value))
                {
                    var previousValue = _imports as FixupCollection<Import>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupImports;
                    }
                    _imports = value;
                    var newValue = value as FixupCollection<Import>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupImports;
                    }
                }
            }
        }
        private ICollection<Import> _imports;
    
        public virtual ICollection<AgencyGroup> AgencyGroups
        {
            get
            {
                if (_agencyGroups == null)
                {
                    var newCollection = new FixupCollection<AgencyGroup>();
                    newCollection.CollectionChanged += FixupAgencyGroups;
                    _agencyGroups = newCollection;
                }
                return _agencyGroups;
            }
            set
            {
                if (!ReferenceEquals(_agencyGroups, value))
                {
                    var previousValue = _agencyGroups as FixupCollection<AgencyGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgencyGroups;
                    }
                    _agencyGroups = value;
                    var newValue = value as FixupCollection<AgencyGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgencyGroups;
                    }
                }
            }
        }
        private ICollection<AgencyGroup> _agencyGroups;
    
        public virtual ICollection<ClientContact> ClientContacts
        {
            get
            {
                if (_clientContacts == null)
                {
                    var newCollection = new FixupCollection<ClientContact>();
                    newCollection.CollectionChanged += FixupClientContacts;
                    _clientContacts = newCollection;
                }
                return _clientContacts;
            }
            set
            {
                if (!ReferenceEquals(_clientContacts, value))
                {
                    var previousValue = _clientContacts as FixupCollection<ClientContact>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClientContacts;
                    }
                    _clientContacts = value;
                    var newValue = value as FixupCollection<ClientContact>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClientContacts;
                    }
                }
            }
        }
        private ICollection<ClientContact> _clientContacts;
    
        public virtual ICollection<Daf> Dafs
        {
            get
            {
                if (_dafs == null)
                {
                    var newCollection = new FixupCollection<Daf>();
                    newCollection.CollectionChanged += FixupDafs;
                    _dafs = newCollection;
                }
                return _dafs;
            }
            set
            {
                if (!ReferenceEquals(_dafs, value))
                {
                    var previousValue = _dafs as FixupCollection<Daf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDafs;
                    }
                    _dafs = value;
                    var newValue = value as FixupCollection<Daf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDafs;
                    }
                }
            }
        }
        private ICollection<Daf> _dafs;
    
        public virtual ICollection<Daf> Dafs1
        {
            get
            {
                if (_dafs1 == null)
                {
                    var newCollection = new FixupCollection<Daf>();
                    newCollection.CollectionChanged += FixupDafs1;
                    _dafs1 = newCollection;
                }
                return _dafs1;
            }
            set
            {
                if (!ReferenceEquals(_dafs1, value))
                {
                    var previousValue = _dafs1 as FixupCollection<Daf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDafs1;
                    }
                    _dafs1 = value;
                    var newValue = value as FixupCollection<Daf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDafs1;
                    }
                }
            }
        }
        private ICollection<Daf> _dafs1;
    
        public virtual ICollection<Daf> Dafs2
        {
            get
            {
                if (_dafs2 == null)
                {
                    var newCollection = new FixupCollection<Daf>();
                    newCollection.CollectionChanged += FixupDafs2;
                    _dafs2 = newCollection;
                }
                return _dafs2;
            }
            set
            {
                if (!ReferenceEquals(_dafs2, value))
                {
                    var previousValue = _dafs2 as FixupCollection<Daf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDafs2;
                    }
                    _dafs2 = value;
                    var newValue = value as FixupCollection<Daf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDafs2;
                    }
                }
            }
        }
        private ICollection<Daf> _dafs2;
    
        public virtual ICollection<Daf> Dafs3
        {
            get
            {
                if (_dafs3 == null)
                {
                    var newCollection = new FixupCollection<Daf>();
                    newCollection.CollectionChanged += FixupDafs3;
                    _dafs3 = newCollection;
                }
                return _dafs3;
            }
            set
            {
                if (!ReferenceEquals(_dafs3, value))
                {
                    var previousValue = _dafs3 as FixupCollection<Daf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDafs3;
                    }
                    _dafs3 = value;
                    var newValue = value as FixupCollection<Daf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDafs3;
                    }
                }
            }
        }
        private ICollection<Daf> _dafs3;
    
        public virtual ICollection<Daf> Dafs4
        {
            get
            {
                if (_dafs4 == null)
                {
                    var newCollection = new FixupCollection<Daf>();
                    newCollection.CollectionChanged += FixupDafs4;
                    _dafs4 = newCollection;
                }
                return _dafs4;
            }
            set
            {
                if (!ReferenceEquals(_dafs4, value))
                {
                    var previousValue = _dafs4 as FixupCollection<Daf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDafs4;
                    }
                    _dafs4 = value;
                    var newValue = value as FixupCollection<Daf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDafs4;
                    }
                }
            }
        }
        private ICollection<Daf> _dafs4;
    
        public virtual ICollection<Daf> Dafs11
        {
            get
            {
                if (_dafs11 == null)
                {
                    var newCollection = new FixupCollection<Daf>();
                    newCollection.CollectionChanged += FixupDafs11;
                    _dafs11 = newCollection;
                }
                return _dafs11;
            }
            set
            {
                if (!ReferenceEquals(_dafs11, value))
                {
                    var previousValue = _dafs11 as FixupCollection<Daf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDafs11;
                    }
                    _dafs11 = value;
                    var newValue = value as FixupCollection<Daf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDafs11;
                    }
                }
            }
        }
        private ICollection<Daf> _dafs11;
    
        public virtual ICollection<GrandfatherHour> GrandfatherHours
        {
            get
            {
                if (_grandfatherHours == null)
                {
                    var newCollection = new FixupCollection<GrandfatherHour>();
                    newCollection.CollectionChanged += FixupGrandfatherHours;
                    _grandfatherHours = newCollection;
                }
                return _grandfatherHours;
            }
            set
            {
                if (!ReferenceEquals(_grandfatherHours, value))
                {
                    var previousValue = _grandfatherHours as FixupCollection<GrandfatherHour>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGrandfatherHours;
                    }
                    _grandfatherHours = value;
                    var newValue = value as FixupCollection<GrandfatherHour>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGrandfatherHours;
                    }
                }
            }
        }
        private ICollection<GrandfatherHour> _grandfatherHours;
    
        public virtual ICollection<MhmCap> MhmCaps
        {
            get
            {
                if (_mhmCaps == null)
                {
                    var newCollection = new FixupCollection<MhmCap>();
                    newCollection.CollectionChanged += FixupMhmCaps;
                    _mhmCaps = newCollection;
                }
                return _mhmCaps;
            }
            set
            {
                if (!ReferenceEquals(_mhmCaps, value))
                {
                    var previousValue = _mhmCaps as FixupCollection<MhmCap>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMhmCaps;
                    }
                    _mhmCaps = value;
                    var newValue = value as FixupCollection<MhmCap>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMhmCaps;
                    }
                }
            }
        }
        private ICollection<MhmCap> _mhmCaps;
    
        public virtual ICollection<HCWeeklyCap> HCWeeklyCaps
        {
            get
            {
                if (_hCWeeklyCaps == null)
                {
                    var newCollection = new FixupCollection<HCWeeklyCap>();
                    newCollection.CollectionChanged += FixupHCWeeklyCaps;
                    _hCWeeklyCaps = newCollection;
                }
                return _hCWeeklyCaps;
            }
            set
            {
                if (!ReferenceEquals(_hCWeeklyCaps, value))
                {
                    var previousValue = _hCWeeklyCaps as FixupCollection<HCWeeklyCap>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHCWeeklyCaps;
                    }
                    _hCWeeklyCaps = value;
                    var newValue = value as FixupCollection<HCWeeklyCap>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHCWeeklyCaps;
                    }
                }
            }
        }
        private ICollection<HCWeeklyCap> _hCWeeklyCaps;
    
        public virtual ICollection<CfsRow> CfsRows
        {
            get
            {
                if (_cfsRows == null)
                {
                    var newCollection = new FixupCollection<CfsRow>();
                    newCollection.CollectionChanged += FixupCfsRows;
                    _cfsRows = newCollection;
                }
                return _cfsRows;
            }
            set
            {
                if (!ReferenceEquals(_cfsRows, value))
                {
                    var previousValue = _cfsRows as FixupCollection<CfsRow>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCfsRows;
                    }
                    _cfsRows = value;
                    var newValue = value as FixupCollection<CfsRow>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCfsRows;
                    }
                }
            }
        }
        private ICollection<CfsRow> _cfsRows;
    
        public virtual ICollection<CfsRow> CfsRows1
        {
            get
            {
                if (_cfsRows1 == null)
                {
                    var newCollection = new FixupCollection<CfsRow>();
                    newCollection.CollectionChanged += FixupCfsRows1;
                    _cfsRows1 = newCollection;
                }
                return _cfsRows1;
            }
            set
            {
                if (!ReferenceEquals(_cfsRows1, value))
                {
                    var previousValue = _cfsRows1 as FixupCollection<CfsRow>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCfsRows1;
                    }
                    _cfsRows1 = value;
                    var newValue = value as FixupCollection<CfsRow>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCfsRows1;
                    }
                }
            }
        }
        private ICollection<CfsRow> _cfsRows1;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAgency(Agency previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Agency != null)
            {
                if (!Agency.Users.Contains(this))
                {
                    Agency.Users.Add(this);
                }
                if (AgencyId != Agency.Id)
                {
                    AgencyId = Agency.Id;
                }
            }
            else if (!_settingFK)
            {
                AgencyId = null;
            }
        }
    
        private void FixupAgencyGroup(AgencyGroup previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (AgencyGroup != null)
            {
                if (!AgencyGroup.Users.Contains(this))
                {
                    AgencyGroup.Users.Add(this);
                }
                if (AgencyGroupId != AgencyGroup.Id)
                {
                    AgencyGroupId = AgencyGroup.Id;
                }
            }
            else if (!_settingFK)
            {
                AgencyGroupId = null;
            }
        }
    
        private void FixupMembershipUser(MembershipUser previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.User, this))
            {
                previousValue.User = null;
            }
    
            if (MembershipUser != null)
            {
                MembershipUser.User = this;
            }
        }
    
        private void FixupRegion(Region previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Region != null)
            {
                if (!Region.Users.Contains(this))
                {
                    Region.Users.Add(this);
                }
                if (RegionId != Region.Id)
                {
                    RegionId = Region.Id;
                }
            }
            else if (!_settingFK)
            {
                RegionId = null;
            }
        }
    
        private void FixupRole(Role previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Role != null)
            {
                if (!Role.Users.Contains(this))
                {
                    Role.Users.Add(this);
                }
                if (RoleId != Role.Id)
                {
                    RoleId = Role.Id;
                }
            }
        }
    
        private void FixupAppBudgets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppBudget item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppBudget item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupAppBudgets1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppBudget item in e.NewItems)
                {
                    item.User1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppBudget item in e.OldItems)
                {
                    if (ReferenceEquals(item.User1, this))
                    {
                        item.User1 = null;
                    }
                }
            }
        }
    
        private void FixupAppBudgets2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppBudget item in e.NewItems)
                {
                    item.User2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppBudget item in e.OldItems)
                {
                    if (ReferenceEquals(item.User2, this))
                    {
                        item.User2 = null;
                    }
                }
            }
        }
    
        private void FixupAppBudgets3(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppBudget item in e.NewItems)
                {
                    item.User3 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppBudget item in e.OldItems)
                {
                    if (ReferenceEquals(item.User3, this))
                    {
                        item.User3 = null;
                    }
                }
            }
        }
    
        private void FixupAppBudgets4(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppBudget item in e.NewItems)
                {
                    item.User4 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppBudget item in e.OldItems)
                {
                    if (ReferenceEquals(item.User4, this))
                    {
                        item.User4 = null;
                    }
                }
            }
        }
    
        private void FixupComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupFunctionalityScores(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FunctionalityScore item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FunctionalityScore item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupHistories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (History item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (History item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupHomeCareEntitledPeriods(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (HomeCareEntitledPeriod item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HomeCareEntitledPeriod item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupMainReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MainReport item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MainReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupMainReports1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MainReport item in e.NewItems)
                {
                    item.User1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MainReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.User1, this))
                    {
                        item.User1 = null;
                    }
                }
            }
        }
    
        private void FixupMainReports2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MainReport item in e.NewItems)
                {
                    item.User2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MainReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.User2, this))
                    {
                        item.User2 = null;
                    }
                }
            }
        }
    
        private void FixupMainReportStatusAudits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MainReportStatusAudit item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MainReportStatusAudit item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupEmergencyCaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmergencyCap item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmergencyCap item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupDeletedClients(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DeletedClient item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeletedClient item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Client item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Client item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserAgreementAudits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserAgreementAudit item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserAgreementAudit item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupImports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Import item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Import item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupAgencyGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AgencyGroup item in e.NewItems)
                {
                    if (!item.PoUsers.Contains(this))
                    {
                        item.PoUsers.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AgencyGroup item in e.OldItems)
                {
                    if (item.PoUsers.Contains(this))
                    {
                        item.PoUsers.Remove(this);
                    }
                }
            }
        }
    
        private void FixupClientContacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ClientContact item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ClientContact item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupDafs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Daf item in e.NewItems)
                {
                    item.Creator = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Daf item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                }
            }
        }
    
        private void FixupDafs1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Daf item in e.NewItems)
                {
                    item.Evaluator = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Daf item in e.OldItems)
                {
                    if (ReferenceEquals(item.Evaluator, this))
                    {
                        item.Evaluator = null;
                    }
                }
            }
        }
    
        private void FixupDafs2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Daf item in e.NewItems)
                {
                    item.Reviewer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Daf item in e.OldItems)
                {
                    if (ReferenceEquals(item.Reviewer, this))
                    {
                        item.Reviewer = null;
                    }
                }
            }
        }
    
        private void FixupDafs3(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Daf item in e.NewItems)
                {
                    item.Signer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Daf item in e.OldItems)
                {
                    if (ReferenceEquals(item.Signer, this))
                    {
                        item.Signer = null;
                    }
                }
            }
        }
    
        private void FixupDafs4(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Daf item in e.NewItems)
                {
                    item.Updater = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Daf item in e.OldItems)
                {
                    if (ReferenceEquals(item.Updater, this))
                    {
                        item.Updater = null;
                    }
                }
            }
        }
    
        private void FixupDafs11(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Daf item in e.NewItems)
                {
                    item.Downloader = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Daf item in e.OldItems)
                {
                    if (ReferenceEquals(item.Downloader, this))
                    {
                        item.Downloader = null;
                    }
                }
            }
        }
    
        private void FixupGrandfatherHours(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GrandfatherHour item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GrandfatherHour item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupMhmCaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MhmCap item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MhmCap item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupHCWeeklyCaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (HCWeeklyCap item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HCWeeklyCap item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupCfsRows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CfsRow item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CfsRow item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupCfsRows1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CfsRow item in e.NewItems)
                {
                    item.User1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CfsRow item in e.OldItems)
                {
                    if (ReferenceEquals(item.User1, this))
                    {
                        item.User1 = null;
                    }
                }
            }
        }

        #endregion

    }
}
