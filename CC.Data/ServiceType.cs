//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class ServiceType
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual bool DoNotReportInUnmetNeedsOther
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ServiceTypeImportId
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<ServiceConstraint> ServiceConstraints
        {
            get
            {
                if (_serviceConstraints == null)
                {
                    var newCollection = new FixupCollection<ServiceConstraint>();
                    newCollection.CollectionChanged += FixupServiceConstraints;
                    _serviceConstraints = newCollection;
                }
                return _serviceConstraints;
            }
            set
            {
                if (!ReferenceEquals(_serviceConstraints, value))
                {
                    var previousValue = _serviceConstraints as FixupCollection<ServiceConstraint>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupServiceConstraints;
                    }
                    _serviceConstraints = value;
                    var newValue = value as FixupCollection<ServiceConstraint>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupServiceConstraints;
                    }
                }
            }
        }
        private ICollection<ServiceConstraint> _serviceConstraints;
    
        public virtual ICollection<Service> Services
        {
            get
            {
                if (_services == null)
                {
                    var newCollection = new FixupCollection<Service>();
                    newCollection.CollectionChanged += FixupServices;
                    _services = newCollection;
                }
                return _services;
            }
            set
            {
                if (!ReferenceEquals(_services, value))
                {
                    var previousValue = _services as FixupCollection<Service>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupServices;
                    }
                    _services = value;
                    var newValue = value as FixupCollection<Service>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupServices;
                    }
                }
            }
        }
        private ICollection<Service> _services;
    
        public virtual ICollection<UnmetNeedsOther> UnmetNeedsOthers
        {
            get
            {
                if (_unmetNeedsOthers == null)
                {
                    var newCollection = new FixupCollection<UnmetNeedsOther>();
                    newCollection.CollectionChanged += FixupUnmetNeedsOthers;
                    _unmetNeedsOthers = newCollection;
                }
                return _unmetNeedsOthers;
            }
            set
            {
                if (!ReferenceEquals(_unmetNeedsOthers, value))
                {
                    var previousValue = _unmetNeedsOthers as FixupCollection<UnmetNeedsOther>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUnmetNeedsOthers;
                    }
                    _unmetNeedsOthers = value;
                    var newValue = value as FixupCollection<UnmetNeedsOther>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUnmetNeedsOthers;
                    }
                }
            }
        }
        private ICollection<UnmetNeedsOther> _unmetNeedsOthers;

        #endregion

        #region Association Fixup
    
        private void FixupServiceConstraints(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ServiceConstraint item in e.NewItems)
                {
                    item.ServiceType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ServiceConstraint item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceType, this))
                    {
                        item.ServiceType = null;
                    }
                }
            }
        }
    
        private void FixupServices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Service item in e.NewItems)
                {
                    item.ServiceType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Service item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceType, this))
                    {
                        item.ServiceType = null;
                    }
                }
            }
        }
    
        private void FixupUnmetNeedsOthers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UnmetNeedsOther item in e.NewItems)
                {
                    item.ServiceType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UnmetNeedsOther item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceType, this))
                    {
                        item.ServiceType = null;
                    }
                }
            }
        }

        #endregion

    }
}
