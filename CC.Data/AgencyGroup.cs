//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class AgencyGroup
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Addr1
        {
            get;
            set;
        }
    
        public virtual string Addr2
        {
            get;
            set;
        }
    
        public virtual string City
        {
            get;
            set;
        }
    
        public virtual Nullable<int> StateId
        {
            get { return _stateId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_stateId != value)
                    {
                        if (State != null && State.Id != value)
                        {
                            State = null;
                        }
                        _stateId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _stateId;
    
        public virtual int CountryId
        {
            get { return _countryId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_countryId != value)
                    {
                        if (Country != null && Country.Id != value)
                        {
                            Country = null;
                        }
                        _countryId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _countryId;
    
        public virtual int ReportingPeriodId
        {
            get;
            set;
        }
    
        public virtual bool CanSubmitRevisionReports
        {
            get;
            set;
        }
    
        public virtual bool RequiredMatch
        {
            get;
            set;
        }
    
        public virtual bool ForceIsraelID
        {
            get;
            set;
        }
    
        public virtual string DisplayName
        {
            get;
            set;
        }
    
        public virtual bool ExcludeFromReports
        {
            get;
            set;
        }
    
        public virtual string Support
        {
            get;
            set;
        }
    
        public virtual bool SupportiveCommunities
        {
            get { return _supportiveCommunities; }
            set { _supportiveCommunities = value; }
        }
        private bool _supportiveCommunities = false;
    
        public virtual bool SC_FullSubsidy
        {
            get { return _sC_FullSubsidy; }
            set { _sC_FullSubsidy = value; }
        }
        private bool _sC_FullSubsidy = false;
    
        public virtual bool DayCenter
        {
            get { return _dayCenter; }
            set { _dayCenter = value; }
        }
        private bool _dayCenter = false;
    
        public virtual Nullable<int> ScSubsidyLevelId
        {
            get { return _scSubsidyLevelId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_scSubsidyLevelId != value)
                    {
                        if (ScSubsidyLevel != null && ScSubsidyLevel.Id != value)
                        {
                            ScSubsidyLevel = null;
                        }
                        _scSubsidyLevelId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _scSubsidyLevelId;
    
        public virtual string Culture
        {
            get { return _culture; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_culture != value)
                    {
                        if (Language != null && Language.Id != value)
                        {
                            Language = null;
                        }
                        _culture = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _culture;
    
        public virtual string DefaultCurrency
        {
            get { return _defaultCurrency; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_defaultCurrency != value)
                    {
                        if (Currency != null && Currency.Id != value)
                        {
                            Currency = null;
                        }
                        _defaultCurrency = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _defaultCurrency;
    
        public virtual bool IsAudit
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CfsDate
        {
            get;
            set;
        }
    
        public virtual Nullable<int> FluxxOrganizationId
        {
            get;
            set;
        }
    
        public virtual string FluxxOrganizationName
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Agency> Agencies
        {
            get
            {
                if (_agencies == null)
                {
                    var newCollection = new FixupCollection<Agency>();
                    newCollection.CollectionChanged += FixupAgencies;
                    _agencies = newCollection;
                }
                return _agencies;
            }
            set
            {
                if (!ReferenceEquals(_agencies, value))
                {
                    var previousValue = _agencies as FixupCollection<Agency>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgencies;
                    }
                    _agencies = value;
                    var newValue = value as FixupCollection<Agency>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgencies;
                    }
                }
            }
        }
        private ICollection<Agency> _agencies;
    
    	
    	public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;
    
    	
    	public virtual State State
        {
            get { return _state; }
            set
            {
                if (!ReferenceEquals(_state, value))
                {
                    var previousValue = _state;
                    _state = value;
                    FixupState(previousValue);
                }
            }
        }
        private State _state;
    
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;
    
        public virtual ICollection<App> Apps
        {
            get
            {
                if (_apps == null)
                {
                    var newCollection = new FixupCollection<App>();
                    newCollection.CollectionChanged += FixupApps;
                    _apps = newCollection;
                }
                return _apps;
            }
            set
            {
                if (!ReferenceEquals(_apps, value))
                {
                    var previousValue = _apps as FixupCollection<App>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApps;
                    }
                    _apps = value;
                    var newValue = value as FixupCollection<App>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApps;
                    }
                }
            }
        }
        private ICollection<App> _apps;
    
        public virtual ICollection<User> PoUsers
        {
            get
            {
                if (_poUsers == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupPoUsers;
                    _poUsers = newCollection;
                }
                return _poUsers;
            }
            set
            {
                if (!ReferenceEquals(_poUsers, value))
                {
                    var previousValue = _poUsers as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPoUsers;
                    }
                    _poUsers = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPoUsers;
                    }
                }
            }
        }
        private ICollection<User> _poUsers;
    
    	
    	public virtual ScSubsidyLevel ScSubsidyLevel
        {
            get { return _scSubsidyLevel; }
            set
            {
                if (!ReferenceEquals(_scSubsidyLevel, value))
                {
                    var previousValue = _scSubsidyLevel;
                    _scSubsidyLevel = value;
                    FixupScSubsidyLevel(previousValue);
                }
            }
        }
        private ScSubsidyLevel _scSubsidyLevel;
    
    		
    	public virtual Language Language
        {
            get { return _language; }
            set
            {
                if (!ReferenceEquals(_language, value))
                {
                    var previousValue = _language;
                    _language = value;
                    FixupLanguage(previousValue);
                }
            }
        }
        private Language _language;
    
    		
    	public virtual Currency Currency
        {
            get { return _currency; }
            set
            {
                if (!ReferenceEquals(_currency, value))
                {
                    var previousValue = _currency;
                    _currency = value;
                    FixupCurrency(previousValue);
                }
            }
        }
        private Currency _currency;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.AgencyGroups.Contains(this))
            {
                previousValue.AgencyGroups.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.AgencyGroups.Contains(this))
                {
                    Country.AgencyGroups.Add(this);
                }
                if (CountryId != Country.Id)
                {
                    CountryId = Country.Id;
                }
            }
        }
    
        private void FixupState(State previousValue)
        {
            if (previousValue != null && previousValue.AgencyGroups.Contains(this))
            {
                previousValue.AgencyGroups.Remove(this);
            }
    
            if (State != null)
            {
                if (!State.AgencyGroups.Contains(this))
                {
                    State.AgencyGroups.Add(this);
                }
                if (StateId != State.Id)
                {
                    StateId = State.Id;
                }
            }
            else if (!_settingFK)
            {
                StateId = null;
            }
        }
    
        private void FixupScSubsidyLevel(ScSubsidyLevel previousValue)
        {
            if (previousValue != null && previousValue.AgencyGroups.Contains(this))
            {
                previousValue.AgencyGroups.Remove(this);
            }
    
            if (ScSubsidyLevel != null)
            {
                if (!ScSubsidyLevel.AgencyGroups.Contains(this))
                {
                    ScSubsidyLevel.AgencyGroups.Add(this);
                }
                if (ScSubsidyLevelId != ScSubsidyLevel.Id)
                {
                    ScSubsidyLevelId = ScSubsidyLevel.Id;
                }
            }
            else if (!_settingFK)
            {
                ScSubsidyLevelId = null;
            }
        }
    
        private void FixupLanguage(Language previousValue)
        {
            if (previousValue != null && previousValue.AgencyGroups.Contains(this))
            {
                previousValue.AgencyGroups.Remove(this);
            }
    
            if (Language != null)
            {
                if (!Language.AgencyGroups.Contains(this))
                {
                    Language.AgencyGroups.Add(this);
                }
                if (Culture != Language.Id)
                {
                    Culture = Language.Id;
                }
            }
            else if (!_settingFK)
            {
                Culture = null;
            }
        }
    
        private void FixupCurrency(Currency previousValue)
        {
            if (previousValue != null && previousValue.AgencyGroups.Contains(this))
            {
                previousValue.AgencyGroups.Remove(this);
            }
    
            if (Currency != null)
            {
                if (!Currency.AgencyGroups.Contains(this))
                {
                    Currency.AgencyGroups.Add(this);
                }
                if (DefaultCurrency != Currency.Id)
                {
                    DefaultCurrency = Currency.Id;
                }
            }
            else if (!_settingFK)
            {
                DefaultCurrency = null;
            }
        }
    
        private void FixupAgencies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Agency item in e.NewItems)
                {
                    item.AgencyGroup = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Agency item in e.OldItems)
                {
                    if (ReferenceEquals(item.AgencyGroup, this))
                    {
                        item.AgencyGroup = null;
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.AgencyGroup = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.AgencyGroup, this))
                    {
                        item.AgencyGroup = null;
                    }
                }
            }
        }
    
        private void FixupApps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (App item in e.NewItems)
                {
                    item.AgencyGroup = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (App item in e.OldItems)
                {
                    if (ReferenceEquals(item.AgencyGroup, this))
                    {
                        item.AgencyGroup = null;
                    }
                }
            }
        }
    
        private void FixupPoUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.AgencyGroups.Contains(this))
                    {
                        item.AgencyGroups.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.AgencyGroups.Contains(this))
                    {
                        item.AgencyGroups.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}
