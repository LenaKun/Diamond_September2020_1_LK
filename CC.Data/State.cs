//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class State
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual int CountryId
        {
            get { return _countryId; }
            set
            {
                if (_countryId != value)
                {
                    if (Country != null && Country.Id != value)
                    {
                        Country = null;
                    }
                    _countryId = value;
                }
            }
        }
        private int _countryId;
    
        public virtual string Name
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<AgencyGroup> AgencyGroups
        {
            get
            {
                if (_agencyGroups == null)
                {
                    var newCollection = new FixupCollection<AgencyGroup>();
                    newCollection.CollectionChanged += FixupAgencyGroups;
                    _agencyGroups = newCollection;
                }
                return _agencyGroups;
            }
            set
            {
                if (!ReferenceEquals(_agencyGroups, value))
                {
                    var previousValue = _agencyGroups as FixupCollection<AgencyGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgencyGroups;
                    }
                    _agencyGroups = value;
                    var newValue = value as FixupCollection<AgencyGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgencyGroups;
                    }
                }
            }
        }
        private ICollection<AgencyGroup> _agencyGroups;
    
    	
    	public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;
    
        public virtual ICollection<Client> Clients
        {
            get
            {
                if (_clients == null)
                {
                    var newCollection = new FixupCollection<Client>();
                    newCollection.CollectionChanged += FixupClients;
                    _clients = newCollection;
                }
                return _clients;
            }
            set
            {
                if (!ReferenceEquals(_clients, value))
                {
                    var previousValue = _clients as FixupCollection<Client>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClients;
                    }
                    _clients = value;
                    var newValue = value as FixupCollection<Client>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClients;
                    }
                }
            }
        }
        private ICollection<Client> _clients;

        #endregion

        #region Association Fixup
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.States.Contains(this))
            {
                previousValue.States.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.States.Contains(this))
                {
                    Country.States.Add(this);
                }
                if (CountryId != Country.Id)
                {
                    CountryId = Country.Id;
                }
            }
        }
    
        private void FixupAgencyGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AgencyGroup item in e.NewItems)
                {
                    item.State = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AgencyGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.State, this))
                    {
                        item.State = null;
                    }
                }
            }
        }
    
        private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Client item in e.NewItems)
                {
                    item.State = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Client item in e.OldItems)
                {
                    if (ReferenceEquals(item.State, this))
                    {
                        item.State = null;
                    }
                }
            }
        }

        #endregion

    }
}
