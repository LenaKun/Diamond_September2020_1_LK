//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class FundExchangeRate
    {
        #region Primitive Properties
    
        public virtual int FundId
        {
            get { return _fundId; }
            set
            {
                if (_fundId != value)
                {
                    if (Fund != null && Fund.Id != value)
                    {
                        Fund = null;
                    }
                    _fundId = value;
                }
            }
        }
        private int _fundId;
    
        public virtual string CurId
        {
            get { return _curId; }
            set
            {
                if (_curId != value)
                {
                    if (Currency != null && Currency.Id != value)
                    {
                        Currency = null;
                    }
                    _curId = value;
                }
            }
        }
        private string _curId;
    
        public virtual decimal Value
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    		
    	public virtual Currency Currency
        {
            get { return _currency; }
            set
            {
                if (!ReferenceEquals(_currency, value))
                {
                    var previousValue = _currency;
                    _currency = value;
                    FixupCurrency(previousValue);
                }
            }
        }
        private Currency _currency;
    
    	
    	public virtual Fund Fund
        {
            get { return _fund; }
            set
            {
                if (!ReferenceEquals(_fund, value))
                {
                    var previousValue = _fund;
                    _fund = value;
                    FixupFund(previousValue);
                }
            }
        }
        private Fund _fund;

        #endregion

        #region Association Fixup
    
        private void FixupCurrency(Currency previousValue)
        {
            if (previousValue != null && previousValue.FundExchangeRates.Contains(this))
            {
                previousValue.FundExchangeRates.Remove(this);
            }
    
            if (Currency != null)
            {
                if (!Currency.FundExchangeRates.Contains(this))
                {
                    Currency.FundExchangeRates.Add(this);
                }
                if (CurId != Currency.Id)
                {
                    CurId = Currency.Id;
                }
            }
        }
    
        private void FixupFund(Fund previousValue)
        {
            if (previousValue != null && previousValue.FundExchangeRates.Contains(this))
            {
                previousValue.FundExchangeRates.Remove(this);
            }
    
            if (Fund != null)
            {
                if (!Fund.FundExchangeRates.Contains(this))
                {
                    Fund.FundExchangeRates.Add(this);
                }
                if (FundId != Fund.Id)
                {
                    FundId = Fund.Id;
                }
            }
        }

        #endregion

    }
}
