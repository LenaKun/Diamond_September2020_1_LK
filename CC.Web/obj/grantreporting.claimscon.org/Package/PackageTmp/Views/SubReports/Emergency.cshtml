@model SubReportDetailsModel
@{
	ViewBag.Title = "Detailed Report";
}
@section Header
{
	<script>
		var loadTotals = function () {
			$('div#totals').load('@Url.Action("GetTotals", new { Id = Model.Id})' + '?IE=' + Math.random(), function () {
				$('span.totalAmount').html($('div#totals span.totalAmount').html());
			});
		};
	</script>
	<script id="dt" type="text/javascript">
		//simple datatable init
		var editLink = '<button type="button" class="edit">Edit</button><button type="button" class="add">Add</button>';
		var deleteLink = '<button type="button" class="delete">Delete</button>';
		var dataTable = null;

		$(document).ready(function () {
			dataTable = $('table.grid').dataTable({
				"bServerSide": true,
				"aaSorting": [[2, "asc"], [3, "asc"]],
				"sAjaxSource": '@Url.Action("GetRows", new { Id = Model.Id })',
				"aoColumnDefs": [
					{
						"aTargets": [0,1,4,6,7,8,9,10,11,12],
						"bSortable":false 
					},
                    {
                    	"aTargets": [2,3],
                    	"bSortable": true 
                    },
					{
						"aTargets": [1], "bVisible": false
					},
					{
						"aTargets": [5], "mRender": function(a){
							return '<a href="@Url.Action("Details", "Clients")/'+ a+'">'+a+'</a';
						}
					},
					{
						"aTargets": [6], "sName": "ReportDate", "sTitle": "Date", "sClass": "date required",
						"mRender": function (val) {
							return renderDate(val);
						}
					},
					{ "aTargets": [7], "sName": "TypeId", "sTitle": "Type", "sClass": "required" },
					{ "aTargets": [8], "sName": "Remarks", "sTitle": "Purpose of grant", "sClass": "required" },
					{ "aTargets": [9], "sName": "Amount", "sTitle": "Amount", "sClass": "required number", "mRender": function (val) { return renderDecimal(val); } },
					{ "aTargets": [10], "sName": "Discretionary", "sTitle": "Discretionary", "sClass": "number", "mRender": function (val) { return renderDecimal(val); } },
					{ "aTargets": [11], "sName": "Total", "sTitle": "Total", "sClass": "number", "mRender": function (val) { return renderDecimal(val); } },
                    { "aTargets": [12], "sName": "UniqueCircumstances", "sTitle": "Unique Circumstances", "sClass": "" },
					@if (Model.CanBeEdited)
					{
						<text>

						{
							//last colum with buttons
							"aTargets": [-1],
							"sWidth": "7em",
							"mData": null,
							"bSortable": false,
							"sClass": 'control',
							"mRender": function (val, type, full) {
								var res = editLink;
								if (full[0]) res += deleteLink;
								return res;
							}
						},

						{
							"aTargets": ['edit'],
							"fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
								var nTh = $('table.grid thead tr:last th').get(iCol);

								//copy the edit class and set data-val to the current value
								$(nTd).addClass('edit').attr('data-val', sData);

								//copy data-name attribute
								if ($(nTh).attr('data-name')) {
									$(nTd).attr('data-name', $(nTh).attr('data-name'));
								}

								//copy data-type attribute
								if ($(nTh).attr('data-type')) {
									$(nTd).attr('data-type', $(nTh).attr('data-type'));
								}

							}
						}
						</text>
					}

				],
				"fnServerParams": function (aoData) {
					aoData.push({ name: "IE", value: Math.random() });
					aoData.push({ name: "AppBudgetServiceId", value: "@Model.AppBudgetServiceId" });
					aoData.push({ name: "AgencyId", value: "@Model.AgencyId" });
					aoData.push({ name: "@Html.FieldNameFor(f => f.Filter.ClientName)", value: $('#@Html.FieldIdFor(f => f.Filter.ClientName)').val() });
					aoData.push({ name: "@Html.FieldNameFor(f => f.Filter.ClientId)", value: $('#@Html.FieldIdFor(f => f.Filter.ClientId)').val() });
					aoData.push({ name: "@Html.FieldNameFor(f => f.Filter.ReportedOnly)", value: $('#@Html.FieldIdFor(f => f.Filter.ReportedOnly)').val() });
				}
				, "fnRowCallback": function (nRow, aData, iDisplayIndex) {
					/* set tr id. assume the id is in the first column of data */
					$(nRow).attr("clientId", aData[5]);
					$(nRow).attr("id", aData[0]);
					$(nRow).attr("subReportId", '@Model.Id');

					return nRow;
				}
			});
			$('button.filter').click(function () {
				dataTable.fnDraw();
			});
			$('button.reset').click(function () {
				$(this).closest('table').find(':input').val('');
				dataTable.fnDraw();
			});

		});
	</script>
	@if (Model.CanBeEdited)
 {
		<script>
			$(document).ready(function () {
				$('table.grid input').live('keypress', function (event) {
					switch (event.keyCode) {
						case 13:
							$(this).closest('tr').find('button.update').click();
							break;
						case 27:
							$(this).closest('tr').find('button.cancel').click();
							break;
					}
				});
				$('table.grid button.add').live('click', function () {
					$('table.grid button.cancel').click();
					var $tr = $(this).closest('tr');
					var tr = $tr.get(0);
					var dataTable = $('table.grid').dataTable();
					var data = dataTable.fnGetData(tr);
					var newdata = data.slice(0);
					newdata[0] = null;
					newdata[1] = null;
					for (var i = 6; i < data.length; i++) {
						newdata[i] = null;
					}
					var index = dataTable.fnAddData(newdata, false);
					var nTr = dataTable.fnGetNodes(index);
					var $nTr = $(nTr);
					$nTr.insertBefore($tr);
					
					$nTr.find('button.edit').click();
					
				});
				$('table.grid button.delete').live('click', function () {
					var tr = $(this).closest('tr');
					var id = tr.attr('id');
					var cr = {
						Id: id,
						IE: Math.random()
					};
					$.ajax({
						url: '@Url.Action("DeleteEmergencyReport")',
						type: 'POST',
						dataType: 'json',
						data: cr,
					}).done(function (data) {
					    loadTotals();
					    $('table.grid').dataTable().fnDraw(false);
					}).fail(function () {
					    alert('The current client Row not contain data to delete');
					});
				});
				$('table.grid button.edit').live('click', function () {
					$('table.grid button.cancel').click();
					var $tr = $(this).closest('tr');
					var tr = $tr.get(0);
					var dataTable = $('table.grid').dataTable();
					var data = null;
					if ($tr.hasClass('add')) {
						data = $tr.data('data');
					}
					else {
						data = dataTable.fnGetData(tr);
					}
					var settings = dataTable.fnSettings();
					var columns = settings.aoColumns;


					$tr.find('td.edit').each(function () {
						var $td = $(this);
						var td = $td.get(0);
						var aPos = dataTable.fnGetPosition(td); //array of [row index, column index (visible), column index (all)]
						var iRow = aPos[0];
						var iCol = aPos[2];

						var column = columns[iCol];
						var editor = null;
						var value = data[iCol];

						var editor = null;

						switch (iCol) {
							case 6:
								editor = $('<input/>');
								editor.val(column.mRender(data[iCol]));
								editor.datepicker({
									minDate: "@Model.MainReportStart",
									maxDate: "@Model.MainReportEnd.AddDays(-1)"
								});
								break;
							case 7:

								editor = $('<select>');
								value = data[1];
								$.getJSON('@Url.Content("~/data/dataservice.svc/")' + 'EmergencyReportTypes?$orderby=Name', function (data) {
									var a = $.map(data.d, function (val, i) {
										return '<option value="' + val.Id + '">' + val.Name + '</option>';
									});

									editor.html(a.join());
									editor.val(value);

								});

								break;
							default:
								editor = $('<input/>');
								editor.val(data[iCol]);
								break;
						}
						editor.attr('name', column.sName);
						editor.addClass(column.sClass);
						
						$td.html('').append(editor);

					});
					$tr.addClass('selected');
					$tr.find('td.control').html('<button type="button" class="update">Save</button>' + '<button type="button" class="cancel">Cancel</button>');
					//first focus creates datepicker, second shows it
					$tr.find('input:first').focus().focus();
				});
				$('table.grid button.cancel').live('click', function () {

					var $tr = $(this).closest('tr');
					var tr = $tr.get(0);
					var dataTable = $('table.grid').dataTable();
					var data = dataTable.fnGetData(tr);

					dataTable.fnUpdate(data, tr, undefined, false, false);
				});
				$('table.grid button.update').live('click', function () {
				    var $tr = $(this).closest('tr');
				    var idEmptyFlag = false; // requiere for refresh
				    var id = $tr.attr('id');
				    if (id == "")
				        idEmptyFlag = true;

				    var tr = $tr.get(0);				    
				    var data = dataTable.fnGetData(tr);

					var $form = $tr.closest('form');

					if (!$form.valid())
						return;

					
					var d = $form.serializeArray();

					d.push({ name: "Id", value: data[0] });
					d.push({ name: "ClientId", value: data[5] });
					d.push({ name: "SubReportId", value: '@Model.Id' });
				    d.push({ name: "IE", value: Math.random() });

					var dd = {};
					for (var i in d) {
						dd[d[i].name] = d[i].value;
					}					

					$('table.grid tbody tr').find(':input, button').attr('disabled', 'disabled');
					var request = $.ajax({
						url: $form.attr('action'),
						type: 'POST',
						dataType: "json",
						data: dd
					})
					request.success(function (data, textStatus, jqXHR) {

						if (data.success) {
							loadTotals();
							dataTable.fnUpdate(data.data, tr, undefined, false, false);
							$('table.grid tbody tr').find(':input, button').removeAttr('disabled');
							$tr.attr('id', data.data[0]);
							if(idEmptyFlag)
							    $('table.grid').dataTable().fnDraw(false);
						}
						else {
							showSuccess(data.errors);
						}

					});
					request.done(function (msg) {

					});
					request.fail(function (jqXHR, textStatus) {
					});
				});
			});

			function showSuccess(errors) {

				var errstr = '<ul class="error"><li>' + errors.join('</li><li>') + '</li></ul>';
				$(errstr).dialog({
					modal: true,
					buttons: {
						Ok: function () {
							$(this).dialog("close");
							$(this).dialog("destroy");
							$('table.grid tbody').find(':input, button').removeAttr('disabled');
						},
						Cancel: function () {
							$(this).dialog("close");
							$(this).dialog("destroy");
							$('table.grid').dataTable().fnDraw(false);
						}
					}
				});


			}
		</script>
 }
}
<h2>
	Detailed Report
</h2>
@Html.ValidationSummary()
<p>
	<a href="@Url.Action("Details", "MainReports", new { id = Model.MainReportId })" class="button">Go to Financial Report</a>
	@if (Model.CanBeEdited)
 { <a href="@Url.Action("Create", "SubReports", new { Id = Model.Id, AppBudgetServiceId = Model.AppBudgetServiceId, MainReportId = Model.MainReportId })" class="button">Import</a>}
</p>
@Html.Partial("Header", Model.DetailsHeader)

<table class="filter horizontal">
	<tr>
		<th style="white-space: nowrap">
			Filter By:
		</th>
		<td style="width: 100%">
			<div class="display-item">
				@Html.LabelFor(f => f.Filter.ClientName)
				@Html.EditorFor(f => f.Filter.ClientName)
			</div>
			<div class="display-item">
				@Html.LabelFor(f => f.Filter.ClientId)
				@Html.EditorFor(f => f.Filter.ClientId)
			</div>
			<div class="display-item">
				@Html.LabelFor(f => f.Filter.ReportedOnly)
				@Html.DropDownListFor(f => f.Filter.ReportedOnly, Model.Filter.ReportedOnlySelectList)
			</div>
			<div class="display-item">
				<button type="button" class="filter">
					Go</button>
				<button type="button" class="reset">
					Reset</button>
			</div>
		</td>
	</tr>
</table>
@using (Html.BeginForm("SaveEmergencyReport", "SubReports"))
{
	<table class="grid">
		<thead>
			<tr>
				<th>ID</th>
				<th>Type Id</th>
                <th>
				Client First Name
			</th>
            <th>
				Client Last Name
			</th>
				 <th>
				Client Approval Status
			</th>
				<th>
					CC ID
				</th>
				<th class="edit date" data-name="ReportDate">
					Date
				</th>
				<th class="edit" data-name="TypeId">
					Type
				</th>
				<th class="edit" data-name="Remarks">
					Purpose of Grant
				</th>
				<th class="edit decimal" data-name="Amount" data-type="decimal">
					Amount
				</th>
				<th class="edit" data-name="Discretionary" data-type="decimal">
					Discretionary
				</th>
				<th>Total </th>
                <th class="edit" data-name="UniqueCircumstances">
					Unique Circumstances
				</th>
				@if (Model.CanBeEdited)
				{
					<th></th>
				}
			</tr>
		</thead>
		<tbody>
		</tbody>
	</table>
}
<div id="totals">
	@Html.Partial(Model.Totals.ViewName, Model.Totals)
</div>
<div>
	<a href="@Url.Action("Export", new { id = Model.Id })" class="button">Export</a>
</div>
<p>
	<a href="@Url.Action("Details", "MainReports", new { id = Model.MainReportId })" class="button">Go to Financial Report </a>
	@if (Model.CanBeEdited)
 { <a href="@Url.Action("Create", "SubReports", new { Id = Model.Id, AppBudgetServiceId = Model.AppBudgetServiceId, MainReportId = Model.MainReportId })" class="button">Import</a>}
    @if (Model.CanBeEdited)
   {
        <button type="button" class="button" onclick="setToDef()">
					Set To Default</button>
        <script>
            function setToDef() {
                dalert(function () {
                    var d = {
                        Id: '@Model.Id'
                    };
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("DeleteChildReportRows")',
                        data: d,
                        success: function (data) {
                        	location.reload();
                        },
                        error: function () {
                            alert('error');
                        }
                    });

                })
            }
            function dalert(yesCallback) {
                $('<div></div>').html('All Sub Report Record will be deleted, continue ?').dialog({
                    modal: true,
                    buttons: {
                        "Yes": function () {
                            $(this).dialog("close");
                            $(this).dialog("destroy");
                            yesCallback();
                        },
                        "No": function () {
                            $(this).dialog("close");
                            $(this).dialog("destroy");

                        }
                    }

                });
            }
        </script>
		
   }
</p>
