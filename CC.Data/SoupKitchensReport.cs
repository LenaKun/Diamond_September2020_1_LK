//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class SoupKitchensReport
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int SubReportId
        {
            get { return _subReportId; }
            set
            {
                if (_subReportId != value)
                {
                    if (SubReport != null && SubReport.Id != value)
                    {
                        SubReport = null;
                    }
                    _subReportId = value;
                }
            }
        }
        private int _subReportId;
    
        public virtual int ClientId
        {
            get { return _clientId; }
            set
            {
                if (_clientId != value)
                {
                    if (Client != null && Client.Id != value)
                    {
                        Client = null;
                    }
                    _clientId = value;
                }
            }
        }
        private int _clientId;

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<SKMembersVisit> SKMembersVisits
        {
            get
            {
                if (_sKMembersVisits == null)
                {
                    var newCollection = new FixupCollection<SKMembersVisit>();
                    newCollection.CollectionChanged += FixupSKMembersVisits;
                    _sKMembersVisits = newCollection;
                }
                return _sKMembersVisits;
            }
            set
            {
                if (!ReferenceEquals(_sKMembersVisits, value))
                {
                    var previousValue = _sKMembersVisits as FixupCollection<SKMembersVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSKMembersVisits;
                    }
                    _sKMembersVisits = value;
                    var newValue = value as FixupCollection<SKMembersVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSKMembersVisits;
                    }
                }
            }
        }
        private ICollection<SKMembersVisit> _sKMembersVisits;
    
    	
    	public virtual Client Client
        {
            get { return _client; }
            set
            {
                if (!ReferenceEquals(_client, value))
                {
                    var previousValue = _client;
                    _client = value;
                    FixupClient(previousValue);
                }
            }
        }
        private Client _client;
    
    	
    	public virtual SubReport SubReport
        {
            get { return _subReport; }
            set
            {
                if (!ReferenceEquals(_subReport, value))
                {
                    var previousValue = _subReport;
                    _subReport = value;
                    FixupSubReport(previousValue);
                }
            }
        }
        private SubReport _subReport;

        #endregion

        #region Association Fixup
    
        private void FixupClient(Client previousValue)
        {
            if (previousValue != null && previousValue.SoupKitchensReports.Contains(this))
            {
                previousValue.SoupKitchensReports.Remove(this);
            }
    
            if (Client != null)
            {
                if (!Client.SoupKitchensReports.Contains(this))
                {
                    Client.SoupKitchensReports.Add(this);
                }
                if (ClientId != Client.Id)
                {
                    ClientId = Client.Id;
                }
            }
        }
    
        private void FixupSubReport(SubReport previousValue)
        {
            if (previousValue != null && previousValue.SoupKitchensReports.Contains(this))
            {
                previousValue.SoupKitchensReports.Remove(this);
            }
    
            if (SubReport != null)
            {
                if (!SubReport.SoupKitchensReports.Contains(this))
                {
                    SubReport.SoupKitchensReports.Add(this);
                }
                if (SubReportId != SubReport.Id)
                {
                    SubReportId = SubReport.Id;
                }
            }
        }
    
        private void FixupSKMembersVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SKMembersVisit item in e.NewItems)
                {
                    item.SoupKitchensReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SKMembersVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.SoupKitchensReport, this))
                    {
                        item.SoupKitchensReport = null;
                    }
                }
            }
        }

        #endregion

    }
}
