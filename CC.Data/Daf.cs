//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class Daf
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int EvaluatorId
        {
            get { return _evaluatorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_evaluatorId != value)
                    {
                        if (Evaluator != null && Evaluator.Id != value)
                        {
                            Evaluator = null;
                        }
                        _evaluatorId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _evaluatorId;
    
        public virtual int ClientId
        {
            get { return _clientId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_clientId != value)
                    {
                        if (Client != null && Client.Id != value)
                        {
                            Client = null;
                        }
                        _clientId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _clientId;
    
        public virtual int CreatedBy
        {
            get { return _createdBy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_createdBy != value)
                    {
                        if (Creator != null && Creator.Id != value)
                        {
                            Creator = null;
                        }
                        _createdBy = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _createdBy;
    
        public virtual Nullable<System.DateTime> UpdateAt
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_updatedBy != value)
                    {
                        if (Updater != null && Updater.Id != value)
                        {
                            Updater = null;
                        }
                        _updatedBy = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        public virtual Nullable<System.DateTime> AssessmentDate
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> GovernmentHours
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> ExceptionalHours
        {
            get;
            set;
        }
    
        public virtual string AdditionalComments
        {
            get;
            set;
        }
    
        public virtual string EvaluatorPosition
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> SignedAt
        {
            get;
            set;
        }
    
        public virtual Nullable<int> SignedBy
        {
            get { return _signedBy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_signedBy != value)
                    {
                        if (Signer != null && Signer.Id != value)
                        {
                            Signer = null;
                        }
                        _signedBy = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _signedBy;
    
        public virtual Nullable<int> ReviewedBy
        {
            get { return _reviewedBy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_reviewedBy != value)
                    {
                        if (Reviewer != null && Reviewer.Id != value)
                        {
                            Reviewer = null;
                        }
                        _reviewedBy = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _reviewedBy;
    
        public virtual Nullable<System.DateTime> ReviewedAt
        {
            get;
            set;
        }
    
        public virtual System.DateTime EffectiveDate
        {
            get;
            set;
        }
    
        public virtual Nullable<int> FunctionalityScoreId
        {
            get { return _functionalityScoreId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_functionalityScoreId != value)
                    {
                        if (FunctionalityScore != null && FunctionalityScore.Id != value)
                        {
                            FunctionalityScore = null;
                        }
                        _functionalityScoreId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _functionalityScoreId;
    
        public virtual int StatusId
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> TotlaScore
        {
            get;
            set;
        }
    
        public virtual string Xml
        {
            get;
            set;
        }
    
        public virtual byte[] Rowversion
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedAt
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DownloadedAt
        {
            get;
            set;
        }
    
        public virtual Nullable<int> DownloadedBy
        {
            get { return _downloadedBy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_downloadedBy != value)
                    {
                        if (Downloader != null && Downloader.Id != value)
                        {
                            Downloader = null;
                        }
                        _downloadedBy = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _downloadedBy;
    
        public virtual string DownloadedTo
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UploadedAt
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UploadedBy
        {
            get;
            set;
        }
    
        public virtual string UploadedTo
        {
            get;
            set;
        }
    
        public virtual string FileName
        {
            get;
            set;
        }
    
        public virtual bool Disclaimer
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UserConsentObtainedAt
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	
    	public virtual Client Client
        {
            get { return _client; }
            set
            {
                if (!ReferenceEquals(_client, value))
                {
                    var previousValue = _client;
                    _client = value;
                    FixupClient(previousValue);
                }
            }
        }
        private Client _client;
    
    		
    	public virtual User Creator
        {
            get { return _creator; }
            set
            {
                if (!ReferenceEquals(_creator, value))
                {
                    var previousValue = _creator;
                    _creator = value;
                    FixupCreator(previousValue);
                }
            }
        }
        private User _creator;
    
    		
    	public virtual User Evaluator
        {
            get { return _evaluator; }
            set
            {
                if (!ReferenceEquals(_evaluator, value))
                {
                    var previousValue = _evaluator;
                    _evaluator = value;
                    FixupEvaluator(previousValue);
                }
            }
        }
        private User _evaluator;
    
    	
    	public virtual FunctionalityScore FunctionalityScore
        {
            get { return _functionalityScore; }
            set
            {
                if (!ReferenceEquals(_functionalityScore, value))
                {
                    var previousValue = _functionalityScore;
                    _functionalityScore = value;
                    FixupFunctionalityScore(previousValue);
                }
            }
        }
        private FunctionalityScore _functionalityScore;
    
    		
    	public virtual User Reviewer
        {
            get { return _reviewer; }
            set
            {
                if (!ReferenceEquals(_reviewer, value))
                {
                    var previousValue = _reviewer;
                    _reviewer = value;
                    FixupReviewer(previousValue);
                }
            }
        }
        private User _reviewer;
    
    		
    	public virtual User Signer
        {
            get { return _signer; }
            set
            {
                if (!ReferenceEquals(_signer, value))
                {
                    var previousValue = _signer;
                    _signer = value;
                    FixupSigner(previousValue);
                }
            }
        }
        private User _signer;
    
    		
    	public virtual User Updater
        {
            get { return _updater; }
            set
            {
                if (!ReferenceEquals(_updater, value))
                {
                    var previousValue = _updater;
                    _updater = value;
                    FixupUpdater(previousValue);
                }
            }
        }
        private User _updater;
    
    		
    	public virtual User Downloader
        {
            get { return _downloader; }
            set
            {
                if (!ReferenceEquals(_downloader, value))
                {
                    var previousValue = _downloader;
                    _downloader = value;
                    FixupDownloader(previousValue);
                }
            }
        }
        private User _downloader;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupClient(Client previousValue)
        {
            if (previousValue != null && previousValue.Dafs.Contains(this))
            {
                previousValue.Dafs.Remove(this);
            }
    
            if (Client != null)
            {
                if (!Client.Dafs.Contains(this))
                {
                    Client.Dafs.Add(this);
                }
                if (ClientId != Client.Id)
                {
                    ClientId = Client.Id;
                }
            }
        }
    
        private void FixupCreator(User previousValue)
        {
            if (previousValue != null && previousValue.Dafs.Contains(this))
            {
                previousValue.Dafs.Remove(this);
            }
    
            if (Creator != null)
            {
                if (!Creator.Dafs.Contains(this))
                {
                    Creator.Dafs.Add(this);
                }
                if (CreatedBy != Creator.Id)
                {
                    CreatedBy = Creator.Id;
                }
            }
        }
    
        private void FixupEvaluator(User previousValue)
        {
            if (previousValue != null && previousValue.Dafs1.Contains(this))
            {
                previousValue.Dafs1.Remove(this);
            }
    
            if (Evaluator != null)
            {
                if (!Evaluator.Dafs1.Contains(this))
                {
                    Evaluator.Dafs1.Add(this);
                }
                if (EvaluatorId != Evaluator.Id)
                {
                    EvaluatorId = Evaluator.Id;
                }
            }
        }
    
        private void FixupFunctionalityScore(FunctionalityScore previousValue)
        {
            if (previousValue != null && previousValue.Dafs.Contains(this))
            {
                previousValue.Dafs.Remove(this);
            }
    
            if (FunctionalityScore != null)
            {
                if (!FunctionalityScore.Dafs.Contains(this))
                {
                    FunctionalityScore.Dafs.Add(this);
                }
                if (FunctionalityScoreId != FunctionalityScore.Id)
                {
                    FunctionalityScoreId = FunctionalityScore.Id;
                }
            }
            else if (!_settingFK)
            {
                FunctionalityScoreId = null;
            }
        }
    
        private void FixupReviewer(User previousValue)
        {
            if (previousValue != null && previousValue.Dafs2.Contains(this))
            {
                previousValue.Dafs2.Remove(this);
            }
    
            if (Reviewer != null)
            {
                if (!Reviewer.Dafs2.Contains(this))
                {
                    Reviewer.Dafs2.Add(this);
                }
                if (ReviewedBy != Reviewer.Id)
                {
                    ReviewedBy = Reviewer.Id;
                }
            }
            else if (!_settingFK)
            {
                ReviewedBy = null;
            }
        }
    
        private void FixupSigner(User previousValue)
        {
            if (previousValue != null && previousValue.Dafs3.Contains(this))
            {
                previousValue.Dafs3.Remove(this);
            }
    
            if (Signer != null)
            {
                if (!Signer.Dafs3.Contains(this))
                {
                    Signer.Dafs3.Add(this);
                }
                if (SignedBy != Signer.Id)
                {
                    SignedBy = Signer.Id;
                }
            }
            else if (!_settingFK)
            {
                SignedBy = null;
            }
        }
    
        private void FixupUpdater(User previousValue)
        {
            if (previousValue != null && previousValue.Dafs4.Contains(this))
            {
                previousValue.Dafs4.Remove(this);
            }
    
            if (Updater != null)
            {
                if (!Updater.Dafs4.Contains(this))
                {
                    Updater.Dafs4.Add(this);
                }
                if (UpdatedBy != Updater.Id)
                {
                    UpdatedBy = Updater.Id;
                }
            }
            else if (!_settingFK)
            {
                UpdatedBy = null;
            }
        }
    
        private void FixupDownloader(User previousValue)
        {
            if (previousValue != null && previousValue.Dafs11.Contains(this))
            {
                previousValue.Dafs11.Remove(this);
            }
    
            if (Downloader != null)
            {
                if (!Downloader.Dafs11.Contains(this))
                {
                    Downloader.Dafs11.Add(this);
                }
                if (DownloadedBy != Downloader.Id)
                {
                    DownloadedBy = Downloader.Id;
                }
            }
            else if (!_settingFK)
            {
                DownloadedBy = null;
            }
        }

        #endregion

    }
}
