//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace CC.Data
{
    public partial class ccEntities : ObjectContext
    {
        public const string ConnectionString = "name=ccEntities";
        public const string ContainerName = "ccEntities";
    
        #region Constructors
    
        public ccEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public ccEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public ccEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public virtual IObjectSet<ApprovalStatus> ApprovalStatuses
        {
            get { return _approvalStatuses  ?? (_approvalStatuses = CreateObjectSet<ApprovalStatus>("ApprovalStatuses")); }
        }
        private ObjectSet<ApprovalStatus> _approvalStatuses;
    
        public virtual IObjectSet<Country> Countries
        {
            get { return _countries  ?? (_countries = CreateObjectSet<Country>("Countries")); }
        }
        private ObjectSet<Country> _countries;
    
        public virtual IObjectSet<FunctionalityLevel> FunctionalityLevels
        {
            get { return _functionalityLevels  ?? (_functionalityLevels = CreateObjectSet<FunctionalityLevel>("FunctionalityLevels")); }
        }
        private ObjectSet<FunctionalityLevel> _functionalityLevels;
    
        public virtual IObjectSet<FunctionalityScore> FunctionalityScores
        {
            get { return _functionalityScores  ?? (_functionalityScores = CreateObjectSet<FunctionalityScore>("FunctionalityScores")); }
        }
        private ObjectSet<FunctionalityScore> _functionalityScores;
    
        public virtual IObjectSet<FundStatus> FundStatuses
        {
            get { return _fundStatuses  ?? (_fundStatuses = CreateObjectSet<FundStatus>("FundStatuses")); }
        }
        private ObjectSet<FundStatus> _fundStatuses;
    
        public virtual IObjectSet<History> Histories
        {
            get { return _histories  ?? (_histories = CreateObjectSet<History>("Histories")); }
        }
        private ObjectSet<History> _histories;
    
        public virtual IObjectSet<HomeCareEntitledPeriod> HomeCareEntitledPeriods
        {
            get { return _homeCareEntitledPeriods  ?? (_homeCareEntitledPeriods = CreateObjectSet<HomeCareEntitledPeriod>("HomeCareEntitledPeriods")); }
        }
        private ObjectSet<HomeCareEntitledPeriod> _homeCareEntitledPeriods;
    
        public virtual IObjectSet<LeaveReason> LeaveReasons
        {
            get { return _leaveReasons  ?? (_leaveReasons = CreateObjectSet<LeaveReason>("LeaveReasons")); }
        }
        private ObjectSet<LeaveReason> _leaveReasons;
    
        public virtual IObjectSet<MembershipUser> MembershipUsers
        {
            get { return _membershipUsers  ?? (_membershipUsers = CreateObjectSet<MembershipUser>("MembershipUsers")); }
        }
        private ObjectSet<MembershipUser> _membershipUsers;
    
        public virtual IObjectSet<NationalIdType> NationalIdTypes
        {
            get { return _nationalIdTypes  ?? (_nationalIdTypes = CreateObjectSet<NationalIdType>("NationalIdTypes")); }
        }
        private ObjectSet<NationalIdType> _nationalIdTypes;
    
        public virtual IObjectSet<Region> Regions
        {
            get { return _regions  ?? (_regions = CreateObjectSet<Region>("Regions")); }
        }
        private ObjectSet<Region> _regions;
    
        public virtual IObjectSet<RelatedFunctionalityLevel> RelatedFunctionalityLevels
        {
            get { return _relatedFunctionalityLevels  ?? (_relatedFunctionalityLevels = CreateObjectSet<RelatedFunctionalityLevel>("RelatedFunctionalityLevels")); }
        }
        private ObjectSet<RelatedFunctionalityLevel> _relatedFunctionalityLevels;
    
        public virtual IObjectSet<Role> Roles
        {
            get { return _roles  ?? (_roles = CreateObjectSet<Role>("Roles")); }
        }
        private ObjectSet<Role> _roles;
    
        public virtual IObjectSet<State> States
        {
            get { return _states  ?? (_states = CreateObjectSet<State>("States")); }
        }
        private ObjectSet<State> _states;
    
        public virtual IObjectSet<Currency> Currencies
        {
            get { return _currencies  ?? (_currencies = CreateObjectSet<Currency>("Currencies")); }
        }
        private ObjectSet<Currency> _currencies;
    
        public virtual IObjectSet<Fund> Funds
        {
            get { return _funds  ?? (_funds = CreateObjectSet<Fund>("Funds")); }
        }
        private ObjectSet<Fund> _funds;
    
        public virtual IObjectSet<MasterFund> MasterFunds
        {
            get { return _masterFunds  ?? (_masterFunds = CreateObjectSet<MasterFund>("MasterFunds")); }
        }
        private ObjectSet<MasterFund> _masterFunds;
    
        public virtual IObjectSet<AppBudgetService> AppBudgetServices
        {
            get { return _appBudgetServices  ?? (_appBudgetServices = CreateObjectSet<AppBudgetService>("AppBudgetServices")); }
        }
        private ObjectSet<AppBudgetService> _appBudgetServices;
    
        public virtual IObjectSet<Comment> Comments
        {
            get { return _comments  ?? (_comments = CreateObjectSet<Comment>("Comments")); }
        }
        private ObjectSet<Comment> _comments;
    
        public virtual IObjectSet<MainReport> MainReports
        {
            get { return _mainReports  ?? (_mainReports = CreateObjectSet<MainReport>("MainReports")); }
        }
        private ObjectSet<MainReport> _mainReports;
    
        public virtual IObjectSet<MainReportStatusAudit> MainReportStatusAudits
        {
            get { return _mainReportStatusAudits  ?? (_mainReportStatusAudits = CreateObjectSet<MainReportStatusAudit>("MainReportStatusAudits")); }
        }
        private ObjectSet<MainReportStatusAudit> _mainReportStatusAudits;
    
        public virtual IObjectSet<SubReport> SubReports
        {
            get { return _subReports  ?? (_subReports = CreateObjectSet<SubReport>("SubReports")); }
        }
        private ObjectSet<SubReport> _subReports;
    
        public virtual IObjectSet<Agency> Agencies
        {
            get { return _agencies  ?? (_agencies = CreateObjectSet<Agency>("Agencies")); }
        }
        private ObjectSet<Agency> _agencies;
    
        public virtual IObjectSet<Service> Services
        {
            get { return _services  ?? (_services = CreateObjectSet<Service>("Services")); }
        }
        private ObjectSet<Service> _services;
    
        public virtual IObjectSet<AgencyGroup> AgencyGroups
        {
            get { return _agencyGroups  ?? (_agencyGroups = CreateObjectSet<AgencyGroup>("AgencyGroups")); }
        }
        private ObjectSet<AgencyGroup> _agencyGroups;
    
        public virtual IObjectSet<AppBudget> AppBudgets
        {
            get { return _appBudgets  ?? (_appBudgets = CreateObjectSet<AppBudget>("AppBudgets")); }
        }
        private ObjectSet<AppBudget> _appBudgets;
    
        public virtual IObjectSet<User> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<User>("Users")); }
        }
        private ObjectSet<User> _users;
    
        public virtual IObjectSet<App> Apps
        {
            get { return _apps  ?? (_apps = CreateObjectSet<App>("Apps")); }
        }
        private ObjectSet<App> _apps;
    
        public virtual IObjectSet<EmergencyCap> EmergencyCaps
        {
            get { return _emergencyCaps  ?? (_emergencyCaps = CreateObjectSet<EmergencyCap>("EmergencyCaps")); }
        }
        private ObjectSet<EmergencyCap> _emergencyCaps;
    
        public virtual IObjectSet<ProgramCost> ProgramCosts
        {
            get { return _programCosts  ?? (_programCosts = CreateObjectSet<ProgramCost>("ProgramCosts")); }
        }
        private ObjectSet<ProgramCost> _programCosts;
    
        public virtual IObjectSet<ProgramCostType> ProgramCostTypes
        {
            get { return _programCostTypes  ?? (_programCostTypes = CreateObjectSet<ProgramCostType>("ProgramCostTypes")); }
        }
        private ObjectSet<ProgramCostType> _programCostTypes;
    
        public virtual IObjectSet<AppBudgetServiceAudit> AppBudgetServiceAudits
        {
            get { return _appBudgetServiceAudits  ?? (_appBudgetServiceAudits = CreateObjectSet<AppBudgetServiceAudit>("AppBudgetServiceAudits")); }
        }
        private ObjectSet<AppBudgetServiceAudit> _appBudgetServiceAudits;
    
        public virtual IObjectSet<PersonnelReport> PersonnelReports
        {
            get { return _personnelReports  ?? (_personnelReports = CreateObjectSet<PersonnelReport>("PersonnelReports")); }
        }
        private ObjectSet<PersonnelReport> _personnelReports;
    
        public virtual IObjectSet<DeletedClient> DeletedClients
        {
            get { return _deletedClients  ?? (_deletedClients = CreateObjectSet<DeletedClient>("DeletedClients")); }
        }
        private ObjectSet<DeletedClient> _deletedClients;
    
        public virtual IObjectSet<EmergencyReportType> EmergencyReportTypes
        {
            get { return _emergencyReportTypes  ?? (_emergencyReportTypes = CreateObjectSet<EmergencyReportType>("EmergencyReportTypes")); }
        }
        private ObjectSet<EmergencyReportType> _emergencyReportTypes;
    
        public virtual IObjectSet<ClientAmountReport> ClientAmountReports
        {
            get { return _clientAmountReports  ?? (_clientAmountReports = CreateObjectSet<ClientAmountReport>("ClientAmountReports")); }
        }
        private ObjectSet<ClientAmountReport> _clientAmountReports;
    
        public virtual IObjectSet<MedicalEquipmentReport> MedicalEquipmentReports
        {
            get { return _medicalEquipmentReports  ?? (_medicalEquipmentReports = CreateObjectSet<MedicalEquipmentReport>("MedicalEquipmentReports")); }
        }
        private ObjectSet<MedicalEquipmentReport> _medicalEquipmentReports;
    
        public virtual IObjectSet<MedicalEquipmentType> MedicalEquipmentTypes
        {
            get { return _medicalEquipmentTypes  ?? (_medicalEquipmentTypes = CreateObjectSet<MedicalEquipmentType>("MedicalEquipmentTypes")); }
        }
        private ObjectSet<MedicalEquipmentType> _medicalEquipmentTypes;
    
        public virtual IObjectSet<MhmReport> MhmReports
        {
            get { return _mhmReports  ?? (_mhmReports = CreateObjectSet<MhmReport>("MhmReports")); }
        }
        private ObjectSet<MhmReport> _mhmReports;
    
        public virtual IObjectSet<MhmType> MhmTypes
        {
            get { return _mhmTypes  ?? (_mhmTypes = CreateObjectSet<MhmType>("MhmTypes")); }
        }
        private ObjectSet<MhmType> _mhmTypes;
    
        public virtual IObjectSet<ClientReport> ClientReports
        {
            get { return _clientReports  ?? (_clientReports = CreateObjectSet<ClientReport>("ClientReports")); }
        }
        private ObjectSet<ClientReport> _clientReports;
    
        public virtual IObjectSet<EmergencyReport> EmergencyReports
        {
            get { return _emergencyReports  ?? (_emergencyReports = CreateObjectSet<EmergencyReport>("EmergencyReports")); }
        }
        private ObjectSet<EmergencyReport> _emergencyReports;
    
        public virtual IObjectSet<Client> Clients
        {
            get { return _clients  ?? (_clients = CreateObjectSet<Client>("Clients")); }
        }
        private ObjectSet<Client> _clients;
    
        public virtual IObjectSet<Import> Imports
        {
            get { return _imports  ?? (_imports = CreateObjectSet<Import>("Imports")); }
        }
        private ObjectSet<Import> _imports;
    
        public virtual IObjectSet<CriBase> CriBases
        {
            get { return _criBases  ?? (_criBases = CreateObjectSet<CriBase>("CriBases")); }
        }
        private ObjectSet<CriBase> _criBases;
    
        public virtual IObjectSet<Log> Logs
        {
            get { return _logs  ?? (_logs = CreateObjectSet<Log>("Logs")); }
        }
        private ObjectSet<Log> _logs;
    
        public virtual IObjectSet<ImportFunctionalityScore> ImportFunctionalityScores
        {
            get { return _importFunctionalityScores  ?? (_importFunctionalityScores = CreateObjectSet<ImportFunctionalityScore>("ImportFunctionalityScores")); }
        }
        private ObjectSet<ImportFunctionalityScore> _importFunctionalityScores;
    
        public virtual IObjectSet<ImportHcep> ImportHceps
        {
            get { return _importHceps  ?? (_importHceps = CreateObjectSet<ImportHcep>("ImportHceps")); }
        }
        private ObjectSet<ImportHcep> _importHceps;
    
        public virtual IObjectSet<ImportClient> ImportClients
        {
            get { return _importClients  ?? (_importClients = CreateObjectSet<ImportClient>("ImportClients")); }
        }
        private ObjectSet<ImportClient> _importClients;
    
        public virtual IObjectSet<UserAgreementAudit> UserAgreementAudits
        {
            get { return _userAgreementAudits  ?? (_userAgreementAudits = CreateObjectSet<UserAgreementAudit>("UserAgreementAudits")); }
        }
        private ObjectSet<UserAgreementAudit> _userAgreementAudits;
    
        public virtual IObjectSet<UserAgreement> UserAgreements
        {
            get { return _userAgreements  ?? (_userAgreements = CreateObjectSet<UserAgreement>("UserAgreements")); }
        }
        private ObjectSet<UserAgreement> _userAgreements;
    
        public virtual IObjectSet<viewSubreportAmount> viewSubreportAmounts
        {
            get { return _viewSubreportAmounts  ?? (_viewSubreportAmounts = CreateObjectSet<viewSubreportAmount>("viewSubreportAmounts")); }
        }
        private ObjectSet<viewSubreportAmount> _viewSubreportAmounts;
    
        public virtual IObjectSet<GovHcHour> GovHcHours
        {
            get { return _govHcHours  ?? (_govHcHours = CreateObjectSet<GovHcHour>("GovHcHours")); }
        }
        private ObjectSet<GovHcHour> _govHcHours;
    
        public virtual IObjectSet<ImportGovHcHour> ImportGovHcHours
        {
            get { return _importGovHcHours  ?? (_importGovHcHours = CreateObjectSet<ImportGovHcHour>("ImportGovHcHours")); }
        }
        private ObjectSet<ImportGovHcHour> _importGovHcHours;
    
        public virtual IObjectSet<AppExchangeRate> AppExchangeRates
        {
            get { return _appExchangeRates  ?? (_appExchangeRates = CreateObjectSet<AppExchangeRate>("AppExchangeRates")); }
        }
        private ObjectSet<AppExchangeRate> _appExchangeRates;
    
        public virtual IObjectSet<FundExchangeRate> FundExchangeRates
        {
            get { return _fundExchangeRates  ?? (_fundExchangeRates = CreateObjectSet<FundExchangeRate>("FundExchangeRates")); }
        }
        private ObjectSet<FundExchangeRate> _fundExchangeRates;
    
        public virtual IObjectSet<ServiceConstraint> ServiceConstraints
        {
            get { return _serviceConstraints  ?? (_serviceConstraints = CreateObjectSet<ServiceConstraint>("ServiceConstraints")); }
        }
        private ObjectSet<ServiceConstraint> _serviceConstraints;
    
        public virtual IObjectSet<viewGgQuarterlyHcFl> viewGgQuarterlyHcFls
        {
            get { return _viewGgQuarterlyHcFls  ?? (_viewGgQuarterlyHcFls = CreateObjectSet<viewGgQuarterlyHcFl>("viewGgQuarterlyHcFls")); }
        }
        private ObjectSet<viewGgQuarterlyHcFl> _viewGgQuarterlyHcFls;
    
        public virtual IObjectSet<HcCapsTableRaw> HcCapsTableRaws
        {
            get { return _hcCapsTableRaws  ?? (_hcCapsTableRaws = CreateObjectSet<HcCapsTableRaw>("HcCapsTableRaws")); }
        }
        private ObjectSet<HcCapsTableRaw> _hcCapsTableRaws;
    
        public virtual IObjectSet<AppsImport> AppsImports
        {
            get { return _appsImports  ?? (_appsImports = CreateObjectSet<AppsImport>("AppsImports")); }
        }
        private ObjectSet<AppsImport> _appsImports;
    
        public virtual IObjectSet<viewClientReportsEst> viewClientReportsEsts
        {
            get { return _viewClientReportsEsts  ?? (_viewClientReportsEsts = CreateObjectSet<viewClientReportsEst>("viewClientReportsEsts")); }
        }
        private ObjectSet<viewClientReportsEst> _viewClientReportsEsts;
    
        public virtual IObjectSet<ClientContact> ClientContacts
        {
            get { return _clientContacts  ?? (_clientContacts = CreateObjectSet<ClientContact>("ClientContacts")); }
        }
        private ObjectSet<ClientContact> _clientContacts;
    
        public virtual IObjectSet<viewDatesHistory> viewDatesHistories
        {
            get { return _viewDatesHistories  ?? (_viewDatesHistories = CreateObjectSet<viewDatesHistory>("viewDatesHistories")); }
        }
        private ObjectSet<viewDatesHistory> _viewDatesHistories;
    
        public virtual IObjectSet<viewAppExchangeRate> viewAppExchangeRates
        {
            get { return _viewAppExchangeRates  ?? (_viewAppExchangeRates = CreateObjectSet<viewAppExchangeRate>("viewAppExchangeRates")); }
        }
        private ObjectSet<viewAppExchangeRate> _viewAppExchangeRates;
    
        public virtual IObjectSet<HcCap> HcCaps
        {
            get { return _hcCaps  ?? (_hcCaps = CreateObjectSet<HcCap>("HcCaps")); }
        }
        private ObjectSet<HcCap> _hcCaps;
    
        public virtual IObjectSet<ValidClientView> ValidClientViews
        {
            get { return _validClientViews  ?? (_validClientViews = CreateObjectSet<ValidClientView>("ValidClientViews")); }
        }
        private ObjectSet<ValidClientView> _validClientViews;
    
        public virtual IObjectSet<viewHc> viewHcs
        {
            get { return _viewHcs  ?? (_viewHcs = CreateObjectSet<viewHc>("viewHcs")); }
        }
        private ObjectSet<viewHc> _viewHcs;
    
        public virtual IObjectSet<viewMonth> viewMonths
        {
            get { return _viewMonths  ?? (_viewMonths = CreateObjectSet<viewMonth>("viewMonths")); }
        }
        private ObjectSet<viewMonth> _viewMonths;
    
        public virtual IObjectSet<viewHcPlu> viewHcPlus
        {
            get { return _viewHcPlus  ?? (_viewHcPlus = CreateObjectSet<viewHcPlu>("viewHcPlus")); }
        }
        private ObjectSet<viewHcPlu> _viewHcPlus;
    
        public virtual IObjectSet<viewFinancialSummary_Details> viewFinancialSummary_Details
        {
            get { return _viewFinancialSummary_Details  ?? (_viewFinancialSummary_Details = CreateObjectSet<viewFinancialSummary_Details>("viewFinancialSummary_Details")); }
        }
        private ObjectSet<viewFinancialSummary_Details> _viewFinancialSummary_Details;
    
        public virtual IObjectSet<QRTZ_BLOB_TRIGGERS> QRTZ_BLOB_TRIGGERS
        {
            get { return _qRTZ_BLOB_TRIGGERS  ?? (_qRTZ_BLOB_TRIGGERS = CreateObjectSet<QRTZ_BLOB_TRIGGERS>("QRTZ_BLOB_TRIGGERS")); }
        }
        private ObjectSet<QRTZ_BLOB_TRIGGERS> _qRTZ_BLOB_TRIGGERS;
    
        public virtual IObjectSet<QRTZ_CALENDARS> QRTZ_CALENDARS
        {
            get { return _qRTZ_CALENDARS  ?? (_qRTZ_CALENDARS = CreateObjectSet<QRTZ_CALENDARS>("QRTZ_CALENDARS")); }
        }
        private ObjectSet<QRTZ_CALENDARS> _qRTZ_CALENDARS;
    
        public virtual IObjectSet<QRTZ_CRON_TRIGGERS> QRTZ_CRON_TRIGGERS
        {
            get { return _qRTZ_CRON_TRIGGERS  ?? (_qRTZ_CRON_TRIGGERS = CreateObjectSet<QRTZ_CRON_TRIGGERS>("QRTZ_CRON_TRIGGERS")); }
        }
        private ObjectSet<QRTZ_CRON_TRIGGERS> _qRTZ_CRON_TRIGGERS;
    
        public virtual IObjectSet<QRTZ_FIRED_TRIGGERS> QRTZ_FIRED_TRIGGERS
        {
            get { return _qRTZ_FIRED_TRIGGERS  ?? (_qRTZ_FIRED_TRIGGERS = CreateObjectSet<QRTZ_FIRED_TRIGGERS>("QRTZ_FIRED_TRIGGERS")); }
        }
        private ObjectSet<QRTZ_FIRED_TRIGGERS> _qRTZ_FIRED_TRIGGERS;
    
        public virtual IObjectSet<QRTZ_JOB_DETAILS> QRTZ_JOB_DETAILS
        {
            get { return _qRTZ_JOB_DETAILS  ?? (_qRTZ_JOB_DETAILS = CreateObjectSet<QRTZ_JOB_DETAILS>("QRTZ_JOB_DETAILS")); }
        }
        private ObjectSet<QRTZ_JOB_DETAILS> _qRTZ_JOB_DETAILS;
    
        public virtual IObjectSet<QRTZ_LOCKS> QRTZ_LOCKS
        {
            get { return _qRTZ_LOCKS  ?? (_qRTZ_LOCKS = CreateObjectSet<QRTZ_LOCKS>("QRTZ_LOCKS")); }
        }
        private ObjectSet<QRTZ_LOCKS> _qRTZ_LOCKS;
    
        public virtual IObjectSet<QRTZ_PAUSED_TRIGGER_GRPS> QRTZ_PAUSED_TRIGGER_GRPS
        {
            get { return _qRTZ_PAUSED_TRIGGER_GRPS  ?? (_qRTZ_PAUSED_TRIGGER_GRPS = CreateObjectSet<QRTZ_PAUSED_TRIGGER_GRPS>("QRTZ_PAUSED_TRIGGER_GRPS")); }
        }
        private ObjectSet<QRTZ_PAUSED_TRIGGER_GRPS> _qRTZ_PAUSED_TRIGGER_GRPS;
    
        public virtual IObjectSet<QRTZ_SCHEDULER_STATE> QRTZ_SCHEDULER_STATE
        {
            get { return _qRTZ_SCHEDULER_STATE  ?? (_qRTZ_SCHEDULER_STATE = CreateObjectSet<QRTZ_SCHEDULER_STATE>("QRTZ_SCHEDULER_STATE")); }
        }
        private ObjectSet<QRTZ_SCHEDULER_STATE> _qRTZ_SCHEDULER_STATE;
    
        public virtual IObjectSet<QRTZ_SIMPLE_TRIGGERS> QRTZ_SIMPLE_TRIGGERS
        {
            get { return _qRTZ_SIMPLE_TRIGGERS  ?? (_qRTZ_SIMPLE_TRIGGERS = CreateObjectSet<QRTZ_SIMPLE_TRIGGERS>("QRTZ_SIMPLE_TRIGGERS")); }
        }
        private ObjectSet<QRTZ_SIMPLE_TRIGGERS> _qRTZ_SIMPLE_TRIGGERS;
    
        public virtual IObjectSet<QRTZ_SIMPROP_TRIGGERS> QRTZ_SIMPROP_TRIGGERS
        {
            get { return _qRTZ_SIMPROP_TRIGGERS  ?? (_qRTZ_SIMPROP_TRIGGERS = CreateObjectSet<QRTZ_SIMPROP_TRIGGERS>("QRTZ_SIMPROP_TRIGGERS")); }
        }
        private ObjectSet<QRTZ_SIMPROP_TRIGGERS> _qRTZ_SIMPROP_TRIGGERS;
    
        public virtual IObjectSet<QRTZ_TRIGGERS> QRTZ_TRIGGERS
        {
            get { return _qRTZ_TRIGGERS  ?? (_qRTZ_TRIGGERS = CreateObjectSet<QRTZ_TRIGGERS>("QRTZ_TRIGGERS")); }
        }
        private ObjectSet<QRTZ_TRIGGERS> _qRTZ_TRIGGERS;
    
        public virtual IObjectSet<ApprovedAppBudgetService> ApprovedAppBudgetServices
        {
            get { return _approvedAppBudgetServices  ?? (_approvedAppBudgetServices = CreateObjectSet<ApprovedAppBudgetService>("ApprovedAppBudgetServices")); }
        }
        private ObjectSet<ApprovedAppBudgetService> _approvedAppBudgetServices;
    
        public virtual IObjectSet<BirthCountry> BirthCountries
        {
            get { return _birthCountries  ?? (_birthCountries = CreateObjectSet<BirthCountry>("BirthCountries")); }
        }
        private ObjectSet<BirthCountry> _birthCountries;
    
        public virtual IObjectSet<ServiceType> ServiceTypes
        {
            get { return _serviceTypes  ?? (_serviceTypes = CreateObjectSet<ServiceType>("ServiceTypes")); }
        }
        private ObjectSet<ServiceType> _serviceTypes;
    
        public virtual IObjectSet<UnmetNeed> UnmetNeeds
        {
            get { return _unmetNeeds  ?? (_unmetNeeds = CreateObjectSet<UnmetNeed>("UnmetNeeds")); }
        }
        private ObjectSet<UnmetNeed> _unmetNeeds;
    
        public virtual IObjectSet<ImportUnmetNeed> ImportUnmetNeeds
        {
            get { return _importUnmetNeeds  ?? (_importUnmetNeeds = CreateObjectSet<ImportUnmetNeed>("ImportUnmetNeeds")); }
        }
        private ObjectSet<ImportUnmetNeed> _importUnmetNeeds;
    
        public virtual IObjectSet<Global> Globals
        {
            get { return _globals  ?? (_globals = CreateObjectSet<Global>("Globals")); }
        }
        private ObjectSet<Global> _globals;
    
        public virtual IObjectSet<AutomatedReport> AutomatedReports
        {
            get { return _automatedReports  ?? (_automatedReports = CreateObjectSet<AutomatedReport>("AutomatedReports")); }
        }
        private ObjectSet<AutomatedReport> _automatedReports;
    
        public virtual IObjectSet<viewFinancialReportApprovalStatusReport> viewFinancialReportApprovalStatusReports
        {
            get { return _viewFinancialReportApprovalStatusReports  ?? (_viewFinancialReportApprovalStatusReports = CreateObjectSet<viewFinancialReportApprovalStatusReport>("viewFinancialReportApprovalStatusReports")); }
        }
        private ObjectSet<viewFinancialReportApprovalStatusReport> _viewFinancialReportApprovalStatusReports;
    
        public virtual IObjectSet<viewDeceasedDateEntryReport> viewDeceasedDateEntryReports
        {
            get { return _viewDeceasedDateEntryReports  ?? (_viewDeceasedDateEntryReports = CreateObjectSet<viewDeceasedDateEntryReport>("viewDeceasedDateEntryReports")); }
        }
        private ObjectSet<viewDeceasedDateEntryReport> _viewDeceasedDateEntryReports;
    
        public virtual IObjectSet<viewFunctionalityScoreChangeReport> viewFunctionalityScoreChangeReports
        {
            get { return _viewFunctionalityScoreChangeReports  ?? (_viewFunctionalityScoreChangeReports = CreateObjectSet<viewFunctionalityScoreChangeReport>("viewFunctionalityScoreChangeReports")); }
        }
        private ObjectSet<viewFunctionalityScoreChangeReport> _viewFunctionalityScoreChangeReports;
    
        public virtual IObjectSet<SupportiveCommunitiesReport> SupportiveCommunitiesReports
        {
            get { return _supportiveCommunitiesReports  ?? (_supportiveCommunitiesReports = CreateObjectSet<SupportiveCommunitiesReport>("SupportiveCommunitiesReports")); }
        }
        private ObjectSet<SupportiveCommunitiesReport> _supportiveCommunitiesReports;
    
        public virtual IObjectSet<DccSubside> DccSubsides
        {
            get { return _dccSubsides  ?? (_dccSubsides = CreateObjectSet<DccSubside>("DccSubsides")); }
        }
        private ObjectSet<DccSubside> _dccSubsides;
    
        public virtual IObjectSet<DaysCentersReport> DaysCentersReports
        {
            get { return _daysCentersReports  ?? (_daysCentersReports = CreateObjectSet<DaysCentersReport>("DaysCentersReports")); }
        }
        private ObjectSet<DaysCentersReport> _daysCentersReports;
    
        public virtual IObjectSet<DccMemberVisit> DccMemberVisits
        {
            get { return _dccMemberVisits  ?? (_dccMemberVisits = CreateObjectSet<DccMemberVisit>("DccMemberVisits")); }
        }
        private ObjectSet<DccMemberVisit> _dccMemberVisits;
    
        public virtual IObjectSet<ScSubsidyAmount> ScSubsidyAmounts
        {
            get { return _scSubsidyAmounts  ?? (_scSubsidyAmounts = CreateObjectSet<ScSubsidyAmount>("ScSubsidyAmounts")); }
        }
        private ObjectSet<ScSubsidyAmount> _scSubsidyAmounts;
    
        public virtual IObjectSet<ScSubsidyLevel> ScSubsidyLevels
        {
            get { return _scSubsidyLevels  ?? (_scSubsidyLevels = CreateObjectSet<ScSubsidyLevel>("ScSubsidyLevels")); }
        }
        private ObjectSet<ScSubsidyLevel> _scSubsidyLevels;
    
        public virtual IObjectSet<ViewClientReport> ViewClientReports
        {
            get { return _viewClientReports  ?? (_viewClientReports = CreateObjectSet<ViewClientReport>("ViewClientReports")); }
        }
        private ObjectSet<ViewClientReport> _viewClientReports;
    
        public virtual IObjectSet<viewScRepSource> viewScRepSources
        {
            get { return _viewScRepSources  ?? (_viewScRepSources = CreateObjectSet<viewScRepSource>("viewScRepSources")); }
        }
        private ObjectSet<viewScRepSource> _viewScRepSources;
    
        public virtual IObjectSet<ViewClientsServiceDate_New> ViewClientsServiceDate_New
        {
            get { return _viewClientsServiceDate_New  ?? (_viewClientsServiceDate_New = CreateObjectSet<ViewClientsServiceDate_New>("ViewClientsServiceDate_New")); }
        }
        private ObjectSet<ViewClientsServiceDate_New> _viewClientsServiceDate_New;
    
        public virtual IObjectSet<DafDeleted> DafDeleteds
        {
            get { return _dafDeleteds  ?? (_dafDeleteds = CreateObjectSet<DafDeleted>("DafDeleteds")); }
        }
        private ObjectSet<DafDeleted> _dafDeleteds;
    
        public virtual IObjectSet<Daf> Dafs
        {
            get { return _dafs  ?? (_dafs = CreateObjectSet<Daf>("Dafs")); }
        }
        private ObjectSet<Daf> _dafs;
    
        public virtual IObjectSet<ClientHcStatus> ClientHcStatuses
        {
            get { return _clientHcStatuses  ?? (_clientHcStatuses = CreateObjectSet<ClientHcStatus>("ClientHcStatuses")); }
        }
        private ObjectSet<ClientHcStatus> _clientHcStatuses;
    
        public virtual IObjectSet<Resource> Resources
        {
            get { return _resources  ?? (_resources = CreateObjectSet<Resource>("Resources")); }
        }
        private ObjectSet<Resource> _resources;
    
        public virtual IObjectSet<Language> Languages
        {
            get { return _languages  ?? (_languages = CreateObjectSet<Language>("Languages")); }
        }
        private ObjectSet<Language> _languages;
    
        public virtual IObjectSet<HcStatus> HcStatuses
        {
            get { return _hcStatuses  ?? (_hcStatuses = CreateObjectSet<HcStatus>("HcStatuses")); }
        }
        private ObjectSet<HcStatus> _hcStatuses;
    
        public virtual IObjectSet<AgencyApp> AgencyApps
        {
            get { return _agencyApps  ?? (_agencyApps = CreateObjectSet<AgencyApp>("AgencyApps")); }
        }
        private ObjectSet<AgencyApp> _agencyApps;
    
        public virtual IObjectSet<SKMembersVisit> SKMembersVisits
        {
            get { return _sKMembersVisits  ?? (_sKMembersVisits = CreateObjectSet<SKMembersVisit>("SKMembersVisits")); }
        }
        private ObjectSet<SKMembersVisit> _sKMembersVisits;
    
        public virtual IObjectSet<SoupKitchensReport> SoupKitchensReports
        {
            get { return _soupKitchensReports  ?? (_soupKitchensReports = CreateObjectSet<SoupKitchensReport>("SoupKitchensReports")); }
        }
        private ObjectSet<SoupKitchensReport> _soupKitchensReports;
    
        public virtual IObjectSet<ImportUnmetNeedsOther> ImportUnmetNeedsOthers
        {
            get { return _importUnmetNeedsOthers  ?? (_importUnmetNeedsOthers = CreateObjectSet<ImportUnmetNeedsOther>("ImportUnmetNeedsOthers")); }
        }
        private ObjectSet<ImportUnmetNeedsOther> _importUnmetNeedsOthers;
    
        public virtual IObjectSet<UnmetNeedsOther> UnmetNeedsOthers
        {
            get { return _unmetNeedsOthers  ?? (_unmetNeedsOthers = CreateObjectSet<UnmetNeedsOther>("UnmetNeedsOthers")); }
        }
        private ObjectSet<UnmetNeedsOther> _unmetNeedsOthers;
    
        public virtual IObjectSet<HcCapsMonthlyTableRaw> HcCapsMonthlyTableRaws
        {
            get { return _hcCapsMonthlyTableRaws  ?? (_hcCapsMonthlyTableRaws = CreateObjectSet<HcCapsMonthlyTableRaw>("HcCapsMonthlyTableRaws")); }
        }
        private ObjectSet<HcCapsMonthlyTableRaw> _hcCapsMonthlyTableRaws;
    
        public virtual IObjectSet<GrandfatherHour> GrandfatherHours
        {
            get { return _grandfatherHours  ?? (_grandfatherHours = CreateObjectSet<GrandfatherHour>("GrandfatherHours")); }
        }
        private ObjectSet<GrandfatherHour> _grandfatherHours;
    
        public virtual IObjectSet<MhmCap> MhmCaps
        {
            get { return _mhmCaps  ?? (_mhmCaps = CreateObjectSet<MhmCap>("MhmCaps")); }
        }
        private ObjectSet<MhmCap> _mhmCaps;
    
        public virtual IObjectSet<HCWeeklyCap> HCWeeklyCaps
        {
            get { return _hCWeeklyCaps  ?? (_hCWeeklyCaps = CreateObjectSet<HCWeeklyCap>("HCWeeklyCaps")); }
        }
        private ObjectSet<HCWeeklyCap> _hCWeeklyCaps;
    
        public virtual IObjectSet<viewFinSumDet> viewFinSumDets
        {
            get { return _viewFinSumDets  ?? (_viewFinSumDets = CreateObjectSet<viewFinSumDet>("viewFinSumDets")); }
        }
        private ObjectSet<viewFinSumDet> _viewFinSumDets;
    
        public virtual IObjectSet<viewClientDetail> viewClientDetails
        {
            get { return _viewClientDetails  ?? (_viewClientDetails = CreateObjectSet<viewClientDetail>("viewClientDetails")); }
        }
        private ObjectSet<viewClientDetail> _viewClientDetails;
    
        public virtual IObjectSet<ClientEventsCountReport> ClientEventsCountReports
        {
            get { return _clientEventsCountReports  ?? (_clientEventsCountReports = CreateObjectSet<ClientEventsCountReport>("ClientEventsCountReports")); }
        }
        private ObjectSet<ClientEventsCountReport> _clientEventsCountReports;
    
        public virtual IObjectSet<GlobalString> GlobalStrings
        {
            get { return _globalStrings  ?? (_globalStrings = CreateObjectSet<GlobalString>("GlobalStrings")); }
        }
        private ObjectSet<GlobalString> _globalStrings;
    
        public virtual IObjectSet<CommunicationsPreference> CommunicationsPreferences
        {
            get { return _communicationsPreferences  ?? (_communicationsPreferences = CreateObjectSet<CommunicationsPreference>("CommunicationsPreferences")); }
        }
        private ObjectSet<CommunicationsPreference> _communicationsPreferences;
    
        public virtual IObjectSet<CareReceivingOption> CareReceivingOptions
        {
            get { return _careReceivingOptions  ?? (_careReceivingOptions = CreateObjectSet<CareReceivingOption>("CareReceivingOptions")); }
        }
        private ObjectSet<CareReceivingOption> _careReceivingOptions;
    
        public virtual IObjectSet<AgencyOverRideReason> AgencyOverRideReasons
        {
            get { return _agencyOverRideReasons  ?? (_agencyOverRideReasons = CreateObjectSet<AgencyOverRideReason>("AgencyOverRideReasons")); }
        }
        private ObjectSet<AgencyOverRideReason> _agencyOverRideReasons;
    
        public virtual IObjectSet<CfsEndDateReason> CfsEndDateReasons
        {
            get { return _cfsEndDateReasons  ?? (_cfsEndDateReasons = CreateObjectSet<CfsEndDateReason>("CfsEndDateReasons")); }
        }
        private ObjectSet<CfsEndDateReason> _cfsEndDateReasons;
    
        public virtual IObjectSet<CfsRow> CfsRows
        {
            get { return _cfsRows  ?? (_cfsRows = CreateObjectSet<CfsRow>("CfsRows")); }
        }
        private ObjectSet<CfsRow> _cfsRows;
    
        public virtual IObjectSet<CfsAmount> CfsAmounts
        {
            get { return _cfsAmounts  ?? (_cfsAmounts = CreateObjectSet<CfsAmount>("CfsAmounts")); }
        }
        private ObjectSet<CfsAmount> _cfsAmounts;
    
        public virtual IObjectSet<File> Files
        {
            get { return _files  ?? (_files = CreateObjectSet<File>("Files")); }
        }
        private ObjectSet<File> _files;
    
        public virtual IObjectSet<MainReportStatuses> MainReportStatuses
        {
            get { return _mainReportStatuses  ?? (_mainReportStatuses = CreateObjectSet<MainReportStatuses>("MainReportStatuses")); }
        }
        private ObjectSet<MainReportStatuses> _mainReportStatuses;
    
        public virtual IObjectSet<ValidExistingClientsView> ValidExistingClientsView
        {
            get { return _validExistingClientsView  ?? (_validExistingClientsView = CreateObjectSet<ValidExistingClientsView>("ValidExistingClientsView")); }
        }
        private ObjectSet<ValidExistingClientsView> _validExistingClientsView;
    
        public virtual IObjectSet<HcCapsTableRaw_Original> HcCapsTableRaw_Original
        {
            get { return _hcCapsTableRaw_Original  ?? (_hcCapsTableRaw_Original = CreateObjectSet<HcCapsTableRaw_Original>("HcCapsTableRaw_Original")); }
        }
        private ObjectSet<HcCapsTableRaw_Original> _hcCapsTableRaw_Original;

        #endregion

        #region Function Imports
        public ObjectResult<spFinancialSummarySummary_Result> spFinancialSummarySummary(string cur, Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<bool> submitted, Nullable<bool> showEstimated, Nullable<int> agencyId, Nullable<int> regionId, Nullable<int> countryId, Nullable<int> stateId, Nullable<int> serviceTypeId, Nullable<int> serviceId, Nullable<int> masterFundId, Nullable<int> fundId, Nullable<int> appId, Nullable<int> clientId, string term, string sortExp, Nullable<bool> sortAsc, Nullable<int> top, Nullable<int> skip, Nullable<int> userId)
        {
    
            ObjectParameter curParameter;
    
            if (cur != null)
            {
                curParameter = new ObjectParameter("cur", cur);
            }
            else
            {
                curParameter = new ObjectParameter("cur", typeof(string));
            }
    
            ObjectParameter startParameter;
    
            if (start.HasValue)
            {
                startParameter = new ObjectParameter("start", start);
            }
            else
            {
                startParameter = new ObjectParameter("start", typeof(System.DateTime));
            }
    
            ObjectParameter endParameter;
    
            if (end.HasValue)
            {
                endParameter = new ObjectParameter("end", end);
            }
            else
            {
                endParameter = new ObjectParameter("end", typeof(System.DateTime));
            }
    
            ObjectParameter submittedParameter;
    
            if (submitted.HasValue)
            {
                submittedParameter = new ObjectParameter("submitted", submitted);
            }
            else
            {
                submittedParameter = new ObjectParameter("submitted", typeof(bool));
            }
    
            ObjectParameter showEstimatedParameter;
    
            if (showEstimated.HasValue)
            {
                showEstimatedParameter = new ObjectParameter("showEstimated", showEstimated);
            }
            else
            {
                showEstimatedParameter = new ObjectParameter("showEstimated", typeof(bool));
            }
    
            ObjectParameter agencyIdParameter;
    
            if (agencyId.HasValue)
            {
                agencyIdParameter = new ObjectParameter("agencyId", agencyId);
            }
            else
            {
                agencyIdParameter = new ObjectParameter("agencyId", typeof(int));
            }
    
            ObjectParameter regionIdParameter;
    
            if (regionId.HasValue)
            {
                regionIdParameter = new ObjectParameter("regionId", regionId);
            }
            else
            {
                regionIdParameter = new ObjectParameter("regionId", typeof(int));
            }
    
            ObjectParameter countryIdParameter;
    
            if (countryId.HasValue)
            {
                countryIdParameter = new ObjectParameter("countryId", countryId);
            }
            else
            {
                countryIdParameter = new ObjectParameter("countryId", typeof(int));
            }
    
            ObjectParameter stateIdParameter;
    
            if (stateId.HasValue)
            {
                stateIdParameter = new ObjectParameter("stateId", stateId);
            }
            else
            {
                stateIdParameter = new ObjectParameter("stateId", typeof(int));
            }
    
            ObjectParameter serviceTypeIdParameter;
    
            if (serviceTypeId.HasValue)
            {
                serviceTypeIdParameter = new ObjectParameter("serviceTypeId", serviceTypeId);
            }
            else
            {
                serviceTypeIdParameter = new ObjectParameter("serviceTypeId", typeof(int));
            }
    
            ObjectParameter serviceIdParameter;
    
            if (serviceId.HasValue)
            {
                serviceIdParameter = new ObjectParameter("serviceId", serviceId);
            }
            else
            {
                serviceIdParameter = new ObjectParameter("serviceId", typeof(int));
            }
    
            ObjectParameter masterFundIdParameter;
    
            if (masterFundId.HasValue)
            {
                masterFundIdParameter = new ObjectParameter("masterFundId", masterFundId);
            }
            else
            {
                masterFundIdParameter = new ObjectParameter("masterFundId", typeof(int));
            }
    
            ObjectParameter fundIdParameter;
    
            if (fundId.HasValue)
            {
                fundIdParameter = new ObjectParameter("fundId", fundId);
            }
            else
            {
                fundIdParameter = new ObjectParameter("fundId", typeof(int));
            }
    
            ObjectParameter appIdParameter;
    
            if (appId.HasValue)
            {
                appIdParameter = new ObjectParameter("appId", appId);
            }
            else
            {
                appIdParameter = new ObjectParameter("appId", typeof(int));
            }
    
            ObjectParameter clientIdParameter;
    
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("clientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("clientId", typeof(int));
            }
    
            ObjectParameter termParameter;
    
            if (term != null)
            {
                termParameter = new ObjectParameter("term", term);
            }
            else
            {
                termParameter = new ObjectParameter("term", typeof(string));
            }
    
            ObjectParameter sortExpParameter;
    
            if (sortExp != null)
            {
                sortExpParameter = new ObjectParameter("sortExp", sortExp);
            }
            else
            {
                sortExpParameter = new ObjectParameter("sortExp", typeof(string));
            }
    
            ObjectParameter sortAscParameter;
    
            if (sortAsc.HasValue)
            {
                sortAscParameter = new ObjectParameter("sortAsc", sortAsc);
            }
            else
            {
                sortAscParameter = new ObjectParameter("sortAsc", typeof(bool));
            }
    
            ObjectParameter topParameter;
    
            if (top.HasValue)
            {
                topParameter = new ObjectParameter("top", top);
            }
            else
            {
                topParameter = new ObjectParameter("top", typeof(int));
            }
    
            ObjectParameter skipParameter;
    
            if (skip.HasValue)
            {
                skipParameter = new ObjectParameter("skip", skip);
            }
            else
            {
                skipParameter = new ObjectParameter("skip", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
            return base.ExecuteFunction<spFinancialSummarySummary_Result>("spFinancialSummarySummary", curParameter, startParameter, endParameter, submittedParameter, showEstimatedParameter, agencyIdParameter, regionIdParameter, countryIdParameter, stateIdParameter, serviceTypeIdParameter, serviceIdParameter, masterFundIdParameter, fundIdParameter, appIdParameter, clientIdParameter, termParameter, sortExpParameter, sortAscParameter, topParameter, skipParameter, userIdParameter);
        }
        public ObjectResult<spFinancialSummaryOverview_Result> spFinancialSummaryOverview(string cur, Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<bool> submitted, Nullable<bool> showEstimated, Nullable<int> agencyId, Nullable<int> regionId, Nullable<int> countryId, Nullable<int> stateId, Nullable<int> serviceTypeId, Nullable<int> serviceId, Nullable<int> masterFundId, Nullable<int> fundId, Nullable<int> appId, Nullable<int> clientId, string term, string sortExp, Nullable<bool> sortAsc, Nullable<int> top, Nullable<int> skip, Nullable<int> userId)
        {
    
            ObjectParameter curParameter;
    
            if (cur != null)
            {
                curParameter = new ObjectParameter("cur", cur);
            }
            else
            {
                curParameter = new ObjectParameter("cur", typeof(string));
            }
    
            ObjectParameter startParameter;
    
            if (start.HasValue)
            {
                startParameter = new ObjectParameter("start", start);
            }
            else
            {
                startParameter = new ObjectParameter("start", typeof(System.DateTime));
            }
    
            ObjectParameter endParameter;
    
            if (end.HasValue)
            {
                endParameter = new ObjectParameter("end", end);
            }
            else
            {
                endParameter = new ObjectParameter("end", typeof(System.DateTime));
            }
    
            ObjectParameter submittedParameter;
    
            if (submitted.HasValue)
            {
                submittedParameter = new ObjectParameter("submitted", submitted);
            }
            else
            {
                submittedParameter = new ObjectParameter("submitted", typeof(bool));
            }
    
            ObjectParameter showEstimatedParameter;
    
            if (showEstimated.HasValue)
            {
                showEstimatedParameter = new ObjectParameter("showEstimated", showEstimated);
            }
            else
            {
                showEstimatedParameter = new ObjectParameter("showEstimated", typeof(bool));
            }
    
            ObjectParameter agencyIdParameter;
    
            if (agencyId.HasValue)
            {
                agencyIdParameter = new ObjectParameter("agencyId", agencyId);
            }
            else
            {
                agencyIdParameter = new ObjectParameter("agencyId", typeof(int));
            }
    
            ObjectParameter regionIdParameter;
    
            if (regionId.HasValue)
            {
                regionIdParameter = new ObjectParameter("regionId", regionId);
            }
            else
            {
                regionIdParameter = new ObjectParameter("regionId", typeof(int));
            }
    
            ObjectParameter countryIdParameter;
    
            if (countryId.HasValue)
            {
                countryIdParameter = new ObjectParameter("countryId", countryId);
            }
            else
            {
                countryIdParameter = new ObjectParameter("countryId", typeof(int));
            }
    
            ObjectParameter stateIdParameter;
    
            if (stateId.HasValue)
            {
                stateIdParameter = new ObjectParameter("stateId", stateId);
            }
            else
            {
                stateIdParameter = new ObjectParameter("stateId", typeof(int));
            }
    
            ObjectParameter serviceTypeIdParameter;
    
            if (serviceTypeId.HasValue)
            {
                serviceTypeIdParameter = new ObjectParameter("serviceTypeId", serviceTypeId);
            }
            else
            {
                serviceTypeIdParameter = new ObjectParameter("serviceTypeId", typeof(int));
            }
    
            ObjectParameter serviceIdParameter;
    
            if (serviceId.HasValue)
            {
                serviceIdParameter = new ObjectParameter("serviceId", serviceId);
            }
            else
            {
                serviceIdParameter = new ObjectParameter("serviceId", typeof(int));
            }
    
            ObjectParameter masterFundIdParameter;
    
            if (masterFundId.HasValue)
            {
                masterFundIdParameter = new ObjectParameter("masterFundId", masterFundId);
            }
            else
            {
                masterFundIdParameter = new ObjectParameter("masterFundId", typeof(int));
            }
    
            ObjectParameter fundIdParameter;
    
            if (fundId.HasValue)
            {
                fundIdParameter = new ObjectParameter("fundId", fundId);
            }
            else
            {
                fundIdParameter = new ObjectParameter("fundId", typeof(int));
            }
    
            ObjectParameter appIdParameter;
    
            if (appId.HasValue)
            {
                appIdParameter = new ObjectParameter("appId", appId);
            }
            else
            {
                appIdParameter = new ObjectParameter("appId", typeof(int));
            }
    
            ObjectParameter clientIdParameter;
    
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("clientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("clientId", typeof(int));
            }
    
            ObjectParameter termParameter;
    
            if (term != null)
            {
                termParameter = new ObjectParameter("term", term);
            }
            else
            {
                termParameter = new ObjectParameter("term", typeof(string));
            }
    
            ObjectParameter sortExpParameter;
    
            if (sortExp != null)
            {
                sortExpParameter = new ObjectParameter("sortExp", sortExp);
            }
            else
            {
                sortExpParameter = new ObjectParameter("sortExp", typeof(string));
            }
    
            ObjectParameter sortAscParameter;
    
            if (sortAsc.HasValue)
            {
                sortAscParameter = new ObjectParameter("sortAsc", sortAsc);
            }
            else
            {
                sortAscParameter = new ObjectParameter("sortAsc", typeof(bool));
            }
    
            ObjectParameter topParameter;
    
            if (top.HasValue)
            {
                topParameter = new ObjectParameter("top", top);
            }
            else
            {
                topParameter = new ObjectParameter("top", typeof(int));
            }
    
            ObjectParameter skipParameter;
    
            if (skip.HasValue)
            {
                skipParameter = new ObjectParameter("skip", skip);
            }
            else
            {
                skipParameter = new ObjectParameter("skip", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
            return base.ExecuteFunction<spFinancialSummaryOverview_Result>("spFinancialSummaryOverview", curParameter, startParameter, endParameter, submittedParameter, showEstimatedParameter, agencyIdParameter, regionIdParameter, countryIdParameter, stateIdParameter, serviceTypeIdParameter, serviceIdParameter, masterFundIdParameter, fundIdParameter, appIdParameter, clientIdParameter, termParameter, sortExpParameter, sortAscParameter, topParameter, skipParameter, userIdParameter);
        }
        public ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
    
            ObjectParameter diagramnameParameter;
    
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(string));
            }
    
            ObjectParameter owner_idParameter;
    
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(int));
            }
            return base.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
        public ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
    
            ObjectParameter diagramnameParameter;
    
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(string));
            }
    
            ObjectParameter owner_idParameter;
    
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(int));
            }
            return base.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
        public ObjectResult<spSrHcDetailsWeekly_Result> spSrHcDetailsWeekly(Nullable<int> userId, Nullable<int> subReportId, string filterClientName, Nullable<int> filterClientId, Nullable<bool> filterReportedOnly, string sort, Nullable<bool> sortAsc, string ssearch, Nullable<int> skip, Nullable<int> take, ObjectParameter displayCount, ObjectParameter totalCount, ObjectParameter cur)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
    
            ObjectParameter subReportIdParameter;
    
            if (subReportId.HasValue)
            {
                subReportIdParameter = new ObjectParameter("subReportId", subReportId);
            }
            else
            {
                subReportIdParameter = new ObjectParameter("subReportId", typeof(int));
            }
    
            ObjectParameter filterClientNameParameter;
    
            if (filterClientName != null)
            {
                filterClientNameParameter = new ObjectParameter("filterClientName", filterClientName);
            }
            else
            {
                filterClientNameParameter = new ObjectParameter("filterClientName", typeof(string));
            }
    
            ObjectParameter filterClientIdParameter;
    
            if (filterClientId.HasValue)
            {
                filterClientIdParameter = new ObjectParameter("filterClientId", filterClientId);
            }
            else
            {
                filterClientIdParameter = new ObjectParameter("filterClientId", typeof(int));
            }
    
            ObjectParameter filterReportedOnlyParameter;
    
            if (filterReportedOnly.HasValue)
            {
                filterReportedOnlyParameter = new ObjectParameter("filterReportedOnly", filterReportedOnly);
            }
            else
            {
                filterReportedOnlyParameter = new ObjectParameter("filterReportedOnly", typeof(bool));
            }
    
            ObjectParameter sortParameter;
    
            if (sort != null)
            {
                sortParameter = new ObjectParameter("sort", sort);
            }
            else
            {
                sortParameter = new ObjectParameter("sort", typeof(string));
            }
    
            ObjectParameter sortAscParameter;
    
            if (sortAsc.HasValue)
            {
                sortAscParameter = new ObjectParameter("sortAsc", sortAsc);
            }
            else
            {
                sortAscParameter = new ObjectParameter("sortAsc", typeof(bool));
            }
    
            ObjectParameter ssearchParameter;
    
            if (ssearch != null)
            {
                ssearchParameter = new ObjectParameter("ssearch", ssearch);
            }
            else
            {
                ssearchParameter = new ObjectParameter("ssearch", typeof(string));
            }
    
            ObjectParameter skipParameter;
    
            if (skip.HasValue)
            {
                skipParameter = new ObjectParameter("skip", skip);
            }
            else
            {
                skipParameter = new ObjectParameter("skip", typeof(int));
            }
    
            ObjectParameter takeParameter;
    
            if (take.HasValue)
            {
                takeParameter = new ObjectParameter("take", take);
            }
            else
            {
                takeParameter = new ObjectParameter("take", typeof(int));
            }
            return base.ExecuteFunction<spSrHcDetailsWeekly_Result>("spSrHcDetailsWeekly", userIdParameter, subReportIdParameter, filterClientNameParameter, filterClientIdParameter, filterReportedOnlyParameter, sortParameter, sortAscParameter, ssearchParameter, skipParameter, takeParameter, displayCount, totalCount, cur);
        }
        public ObjectResult<spHcCapsTableRaw_Result> spHcCapsTableRaw(Nullable<int> clientid, Nullable<System.DateTime> checkPeriodStart, Nullable<System.DateTime> checkPeriodEnd)
        {
    
            ObjectParameter clientidParameter;
    
            if (clientid.HasValue)
            {
                clientidParameter = new ObjectParameter("clientid", clientid);
            }
            else
            {
                clientidParameter = new ObjectParameter("clientid", typeof(int));
            }
    
            ObjectParameter checkPeriodStartParameter;
    
            if (checkPeriodStart.HasValue)
            {
                checkPeriodStartParameter = new ObjectParameter("checkPeriodStart", checkPeriodStart);
            }
            else
            {
                checkPeriodStartParameter = new ObjectParameter("checkPeriodStart", typeof(System.DateTime));
            }
    
            ObjectParameter checkPeriodEndParameter;
    
            if (checkPeriodEnd.HasValue)
            {
                checkPeriodEndParameter = new ObjectParameter("checkPeriodEnd", checkPeriodEnd);
            }
            else
            {
                checkPeriodEndParameter = new ObjectParameter("checkPeriodEnd", typeof(System.DateTime));
            }
            return base.ExecuteFunction<spHcCapsTableRaw_Result>("spHcCapsTableRaw", clientidParameter, checkPeriodStartParameter, checkPeriodEndParameter);
        }
        public ObjectResult<spValidateMrHc_Result> spValidateMrHc(Nullable<int> mainreportid)
        {
    
            ObjectParameter mainreportidParameter;
    
            if (mainreportid.HasValue)
            {
                mainreportidParameter = new ObjectParameter("mainreportid", mainreportid);
            }
            else
            {
                mainreportidParameter = new ObjectParameter("mainreportid", typeof(int));
            }
            return base.ExecuteFunction<spValidateMrHc_Result>("spValidateMrHc", mainreportidParameter);
        }
        public ObjectResult<spValidateMrHcD_Result> spValidateMrHcD(Nullable<int> mainreportid)
        {
    
            ObjectParameter mainreportidParameter;
    
            if (mainreportid.HasValue)
            {
                mainreportidParameter = new ObjectParameter("mainreportid", mainreportid);
            }
            else
            {
                mainreportidParameter = new ObjectParameter("mainreportid", typeof(int));
            }
            return base.ExecuteFunction<spValidateMrHcD_Result>("spValidateMrHcD", mainreportidParameter);
        }
        public ObjectResult<ImportNewClientsProc_Result> ImportNewClientsProc(Nullable<System.Guid> id, Nullable<int> agencyId, Nullable<int> agencyGroupId, Nullable<int> regionId)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(System.Guid));
            }
    
            ObjectParameter agencyIdParameter;
    
            if (agencyId.HasValue)
            {
                agencyIdParameter = new ObjectParameter("agencyId", agencyId);
            }
            else
            {
                agencyIdParameter = new ObjectParameter("agencyId", typeof(int));
            }
    
            ObjectParameter agencyGroupIdParameter;
    
            if (agencyGroupId.HasValue)
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", agencyGroupId);
            }
            else
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", typeof(int));
            }
    
            ObjectParameter regionIdParameter;
    
            if (regionId.HasValue)
            {
                regionIdParameter = new ObjectParameter("regionId", regionId);
            }
            else
            {
                regionIdParameter = new ObjectParameter("regionId", typeof(int));
            }
            return base.ExecuteFunction<ImportNewClientsProc_Result>("ImportNewClientsProc", idParameter, agencyIdParameter, agencyGroupIdParameter, regionIdParameter);
        }
        public ObjectResult<Nullable<int>> ImportMasterIds(Nullable<System.Guid> importId, Nullable<int> userId)
        {
    
            ObjectParameter importIdParameter;
    
            if (importId.HasValue)
            {
                importIdParameter = new ObjectParameter("ImportId", importId);
            }
            else
            {
                importIdParameter = new ObjectParameter("ImportId", typeof(System.Guid));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportMasterIds", importIdParameter, userIdParameter);
        }
        public ObjectResult<ImportClientFundStatusProc_Result> ImportClientFundStatusProc(Nullable<System.Guid> importId)
        {
    
            ObjectParameter importIdParameter;
    
            if (importId.HasValue)
            {
                importIdParameter = new ObjectParameter("importId", importId);
            }
            else
            {
                importIdParameter = new ObjectParameter("importId", typeof(System.Guid));
            }
            return base.ExecuteFunction<ImportClientFundStatusProc_Result>("ImportClientFundStatusProc", importIdParameter);
        }
        public ObjectResult<ImportExistingClientsProc_Result> ImportExistingClientsProc(Nullable<System.Guid> id, Nullable<int> agencyId, Nullable<int> agencyGroupId, Nullable<int> regionId, Nullable<int> userId)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(System.Guid));
            }
    
            ObjectParameter agencyIdParameter;
    
            if (agencyId.HasValue)
            {
                agencyIdParameter = new ObjectParameter("agencyId", agencyId);
            }
            else
            {
                agencyIdParameter = new ObjectParameter("agencyId", typeof(int));
            }
    
            ObjectParameter agencyGroupIdParameter;
    
            if (agencyGroupId.HasValue)
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", agencyGroupId);
            }
            else
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", typeof(int));
            }
    
            ObjectParameter regionIdParameter;
    
            if (regionId.HasValue)
            {
                regionIdParameter = new ObjectParameter("regionId", regionId);
            }
            else
            {
                regionIdParameter = new ObjectParameter("regionId", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
            return base.ExecuteFunction<ImportExistingClientsProc_Result>("ImportExistingClientsProc", idParameter, agencyIdParameter, agencyGroupIdParameter, regionIdParameter, userIdParameter);
        }
        public ObjectResult<Nullable<int>> ImportFS(Nullable<System.Guid> id, Nullable<int> agencyId, Nullable<int> agencyGroupId, Nullable<int> regionId)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(System.Guid));
            }
    
            ObjectParameter agencyIdParameter;
    
            if (agencyId.HasValue)
            {
                agencyIdParameter = new ObjectParameter("agencyId", agencyId);
            }
            else
            {
                agencyIdParameter = new ObjectParameter("agencyId", typeof(int));
            }
    
            ObjectParameter agencyGroupIdParameter;
    
            if (agencyGroupId.HasValue)
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", agencyGroupId);
            }
            else
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", typeof(int));
            }
    
            ObjectParameter regionIdParameter;
    
            if (regionId.HasValue)
            {
                regionIdParameter = new ObjectParameter("regionId", regionId);
            }
            else
            {
                regionIdParameter = new ObjectParameter("regionId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportFS", idParameter, agencyIdParameter, agencyGroupIdParameter, regionIdParameter);
        }
        public ObjectResult<Nullable<int>> ImportHcepProc(Nullable<System.Guid> id, Nullable<int> agencyId, Nullable<int> agencyGroupId, Nullable<int> regionId)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(System.Guid));
            }
    
            ObjectParameter agencyIdParameter;
    
            if (agencyId.HasValue)
            {
                agencyIdParameter = new ObjectParameter("agencyId", agencyId);
            }
            else
            {
                agencyIdParameter = new ObjectParameter("agencyId", typeof(int));
            }
    
            ObjectParameter agencyGroupIdParameter;
    
            if (agencyGroupId.HasValue)
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", agencyGroupId);
            }
            else
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", typeof(int));
            }
    
            ObjectParameter regionIdParameter;
    
            if (regionId.HasValue)
            {
                regionIdParameter = new ObjectParameter("regionId", regionId);
            }
            else
            {
                regionIdParameter = new ObjectParameter("regionId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportHcepProc", idParameter, agencyIdParameter, agencyGroupIdParameter, regionIdParameter);
        }
        public ObjectResult<CfsLevelChangesInGivenMonth_Result> CfsLevelChangesInGivenMonth(Nullable<System.DateTime> monthStart, Nullable<System.DateTime> nextMonth)
        {
    
            ObjectParameter monthStartParameter;
    
            if (monthStart.HasValue)
            {
                monthStartParameter = new ObjectParameter("monthStart", monthStart);
            }
            else
            {
                monthStartParameter = new ObjectParameter("monthStart", typeof(System.DateTime));
            }
    
            ObjectParameter nextMonthParameter;
    
            if (nextMonth.HasValue)
            {
                nextMonthParameter = new ObjectParameter("nextMonth", nextMonth);
            }
            else
            {
                nextMonthParameter = new ObjectParameter("nextMonth", typeof(System.DateTime));
            }
            return base.ExecuteFunction<CfsLevelChangesInGivenMonth_Result>("CfsLevelChangesInGivenMonth", monthStartParameter, nextMonthParameter);
        }
        public ObjectResult<Nullable<int>> CriHcImport(Nullable<System.Guid> id)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("CriHcImport", idParameter);
        }
        public ObjectResult<Nullable<int>> DeleteClientReport(Nullable<int> subReportId)
        {
    
            ObjectParameter subReportIdParameter;
    
            if (subReportId.HasValue)
            {
                subReportIdParameter = new ObjectParameter("SubReportId", subReportId);
            }
            else
            {
                subReportIdParameter = new ObjectParameter("SubReportId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteClientReport", subReportIdParameter);
        }
        public ObjectResult<Nullable<int>> DeleteDCCReport(Nullable<int> subReportId)
        {
    
            ObjectParameter subReportIdParameter;
    
            if (subReportId.HasValue)
            {
                subReportIdParameter = new ObjectParameter("SubReportId", subReportId);
            }
            else
            {
                subReportIdParameter = new ObjectParameter("SubReportId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteDCCReport", subReportIdParameter);
        }
        public ObjectResult<Nullable<int>> DeleteEmergencyReport(Nullable<int> subReportId)
        {
    
            ObjectParameter subReportIdParameter;
    
            if (subReportId.HasValue)
            {
                subReportIdParameter = new ObjectParameter("SubReportId", subReportId);
            }
            else
            {
                subReportIdParameter = new ObjectParameter("SubReportId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteEmergencyReport", subReportIdParameter);
        }
        public ObjectResult<Nullable<int>> DeleteMedicalEquipmentReport(Nullable<int> subReportId)
        {
    
            ObjectParameter subReportIdParameter;
    
            if (subReportId.HasValue)
            {
                subReportIdParameter = new ObjectParameter("SubReportId", subReportId);
            }
            else
            {
                subReportIdParameter = new ObjectParameter("SubReportId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteMedicalEquipmentReport", subReportIdParameter);
        }
        public ObjectResult<Nullable<int>> DeleteMhmReport(Nullable<int> subReportId)
        {
    
            ObjectParameter subReportIdParameter;
    
            if (subReportId.HasValue)
            {
                subReportIdParameter = new ObjectParameter("SubReportId", subReportId);
            }
            else
            {
                subReportIdParameter = new ObjectParameter("SubReportId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteMhmReport", subReportIdParameter);
        }
        public ObjectResult<Nullable<int>> DeleteProgramCostsReport(Nullable<int> subReportId)
        {
    
            ObjectParameter subReportIdParameter;
    
            if (subReportId.HasValue)
            {
                subReportIdParameter = new ObjectParameter("SubReportId", subReportId);
            }
            else
            {
                subReportIdParameter = new ObjectParameter("SubReportId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteProgramCostsReport", subReportIdParameter);
        }
        public ObjectResult<Nullable<int>> DeleteSCReport(Nullable<int> subReportId)
        {
    
            ObjectParameter subReportIdParameter;
    
            if (subReportId.HasValue)
            {
                subReportIdParameter = new ObjectParameter("SubReportId", subReportId);
            }
            else
            {
                subReportIdParameter = new ObjectParameter("SubReportId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteSCReport", subReportIdParameter);
        }
        public ObjectResult<Nullable<int>> DeleteSKReport(Nullable<int> subReportId)
        {
    
            ObjectParameter subReportIdParameter;
    
            if (subReportId.HasValue)
            {
                subReportIdParameter = new ObjectParameter("SubReportId", subReportId);
            }
            else
            {
                subReportIdParameter = new ObjectParameter("SubReportId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteSKReport", subReportIdParameter);
        }
        public ObjectResult<Nullable<int>> ImportCfsProc(Nullable<System.Guid> id, Nullable<int> agencyId, Nullable<int> agencyGroupId, Nullable<int> regionId)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(System.Guid));
            }
    
            ObjectParameter agencyIdParameter;
    
            if (agencyId.HasValue)
            {
                agencyIdParameter = new ObjectParameter("agencyId", agencyId);
            }
            else
            {
                agencyIdParameter = new ObjectParameter("agencyId", typeof(int));
            }
    
            ObjectParameter agencyGroupIdParameter;
    
            if (agencyGroupId.HasValue)
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", agencyGroupId);
            }
            else
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", typeof(int));
            }
    
            ObjectParameter regionIdParameter;
    
            if (regionId.HasValue)
            {
                regionIdParameter = new ObjectParameter("regionId", regionId);
            }
            else
            {
                regionIdParameter = new ObjectParameter("regionId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportCfsProc", idParameter, agencyIdParameter, agencyGroupIdParameter, regionIdParameter);
        }
        public ObjectResult<Nullable<int>> ImportCri(Nullable<System.Guid> id)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportCri", idParameter);
        }
        public ObjectResult<Nullable<int>> ImportCriClientEventsCount(Nullable<System.Guid> id)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportCriClientEventsCount", idParameter);
        }
        public ObjectResult<Nullable<int>> ImportCriEmergency(Nullable<System.Guid> id)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportCriEmergency", idParameter);
        }
        public ObjectResult<Nullable<int>> ImportCriSoupKitchens(Nullable<System.Guid> id)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportCriSoupKitchens", idParameter);
        }
        public ObjectResult<Nullable<int>> ImportGovHcHoursCancelProc(Nullable<System.Guid> importId)
        {
    
            ObjectParameter importIdParameter;
    
            if (importId.HasValue)
            {
                importIdParameter = new ObjectParameter("ImportId", importId);
            }
            else
            {
                importIdParameter = new ObjectParameter("ImportId", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportGovHcHoursCancelProc", importIdParameter);
        }
        public ObjectResult<Nullable<int>> ImportUnmetNeedsCancelProc(Nullable<System.Guid> importId)
        {
    
            ObjectParameter importIdParameter;
    
            if (importId.HasValue)
            {
                importIdParameter = new ObjectParameter("ImportId", importId);
            }
            else
            {
                importIdParameter = new ObjectParameter("ImportId", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportUnmetNeedsCancelProc", importIdParameter);
        }
        public ObjectResult<Nullable<int>> ImportUnmetNeedsOtherCancelProc(Nullable<System.Guid> importId)
        {
    
            ObjectParameter importIdParameter;
    
            if (importId.HasValue)
            {
                importIdParameter = new ObjectParameter("ImportId", importId);
            }
            else
            {
                importIdParameter = new ObjectParameter("ImportId", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportUnmetNeedsOtherCancelProc", importIdParameter);
        }
        public ObjectResult<Nullable<int>> ImportCriSupportiveCommunities(Nullable<System.Guid> id)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportCriSupportiveCommunities", idParameter);
        }
        public ObjectResult<Nullable<int>> ImportGovHcHoursProc(Nullable<System.Guid> importId, Nullable<int> userId)
        {
    
            ObjectParameter importIdParameter;
    
            if (importId.HasValue)
            {
                importIdParameter = new ObjectParameter("ImportId", importId);
            }
            else
            {
                importIdParameter = new ObjectParameter("ImportId", typeof(System.Guid));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportGovHcHoursProc", importIdParameter, userIdParameter);
        }
        public ObjectResult<Nullable<int>> ImportUnmetNeedsOtherNewProc(Nullable<System.Guid> importId, Nullable<int> userId)
        {
    
            ObjectParameter importIdParameter;
    
            if (importId.HasValue)
            {
                importIdParameter = new ObjectParameter("ImportId", importId);
            }
            else
            {
                importIdParameter = new ObjectParameter("ImportId", typeof(System.Guid));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportUnmetNeedsOtherNewProc", importIdParameter, userIdParameter);
        }
        public ObjectResult<Nullable<int>> ImportUnmetNeedsOtherProc(Nullable<System.Guid> importId, Nullable<int> userId)
        {
    
            ObjectParameter importIdParameter;
    
            if (importId.HasValue)
            {
                importIdParameter = new ObjectParameter("ImportId", importId);
            }
            else
            {
                importIdParameter = new ObjectParameter("ImportId", typeof(System.Guid));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportUnmetNeedsOtherProc", importIdParameter, userIdParameter);
        }
        public ObjectResult<Nullable<int>> ImportUnmetNeedsProc(Nullable<System.Guid> importId, Nullable<int> userId)
        {
    
            ObjectParameter importIdParameter;
    
            if (importId.HasValue)
            {
                importIdParameter = new ObjectParameter("ImportId", importId);
            }
            else
            {
                importIdParameter = new ObjectParameter("ImportId", typeof(System.Guid));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("ImportUnmetNeedsProc", importIdParameter, userIdParameter);
        }
        public ObjectResult<InsertClient_Result> InsertClient(Nullable<int> id, string firstName, string lastName, Nullable<System.DateTime> joinDate, Nullable<int> approvalStatusId, Nullable<int> updatedById, Nullable<System.DateTime> updatedAt, Nullable<System.DateTime> createdAt)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(int));
            }
    
            ObjectParameter firstNameParameter;
    
            if (firstName != null)
            {
                firstNameParameter = new ObjectParameter("FirstName", firstName);
            }
            else
            {
                firstNameParameter = new ObjectParameter("FirstName", typeof(string));
            }
    
            ObjectParameter lastNameParameter;
    
            if (lastName != null)
            {
                lastNameParameter = new ObjectParameter("LastName", lastName);
            }
            else
            {
                lastNameParameter = new ObjectParameter("LastName", typeof(string));
            }
    
            ObjectParameter joinDateParameter;
    
            if (joinDate.HasValue)
            {
                joinDateParameter = new ObjectParameter("JoinDate", joinDate);
            }
            else
            {
                joinDateParameter = new ObjectParameter("JoinDate", typeof(System.DateTime));
            }
    
            ObjectParameter approvalStatusIdParameter;
    
            if (approvalStatusId.HasValue)
            {
                approvalStatusIdParameter = new ObjectParameter("ApprovalStatusId", approvalStatusId);
            }
            else
            {
                approvalStatusIdParameter = new ObjectParameter("ApprovalStatusId", typeof(int));
            }
    
            ObjectParameter updatedByIdParameter;
    
            if (updatedById.HasValue)
            {
                updatedByIdParameter = new ObjectParameter("UpdatedById", updatedById);
            }
            else
            {
                updatedByIdParameter = new ObjectParameter("UpdatedById", typeof(int));
            }
    
            ObjectParameter updatedAtParameter;
    
            if (updatedAt.HasValue)
            {
                updatedAtParameter = new ObjectParameter("UpdatedAt", updatedAt);
            }
            else
            {
                updatedAtParameter = new ObjectParameter("UpdatedAt", typeof(System.DateTime));
            }
    
            ObjectParameter createdAtParameter;
    
            if (createdAt.HasValue)
            {
                createdAtParameter = new ObjectParameter("CreatedAt", createdAt);
            }
            else
            {
                createdAtParameter = new ObjectParameter("CreatedAt", typeof(System.DateTime));
            }
            return base.ExecuteFunction<InsertClient_Result>("InsertClient", idParameter, firstNameParameter, lastNameParameter, joinDateParameter, approvalStatusIdParameter, updatedByIdParameter, updatedAtParameter, createdAtParameter);
        }
        public ObjectResult<NewClientsExport_Result> NewClientsExport(Nullable<int> approvalStatusId)
        {
    
            ObjectParameter approvalStatusIdParameter;
    
            if (approvalStatusId.HasValue)
            {
                approvalStatusIdParameter = new ObjectParameter("approvalStatusId", approvalStatusId);
            }
            else
            {
                approvalStatusIdParameter = new ObjectParameter("approvalStatusId", typeof(int));
            }
            return base.ExecuteFunction<NewClientsExport_Result>("NewClientsExport", approvalStatusIdParameter);
        }
        public ObjectResult<Over105HcHours_Result> Over105HcHours(Nullable<int> regionId, Nullable<int> agencyGroupId, Nullable<int> year, string term, Nullable<int> top, Nullable<int> skip, Nullable<int> userId)
        {
    
            ObjectParameter regionIdParameter;
    
            if (regionId.HasValue)
            {
                regionIdParameter = new ObjectParameter("regionId", regionId);
            }
            else
            {
                regionIdParameter = new ObjectParameter("regionId", typeof(int));
            }
    
            ObjectParameter agencyGroupIdParameter;
    
            if (agencyGroupId.HasValue)
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", agencyGroupId);
            }
            else
            {
                agencyGroupIdParameter = new ObjectParameter("agencyGroupId", typeof(int));
            }
    
            ObjectParameter yearParameter;
    
            if (year.HasValue)
            {
                yearParameter = new ObjectParameter("year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("year", typeof(int));
            }
    
            ObjectParameter termParameter;
    
            if (term != null)
            {
                termParameter = new ObjectParameter("term", term);
            }
            else
            {
                termParameter = new ObjectParameter("term", typeof(string));
            }
    
            ObjectParameter topParameter;
    
            if (top.HasValue)
            {
                topParameter = new ObjectParameter("top", top);
            }
            else
            {
                topParameter = new ObjectParameter("top", typeof(int));
            }
    
            ObjectParameter skipParameter;
    
            if (skip.HasValue)
            {
                skipParameter = new ObjectParameter("skip", skip);
            }
            else
            {
                skipParameter = new ObjectParameter("skip", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
            return base.ExecuteFunction<Over105HcHours_Result>("Over105HcHours", regionIdParameter, agencyGroupIdParameter, yearParameter, termParameter, topParameter, skipParameter, userIdParameter);
        }
        public ObjectResult<Nullable<int>> PopulateScReport(Nullable<int> subReportId)
        {
    
            ObjectParameter subReportIdParameter;
    
            if (subReportId.HasValue)
            {
                subReportIdParameter = new ObjectParameter("subReportId", subReportId);
            }
            else
            {
                subReportIdParameter = new ObjectParameter("subReportId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("PopulateScReport", subReportIdParameter);
        }
        public ObjectResult<Nullable<int>> ProcessNeedToApplyClients()
        {
            return base.ExecuteFunction<Nullable<int>>("ProcessNeedToApplyClients");
        }
        public ObjectResult<Nullable<int>> ProcessNoContact()
        {
            return base.ExecuteFunction<Nullable<int>>("ProcessNoContact");
        }
        public ObjectResult<Nullable<int>> ProcessRejectedClients()
        {
            return base.ExecuteFunction<Nullable<int>>("ProcessRejectedClients");
        }
        public ObjectResult<sp_Reporting_HcHours_Result> sp_Reporting_HcHours(Nullable<int> regionId, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
    
            ObjectParameter regionIdParameter;
    
            if (regionId.HasValue)
            {
                regionIdParameter = new ObjectParameter("RegionId", regionId);
            }
            else
            {
                regionIdParameter = new ObjectParameter("RegionId", typeof(int));
            }
    
            ObjectParameter fromParameter;
    
            if (from.HasValue)
            {
                fromParameter = new ObjectParameter("From", from);
            }
            else
            {
                fromParameter = new ObjectParameter("From", typeof(System.DateTime));
            }
    
            ObjectParameter toParameter;
    
            if (to.HasValue)
            {
                toParameter = new ObjectParameter("To", to);
            }
            else
            {
                toParameter = new ObjectParameter("To", typeof(System.DateTime));
            }
            return base.ExecuteFunction<sp_Reporting_HcHours_Result>("sp_Reporting_HcHours", regionIdParameter, fromParameter, toParameter);
        }
        public ObjectResult<spAgencyReportingHomecareDetails_Result> spAgencyReportingHomecareDetails(string cur, Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<bool> submitted, Nullable<int> agencyId, Nullable<int> regionId, Nullable<int> countryId, Nullable<int> stateId, Nullable<int> serviceId, Nullable<int> masterFundId, Nullable<int> fundId, Nullable<int> appId, Nullable<int> clientId, string term, string sortExp, Nullable<bool> sortAsc, Nullable<int> top, Nullable<int> skip, Nullable<int> userId)
        {
    
            ObjectParameter curParameter;
    
            if (cur != null)
            {
                curParameter = new ObjectParameter("cur", cur);
            }
            else
            {
                curParameter = new ObjectParameter("cur", typeof(string));
            }
    
            ObjectParameter startParameter;
    
            if (start.HasValue)
            {
                startParameter = new ObjectParameter("start", start);
            }
            else
            {
                startParameter = new ObjectParameter("start", typeof(System.DateTime));
            }
    
            ObjectParameter endParameter;
    
            if (end.HasValue)
            {
                endParameter = new ObjectParameter("end", end);
            }
            else
            {
                endParameter = new ObjectParameter("end", typeof(System.DateTime));
            }
    
            ObjectParameter submittedParameter;
    
            if (submitted.HasValue)
            {
                submittedParameter = new ObjectParameter("submitted", submitted);
            }
            else
            {
                submittedParameter = new ObjectParameter("submitted", typeof(bool));
            }
    
            ObjectParameter agencyIdParameter;
    
            if (agencyId.HasValue)
            {
                agencyIdParameter = new ObjectParameter("agencyId", agencyId);
            }
            else
            {
                agencyIdParameter = new ObjectParameter("agencyId", typeof(int));
            }
    
            ObjectParameter regionIdParameter;
    
            if (regionId.HasValue)
            {
                regionIdParameter = new ObjectParameter("regionId", regionId);
            }
            else
            {
                regionIdParameter = new ObjectParameter("regionId", typeof(int));
            }
    
            ObjectParameter countryIdParameter;
    
            if (countryId.HasValue)
            {
                countryIdParameter = new ObjectParameter("countryId", countryId);
            }
            else
            {
                countryIdParameter = new ObjectParameter("countryId", typeof(int));
            }
    
            ObjectParameter stateIdParameter;
    
            if (stateId.HasValue)
            {
                stateIdParameter = new ObjectParameter("stateId", stateId);
            }
            else
            {
                stateIdParameter = new ObjectParameter("stateId", typeof(int));
            }
    
            ObjectParameter serviceIdParameter;
    
            if (serviceId.HasValue)
            {
                serviceIdParameter = new ObjectParameter("serviceId", serviceId);
            }
            else
            {
                serviceIdParameter = new ObjectParameter("serviceId", typeof(int));
            }
    
            ObjectParameter masterFundIdParameter;
    
            if (masterFundId.HasValue)
            {
                masterFundIdParameter = new ObjectParameter("masterFundId", masterFundId);
            }
            else
            {
                masterFundIdParameter = new ObjectParameter("masterFundId", typeof(int));
            }
    
            ObjectParameter fundIdParameter;
    
            if (fundId.HasValue)
            {
                fundIdParameter = new ObjectParameter("fundId", fundId);
            }
            else
            {
                fundIdParameter = new ObjectParameter("fundId", typeof(int));
            }
    
            ObjectParameter appIdParameter;
    
            if (appId.HasValue)
            {
                appIdParameter = new ObjectParameter("appId", appId);
            }
            else
            {
                appIdParameter = new ObjectParameter("appId", typeof(int));
            }
    
            ObjectParameter clientIdParameter;
    
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("clientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("clientId", typeof(int));
            }
    
            ObjectParameter termParameter;
    
            if (term != null)
            {
                termParameter = new ObjectParameter("term", term);
            }
            else
            {
                termParameter = new ObjectParameter("term", typeof(string));
            }
    
            ObjectParameter sortExpParameter;
    
            if (sortExp != null)
            {
                sortExpParameter = new ObjectParameter("sortExp", sortExp);
            }
            else
            {
                sortExpParameter = new ObjectParameter("sortExp", typeof(string));
            }
    
            ObjectParameter sortAscParameter;
    
            if (sortAsc.HasValue)
            {
                sortAscParameter = new ObjectParameter("sortAsc", sortAsc);
            }
            else
            {
                sortAscParameter = new ObjectParameter("sortAsc", typeof(bool));
            }
    
            ObjectParameter topParameter;
    
            if (top.HasValue)
            {
                topParameter = new ObjectParameter("top", top);
            }
            else
            {
                topParameter = new ObjectParameter("top", typeof(int));
            }
    
            ObjectParameter skipParameter;
    
            if (skip.HasValue)
            {
                skipParameter = new ObjectParameter("skip", skip);
            }
            else
            {
                skipParameter = new ObjectParameter("skip", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
            return base.ExecuteFunction<spAgencyReportingHomecareDetails_Result>("spAgencyReportingHomecareDetails", curParameter, startParameter, endParameter, submittedParameter, agencyIdParameter, regionIdParameter, countryIdParameter, stateIdParameter, serviceIdParameter, masterFundIdParameter, fundIdParameter, appIdParameter, clientIdParameter, termParameter, sortExpParameter, sortAscParameter, topParameter, skipParameter, userIdParameter);
        }
        public ObjectResult<spHasNotificationResend_Result> spHasNotificationResend(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
    
            ObjectParameter fromParameter;
    
            if (from.HasValue)
            {
                fromParameter = new ObjectParameter("from", from);
            }
            else
            {
                fromParameter = new ObjectParameter("from", typeof(System.DateTime));
            }
    
            ObjectParameter toParameter;
    
            if (to.HasValue)
            {
                toParameter = new ObjectParameter("to", to);
            }
            else
            {
                toParameter = new ObjectParameter("to", typeof(System.DateTime));
            }
            return base.ExecuteFunction<spHasNotificationResend_Result>("spHasNotificationResend", fromParameter, toParameter);
        }
        public ObjectResult<spSrHcDetails_Result> spSrHcDetails(Nullable<int> userId, Nullable<int> subReportId, string filterClientName, Nullable<int> filterClientId, Nullable<bool> filterReportedOnly, string sort, Nullable<bool> sortAsc, string ssearch, Nullable<int> skip, Nullable<int> take, ObjectParameter displayCount, ObjectParameter totalCount, ObjectParameter cur)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
    
            ObjectParameter subReportIdParameter;
    
            if (subReportId.HasValue)
            {
                subReportIdParameter = new ObjectParameter("subReportId", subReportId);
            }
            else
            {
                subReportIdParameter = new ObjectParameter("subReportId", typeof(int));
            }
    
            ObjectParameter filterClientNameParameter;
    
            if (filterClientName != null)
            {
                filterClientNameParameter = new ObjectParameter("filterClientName", filterClientName);
            }
            else
            {
                filterClientNameParameter = new ObjectParameter("filterClientName", typeof(string));
            }
    
            ObjectParameter filterClientIdParameter;
    
            if (filterClientId.HasValue)
            {
                filterClientIdParameter = new ObjectParameter("filterClientId", filterClientId);
            }
            else
            {
                filterClientIdParameter = new ObjectParameter("filterClientId", typeof(int));
            }
    
            ObjectParameter filterReportedOnlyParameter;
    
            if (filterReportedOnly.HasValue)
            {
                filterReportedOnlyParameter = new ObjectParameter("filterReportedOnly", filterReportedOnly);
            }
            else
            {
                filterReportedOnlyParameter = new ObjectParameter("filterReportedOnly", typeof(bool));
            }
    
            ObjectParameter sortParameter;
    
            if (sort != null)
            {
                sortParameter = new ObjectParameter("sort", sort);
            }
            else
            {
                sortParameter = new ObjectParameter("sort", typeof(string));
            }
    
            ObjectParameter sortAscParameter;
    
            if (sortAsc.HasValue)
            {
                sortAscParameter = new ObjectParameter("sortAsc", sortAsc);
            }
            else
            {
                sortAscParameter = new ObjectParameter("sortAsc", typeof(bool));
            }
    
            ObjectParameter ssearchParameter;
    
            if (ssearch != null)
            {
                ssearchParameter = new ObjectParameter("ssearch", ssearch);
            }
            else
            {
                ssearchParameter = new ObjectParameter("ssearch", typeof(string));
            }
    
            ObjectParameter skipParameter;
    
            if (skip.HasValue)
            {
                skipParameter = new ObjectParameter("skip", skip);
            }
            else
            {
                skipParameter = new ObjectParameter("skip", typeof(int));
            }
    
            ObjectParameter takeParameter;
    
            if (take.HasValue)
            {
                takeParameter = new ObjectParameter("take", take);
            }
            else
            {
                takeParameter = new ObjectParameter("take", typeof(int));
            }
            return base.ExecuteFunction<spSrHcDetails_Result>("spSrHcDetails", userIdParameter, subReportIdParameter, filterClientNameParameter, filterClientIdParameter, filterReportedOnlyParameter, sortParameter, sortAscParameter, ssearchParameter, skipParameter, takeParameter, displayCount, totalCount, cur);
        }
        public ObjectResult<spValidateCrHc_Result> spValidateCrHc(Nullable<int> mainReportId, Nullable<int> clientId)
        {
    
            ObjectParameter mainReportIdParameter;
    
            if (mainReportId.HasValue)
            {
                mainReportIdParameter = new ObjectParameter("mainReportId", mainReportId);
            }
            else
            {
                mainReportIdParameter = new ObjectParameter("mainReportId", typeof(int));
            }
    
            ObjectParameter clientIdParameter;
    
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("clientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("clientId", typeof(int));
            }
            return base.ExecuteFunction<spValidateCrHc_Result>("spValidateCrHc", mainReportIdParameter, clientIdParameter);
        }
        public ObjectResult<spValidateWeeklyHcCaps_Result> spValidateWeeklyHcCaps(Nullable<int> mainreportid)
        {
    
            ObjectParameter mainreportidParameter;
    
            if (mainreportid.HasValue)
            {
                mainreportidParameter = new ObjectParameter("mainreportid", mainreportid);
            }
            else
            {
                mainreportidParameter = new ObjectParameter("mainreportid", typeof(int));
            }
            return base.ExecuteFunction<spValidateWeeklyHcCaps_Result>("spValidateWeeklyHcCaps", mainreportidParameter);
        }
        public ObjectResult<UpdateClientApptovalStatus_Result> UpdateClientApptovalStatus(Nullable<int> oldStatusId, Nullable<int> newStatusId, Nullable<int> userId)
        {
    
            ObjectParameter oldStatusIdParameter;
    
            if (oldStatusId.HasValue)
            {
                oldStatusIdParameter = new ObjectParameter("OldStatusId", oldStatusId);
            }
            else
            {
                oldStatusIdParameter = new ObjectParameter("OldStatusId", typeof(int));
            }
    
            ObjectParameter newStatusIdParameter;
    
            if (newStatusId.HasValue)
            {
                newStatusIdParameter = new ObjectParameter("NewStatusId", newStatusId);
            }
            else
            {
                newStatusIdParameter = new ObjectParameter("NewStatusId", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
            return base.ExecuteFunction<UpdateClientApptovalStatus_Result>("UpdateClientApptovalStatus", oldStatusIdParameter, newStatusIdParameter, userIdParameter);
        }
        public ObjectResult<Nullable<int>> UpdateImportClientReportWeekly(Nullable<System.Guid> id)
        {
    
            ObjectParameter idParameter;
    
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateImportClientReportWeekly", idParameter);
        }
        public ObjectResult<spFinancialSummaryDetails_Result> spFinancialSummaryDetails(string cur, Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<bool> submitted, Nullable<bool> showEstimated, Nullable<int> agencyId, Nullable<int> regionId, Nullable<int> countryId, Nullable<int> stateId, Nullable<int> serviceTypeId, Nullable<int> serviceId, Nullable<int> masterFundId, Nullable<int> fundId, Nullable<int> appId, Nullable<int> clientId, string term, string sortExp, Nullable<bool> sortAsc, Nullable<int> top, Nullable<int> skip, Nullable<int> userId)
        {
    
            ObjectParameter curParameter;
    
            if (cur != null)
            {
                curParameter = new ObjectParameter("cur", cur);
            }
            else
            {
                curParameter = new ObjectParameter("cur", typeof(string));
            }
    
            ObjectParameter startParameter;
    
            if (start.HasValue)
            {
                startParameter = new ObjectParameter("start", start);
            }
            else
            {
                startParameter = new ObjectParameter("start", typeof(System.DateTime));
            }
    
            ObjectParameter endParameter;
    
            if (end.HasValue)
            {
                endParameter = new ObjectParameter("end", end);
            }
            else
            {
                endParameter = new ObjectParameter("end", typeof(System.DateTime));
            }
    
            ObjectParameter submittedParameter;
    
            if (submitted.HasValue)
            {
                submittedParameter = new ObjectParameter("submitted", submitted);
            }
            else
            {
                submittedParameter = new ObjectParameter("submitted", typeof(bool));
            }
    
            ObjectParameter showEstimatedParameter;
    
            if (showEstimated.HasValue)
            {
                showEstimatedParameter = new ObjectParameter("showEstimated", showEstimated);
            }
            else
            {
                showEstimatedParameter = new ObjectParameter("showEstimated", typeof(bool));
            }
    
            ObjectParameter agencyIdParameter;
    
            if (agencyId.HasValue)
            {
                agencyIdParameter = new ObjectParameter("agencyId", agencyId);
            }
            else
            {
                agencyIdParameter = new ObjectParameter("agencyId", typeof(int));
            }
    
            ObjectParameter regionIdParameter;
    
            if (regionId.HasValue)
            {
                regionIdParameter = new ObjectParameter("regionId", regionId);
            }
            else
            {
                regionIdParameter = new ObjectParameter("regionId", typeof(int));
            }
    
            ObjectParameter countryIdParameter;
    
            if (countryId.HasValue)
            {
                countryIdParameter = new ObjectParameter("countryId", countryId);
            }
            else
            {
                countryIdParameter = new ObjectParameter("countryId", typeof(int));
            }
    
            ObjectParameter stateIdParameter;
    
            if (stateId.HasValue)
            {
                stateIdParameter = new ObjectParameter("stateId", stateId);
            }
            else
            {
                stateIdParameter = new ObjectParameter("stateId", typeof(int));
            }
    
            ObjectParameter serviceTypeIdParameter;
    
            if (serviceTypeId.HasValue)
            {
                serviceTypeIdParameter = new ObjectParameter("serviceTypeId", serviceTypeId);
            }
            else
            {
                serviceTypeIdParameter = new ObjectParameter("serviceTypeId", typeof(int));
            }
    
            ObjectParameter serviceIdParameter;
    
            if (serviceId.HasValue)
            {
                serviceIdParameter = new ObjectParameter("serviceId", serviceId);
            }
            else
            {
                serviceIdParameter = new ObjectParameter("serviceId", typeof(int));
            }
    
            ObjectParameter masterFundIdParameter;
    
            if (masterFundId.HasValue)
            {
                masterFundIdParameter = new ObjectParameter("masterFundId", masterFundId);
            }
            else
            {
                masterFundIdParameter = new ObjectParameter("masterFundId", typeof(int));
            }
    
            ObjectParameter fundIdParameter;
    
            if (fundId.HasValue)
            {
                fundIdParameter = new ObjectParameter("fundId", fundId);
            }
            else
            {
                fundIdParameter = new ObjectParameter("fundId", typeof(int));
            }
    
            ObjectParameter appIdParameter;
    
            if (appId.HasValue)
            {
                appIdParameter = new ObjectParameter("appId", appId);
            }
            else
            {
                appIdParameter = new ObjectParameter("appId", typeof(int));
            }
    
            ObjectParameter clientIdParameter;
    
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("clientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("clientId", typeof(int));
            }
    
            ObjectParameter termParameter;
    
            if (term != null)
            {
                termParameter = new ObjectParameter("term", term);
            }
            else
            {
                termParameter = new ObjectParameter("term", typeof(string));
            }
    
            ObjectParameter sortExpParameter;
    
            if (sortExp != null)
            {
                sortExpParameter = new ObjectParameter("sortExp", sortExp);
            }
            else
            {
                sortExpParameter = new ObjectParameter("sortExp", typeof(string));
            }
    
            ObjectParameter sortAscParameter;
    
            if (sortAsc.HasValue)
            {
                sortAscParameter = new ObjectParameter("sortAsc", sortAsc);
            }
            else
            {
                sortAscParameter = new ObjectParameter("sortAsc", typeof(bool));
            }
    
            ObjectParameter topParameter;
    
            if (top.HasValue)
            {
                topParameter = new ObjectParameter("top", top);
            }
            else
            {
                topParameter = new ObjectParameter("top", typeof(int));
            }
    
            ObjectParameter skipParameter;
    
            if (skip.HasValue)
            {
                skipParameter = new ObjectParameter("skip", skip);
            }
            else
            {
                skipParameter = new ObjectParameter("skip", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(int));
            }
            return base.ExecuteFunction<spFinancialSummaryDetails_Result>("spFinancialSummaryDetails", curParameter, startParameter, endParameter, submittedParameter, showEstimatedParameter, agencyIdParameter, regionIdParameter, countryIdParameter, stateIdParameter, serviceTypeIdParameter, serviceIdParameter, masterFundIdParameter, fundIdParameter, appIdParameter, clientIdParameter, termParameter, sortExpParameter, sortAscParameter, topParameter, skipParameter, userIdParameter);
        }
        public ObjectResult<spHcCapsTableRawBefore2021_Result> spHcCapsTableRawBefore2021(Nullable<int> clientid, Nullable<System.DateTime> checkPeriodStart, Nullable<System.DateTime> checkPeriodEnd)
        {
    
            ObjectParameter clientidParameter;
    
            if (clientid.HasValue)
            {
                clientidParameter = new ObjectParameter("clientid", clientid);
            }
            else
            {
                clientidParameter = new ObjectParameter("clientid", typeof(int));
            }
    
            ObjectParameter checkPeriodStartParameter;
    
            if (checkPeriodStart.HasValue)
            {
                checkPeriodStartParameter = new ObjectParameter("checkPeriodStart", checkPeriodStart);
            }
            else
            {
                checkPeriodStartParameter = new ObjectParameter("checkPeriodStart", typeof(System.DateTime));
            }
    
            ObjectParameter checkPeriodEndParameter;
    
            if (checkPeriodEnd.HasValue)
            {
                checkPeriodEndParameter = new ObjectParameter("checkPeriodEnd", checkPeriodEnd);
            }
            else
            {
                checkPeriodEndParameter = new ObjectParameter("checkPeriodEnd", typeof(System.DateTime));
            }
            return base.ExecuteFunction<spHcCapsTableRawBefore2021_Result>("spHcCapsTableRawBefore2021", clientidParameter, checkPeriodStartParameter, checkPeriodEndParameter);
        }

        #endregion

    }
}
