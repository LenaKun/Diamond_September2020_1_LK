@model SubReportDetailsModel
@{
	ViewBag.Title = "Detailed Report";
}
@section Header
{
	<script>
		var loadTotals = function () {
			$('div#totals').load('@Url.Action("GetTotals", new { Id = Model.Id})' + '?IE=' + Math.random(), function () {
				$('span.totalAmount').html($('div#totals span.totalAmount').html());
			});
		};
	</script>
	<script id="dt" type="text/javascript">
	//simple datatable init
	var editLink = '<button type="button" class="edit">Edit</button><button type="button" class="delete">Delete</button>';
	var dataTable = null;


	$(document).ready(function () {
		dataTable = $('table.grid').dataTable({
			"bJQueryUI": true,
			"sPaginationType": "full_numbers",
			"bServerSide": true,
			"bProcessing": true,
			"aaSorting": [[1, "asc"], [2, "asc"]],
			"sAjaxSource": '@Url.Action("GetRows", new { Id = Model.Id })',
				"aoColumnDefs": [
					{
						"aTargets": [0,3,4],
						"bSortable": false
					},
					{
						"aTargets": [0, 3, -1],
						"sClass": "nowrap",
						"sWidth": "1%"
					},
					@if(Model.ServiceTypeId != (int)Service.ServiceTypes.MinorHomeModifications && Model.ServiceTypeId != (int)Service.ServiceTypes.MedicalProgram)
                               
                    {

                        <text>
                               
                        { "aTargets": [5], "sClass": "number", "mRender": function (val) { return renderDecimal(val); } },
						{ "aTargets": [6], "sClass":"number", "mRender": function (val) { return renderDecimal(val); } },
						</text>
					}
					else
					{
						<text>
						{ "aTargets": [5], "sClass": "number", "mRender": function (val, b, all) { console.log("all", all); return renderDecimal(val); } },
						</text>
					}
					{
						//date column
						"aTargets": [-1],
						"sWidth": "3em"
					},
					{
						"aTargets": [0],
						"mRender": function(a){ return (a==null) ? '': '<a href="@Url.Action("Details","Clients")/'+a+'">'+a+'</a>';}
					},
                    {
                        "aTargets": [4],
                        "mRender": function (a) { return '<a href="@Url.Action("Details","Clients")/' + a + '">' + a + '</a>'; }
                    }
					@if (Model.CanBeEdited)
                    {

                        <text>

				,{
                            //last colum with buttons
                            "aTargets": [-1],
					"sWidth": "7em",
					"bSortable": false,
					"fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
						$(nTd).html(editLink).addClass('control');
                    }
				},
				{
					"aTargets": ['edit'],
					"fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
                        var nTh = $('table.grid thead tr:last th').get(iCol);

						//copy the edit class and set data-val to the current value
						$(nTd).addClass('edit').attr('data-val', sData);

                        //copy data-name attribute
                        if ($(nTh).attr('data-name')) {
							$(nTd).attr('data-name', $(nTh).attr('data-name'));
                        }

                        //copy data-type attribute
                        if ($(nTh).attr('data-type')) {
							$(nTd).attr('data-type', $(nTh).attr('data-type'));
                        }

                    }
				}
			</text>
	 }

		],
		"fnServerParams": function (aoData) {

                        aoData.push({ name: "IE", value: Math.random() });
                        aoData.push({ name: "AppBudgetServiceId", value: "@Model.AppBudgetServiceId" });
                        aoData.push({ name: "AgencyId", value: "@Model.AgencyId" });
                        aoData.push({ name: "@Html.FieldNameFor(f => f.Filter.ClientName)", value: $('#@Html.FieldIdFor(f => f.Filter.ClientName)').val() });
                        aoData.push({ name: "@Html.FieldNameFor(f => f.Filter.ClientId)", value: $('#@Html.FieldIdFor(f => f.Filter.ClientId)').val() });
                        aoData.push({ name: "@Html.FieldNameFor(f => f.Filter.ReportedOnly)", value: $('#@Html.FieldIdFor(f => f.Filter.ReportedOnly)').val() });
                    }
			, "fnRowCallback": function (nRow, aData, iDisplayIndex) {
				/* set tr id. assume the id is in the first column of data */
				$(nRow).attr("clientId", aData[4]);
				$(nRow).attr("id", aData[0]);
				$(nRow).attr("subReportId", '@Model.Id');

                        return nRow;
                    }
		});
		$('button.filter').click(function () {
			dataTable.fnDraw();
		});
		$('button.reset').click(function () {
			$(this).closest('table').find(':input').val('');
			dataTable.fnDraw();
		});

	});
	</script>
	@if (Model.CanBeEdited)
	{
		<script>
			$(document).ready(function () {
				$('table.grid input').live('keypress', function (event) {
					switch (event.keyCode) {
						case 13:
							$(this).closest('tr').find('button.update').click();
							break;
						case 27:
							$(this).closest('tr').find('button.cancel').click();
							break;
					}
				});
				$('table.grid button.add').live('click', function () {

					//find the row el
					var tr = $(this).closest('tr');

					//clone the current row if the record exists
					//edit current row otherwise
					if (tr.attr('id')) {

						//clone
						var newtr = tr.clone();

						//clear the id attributes
						newtr.attr('id', '');

						//clear the id colum
						newtr.find('td:first-child').html('');

						//mark the tr (the cancel should delete the row)
						newtr.addClass('add');

						//insert the newly created dom el
						newtr.insertBefore(tr);

						//trigger the edit
						newtr.find('button.edit').click();


					}
					else {
						tr.find('button.edit').click();
					}
				});
				$('table.grid button.delete').live('click', function () {
					var tr = $(this).closest('tr');
					var id = tr.attr('id');
					$('table.grid tbody tr').find('input, button').attr('disabled', 'disabled');
					var cr = {
						Id: id,
						IE: Math.random()
					};

					$.ajax({
						url: '@Url.Action("DeleteClientReport")',
						type: 'POST',
						dataType: 'json',
						data: cr,
					}).done(function (data) {
						showSuccess(data);
					}).fail(function () {
						showFail();
					});
				});
				$('table.grid button.edit').live('click', function () {
					var row = $(this).closest('tr');
					$('table.grid button.cancel').click();
					row.find('td.edit').each(function () {
						var td = $(this);
						var value = td.attr('data-val');
						var editor = null;
						editor = $('<input/>').val(value);
						if (td.attr('data-name')) {
							editor.attr('data-name', td.attr('data-name'));
						}
						if (td.attr('data-type')) {
							editor.attr('data-type', td.attr('data-type'));
						}
						td.html('').append(editor);
					});
					row.addClass('selected');
					row.find('td.control').html('<button type="button" class="update">Save</button>' + '<button type="button" class="cancel">Cancel</button>');
					//first focus creates datepicker, second shows it
					row.find('input:first').focus().focus();
				});
				$('table.grid button.cancel').live('click', function () {
					var tr = $(this).closest('tr');
					if (tr.hasClass('add')) {
						tr.remove();
					}
					else {
						$('table.grid tr.selected td.edit:has(input)').each(function () {
							var dataval = $(this).attr('data-val');
							$(this).html(dataval ? dataval : '');
						});
						$('table.grid td.control').html(editLink);
					}
				});
				$('table.grid button.update').live('click', function () {
					tr = $(this).closest('tr');
					var d = {
						Id: tr.attr('id'),
						clientId: tr.attr('clientId'),
						subReportId: tr.attr('subReportId'),
						Amount: tr.find('td:nth-child(6) input').val(),
						IE: Math.random(),
						data: []
					};
					$('table.grid tr.selected td.edit input').each(function () {
						d[$(this).attr('data-name')] = $(this).val();
						d.data.push($(this).val());
					});

					$('table.grid tbody tr').find('input, button').attr('disabled', 'disabled');
					var request = $.ajax({
						url: '@Url.Action("SaveClientReport")',
						type: 'POST',
						dataType: "json",
						data: d
					})
					request.success(function (data, textStatus, jqXHR) {
						showSuccess(data);

					});
					request.done(function (msg) {

					});
					request.fail(function (jqXHR, textStatus) {
						showFail();
					});
				});
			});

				function showSuccess(data) {
					if (data.success) {
						$('table.grid').dataTable().fnDraw(false);
						loadTotals();

				}
				else {
					var errstr = '<ul class="error"><li>' + data.errors.join('</li><li>') + '</li></ul>';
					$(errstr).dialog({
						modal: true,
						buttons: {
							Ok: function () {
								$(this).dialog("close");
								$('table.grid tbody').find('input, button').removeAttr('disabled');
							},
							Cancel: function () {
								$(this).dialog("close");
								$('table.grid').dataTable().fnDraw(false);
							}
						}
					});

				}
			}
			function showFail() {
				$('<p>an error occured ... </p>').dialog({
					modal: true,
					buttons: {
						Ok: function () {
							$(this).dialog("close");
							$('table.grid tbody').find('input, button').removeAttr('disabled');
						}
					}
				});
			}
		</script>
	}
}
<h2>
	Detailed Report
</h2>
@Html.ValidationSummary()
<p>
	<a href="@Url.Action("Details", "MainReports", new { id = Model.MainReportId })" class="button">Go to Financial Report</a> 
	@if (Model.CanBeEdited){ <a href="@Url.Action("Create", "SubReports", new { Id = Model.Id, AppBudgetServiceId = Model.AppBudgetServiceId, MainReportId = Model.MainReportId })" class="button">Import</a>}
</p>
@Html.Partial("Header", Model.DetailsHeader)
<table class="filter horizontal">
	<tr>
		<th style="white-space: nowrap">
			Filter By:
		</th>
		<td style="width: 100%">
			<div class="display-item">
				@Html.LabelFor(f => f.Filter.ClientName)
				@Html.EditorFor(f => f.Filter.ClientName)
			</div>
			<div class="display-item">
				@Html.LabelFor(f => f.Filter.ClientId)
				@Html.EditorFor(f => f.Filter.ClientId)
			</div>
			<div class="display-item">
				@Html.LabelFor(f => f.Filter.ReportedOnly)
				@Html.DropDownListFor(f => f.Filter.ReportedOnly, Model.Filter.ReportedOnlySelectList)
			</div>
			<div class="display-item">
				<button type="button" class="filter">
					Go</button>
				<button type="button" class="reset">
					Reset</button>
			</div>
		</td>
	</tr>
</table>
<table class="grid">
	<thead>
		<tr>
			<th>
				Id
			</th>
             <th>
				Client First Name
			</th>
            <th>
				Client Last Name
			</th>
			<th>
				Client Approval Status
			</th>
			<th>
				CC ID
			</th>
			@if(Model.ServiceTypeId != (int)Service.ServiceTypes.MinorHomeModifications && Model.ServiceTypeId != (int)Service.ServiceTypes.MedicalProgram)

            {

                <th>
                    Allowed Hours/week
                </th>

            }
			<th class="edit" data-name="Amount" data-type="decimal">
				Amount
			</th>
            <th class="edit" data-name="Remarks" data-type="string">Unique Circumstances</th>
			@if (Model.CanBeEdited)
			{
				<th></th>
			}
		</tr>
	</thead>
	<tbody>
	</tbody>
</table>
<div id="totals">
	@Html.Partial(Model.Totals.ViewName, Model.Totals)
</div>
<div>
	<a href="@Url.Action("Export", new { id = Model.Id })" class="button">Export</a>
</div>
<div>
	<a href="@Url.Action("Details", "MainReports", new { id = Model.MainReportId })" class="button">Go to Financial Report </a>
	@if (Model.CanBeEdited){ <a href="@Url.Action("Create", "SubReports", new { Id = Model.Id, AppBudgetServiceId = Model.AppBudgetServiceId, MainReportId = Model.MainReportId })" class="button">Import</a>}
    @if (Model.CanBeEdited)
   {
	        <button type="button" class="button" onclick="setToDef()">
					Set To Default</button>
        <script>
            function setToDef() {
                dalert(function () {
                    var d = {
                        Id: '@Model.Id'
                    };
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("DeleteChildReportRows")',
                        data: d,
                        success: function (data) {
                        	location.reload();
							},
                        error: function () {
                            alert('error');
                        }
                    });

                })
                }
                function dalert(yesCallback) {
                    $('<div></div>').html('All Sub Report Record will be deleted, continue ?').dialog({
                        modal: true,
                        buttons: {
                            "Yes": function () {
                                $(this).dialog("close");
                                $(this).dialog("destroy");
                                yesCallback();
                            },
                            "No": function () {
                                $(this).dialog("close");
                                $(this).dialog("destroy");

                            }
                        }

                    });
                }
        </script>
		
   }
</div>
