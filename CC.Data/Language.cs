//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class Language
    {
        #region Primitive Properties
    
        public virtual string Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<AgencyGroup> AgencyGroups
        {
            get
            {
                if (_agencyGroups == null)
                {
                    var newCollection = new FixupCollection<AgencyGroup>();
                    newCollection.CollectionChanged += FixupAgencyGroups;
                    _agencyGroups = newCollection;
                }
                return _agencyGroups;
            }
            set
            {
                if (!ReferenceEquals(_agencyGroups, value))
                {
                    var previousValue = _agencyGroups as FixupCollection<AgencyGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgencyGroups;
                    }
                    _agencyGroups = value;
                    var newValue = value as FixupCollection<AgencyGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgencyGroups;
                    }
                }
            }
        }
        private ICollection<AgencyGroup> _agencyGroups;
    
        public virtual ICollection<Country> Countries
        {
            get
            {
                if (_countries == null)
                {
                    var newCollection = new FixupCollection<Country>();
                    newCollection.CollectionChanged += FixupCountries;
                    _countries = newCollection;
                }
                return _countries;
            }
            set
            {
                if (!ReferenceEquals(_countries, value))
                {
                    var previousValue = _countries as FixupCollection<Country>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCountries;
                    }
                    _countries = value;
                    var newValue = value as FixupCollection<Country>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCountries;
                    }
                }
            }
        }
        private ICollection<Country> _countries;
    
        public virtual ICollection<Resource> Resources
        {
            get
            {
                if (_resources == null)
                {
                    var newCollection = new FixupCollection<Resource>();
                    newCollection.CollectionChanged += FixupResources;
                    _resources = newCollection;
                }
                return _resources;
            }
            set
            {
                if (!ReferenceEquals(_resources, value))
                {
                    var previousValue = _resources as FixupCollection<Resource>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupResources;
                    }
                    _resources = value;
                    var newValue = value as FixupCollection<Resource>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupResources;
                    }
                }
            }
        }
        private ICollection<Resource> _resources;

        #endregion

        #region Association Fixup
    
        private void FixupAgencyGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AgencyGroup item in e.NewItems)
                {
                    item.Language = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AgencyGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Language, this))
                    {
                        item.Language = null;
                    }
                }
            }
        }
    
        private void FixupCountries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Country item in e.NewItems)
                {
                    item.Language = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Country item in e.OldItems)
                {
                    if (ReferenceEquals(item.Language, this))
                    {
                        item.Language = null;
                    }
                }
            }
        }
    
        private void FixupResources(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Resource item in e.NewItems)
                {
                    item.Language = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Resource item in e.OldItems)
                {
                    if (ReferenceEquals(item.Language, this))
                    {
                        item.Language = null;
                    }
                }
            }
        }

        #endregion

    }
}
