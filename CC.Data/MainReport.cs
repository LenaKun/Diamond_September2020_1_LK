//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CC.Data
{
    public partial class MainReport
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int AppBudgetId
        {
            get { return _appBudgetId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_appBudgetId != value)
                    {
                        if (AppBudget != null && AppBudget.Id != value)
                        {
                            AppBudget = null;
                        }
                        _appBudgetId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _appBudgetId;
    
        public virtual System.DateTime Start
        {
            get;
            set;
        }
    
        public virtual System.DateTime End
        {
            get;
            set;
        }
    
        public virtual int StatusId
        {
            get { return _statusId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_statusId != value)
                    {
                        if (MainReportStatuses != null && MainReportStatuses.Id != value)
                        {
                            MainReportStatuses = null;
                        }
                        _statusId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _statusId;
    
        public virtual System.DateTime UpdatedAt
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> SubmittedAt
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ApprovedAt
        {
            get;
            set;
        }
    
        public virtual int UpdatedById
        {
            get { return _updatedById; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_updatedById != value)
                    {
                        if (User2 != null && User2.Id != value)
                        {
                            User2 = null;
                        }
                        _updatedById = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _updatedById;
    
        public virtual Nullable<int> ApprovedById
        {
            get { return _approvedById; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_approvedById != value)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                        _approvedById = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _approvedById;
    
        public virtual Nullable<int> SubmittedById
        {
            get { return _submittedById; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_submittedById != value)
                    {
                        if (User1 != null && User1.Id != value)
                        {
                            User1 = null;
                        }
                        _submittedById = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _submittedById;
    
        public virtual string ProgramOverview
        {
            get;
            set;
        }
    
        public virtual bool AcMeetingHeld
        {
            get;
            set;
        }
    
        public virtual string Mhsa
        {
            get;
            set;
        }
    
        public virtual bool Adjusted
        {
            get;
            set;
        }
    
        public virtual bool Revision
        {
            get;
            set;
        }
    
        public virtual decimal ExcRate
        {
            get;
            set;
        }
    
        public virtual string ExcRateSource
        {
            get;
            set;
        }
    
        public virtual bool RequiresAdminApproval
        {
            get;
            set;
        }
    
        public virtual bool LastReport
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> C168OK
        {
            get;
            set;
        }
    
        public virtual string ProgramOverviewFileName
        {
            get;
            set;
        }
    
        public virtual string MhsaFileName
        {
            get;
            set;
        }
    
        public virtual Nullable<int> FluxxRequestReportId
        {
            get;
            set;
        }
    
        public virtual string FluxxRequestReportError
        {
            get;
            set;
        }
    
        public virtual Nullable<int> FluxxModelDocumentId
        {
            get;
            set;
        }
    
        public virtual string FluxxModelDocumentError
        {
            get;
            set;
        }
    
        public virtual Nullable<int> FluxxStatusId
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Comment> AgencyComments
        {
            get
            {
                if (_agencyComments == null)
                {
                    var newCollection = new FixupCollection<Comment>();
                    newCollection.CollectionChanged += FixupAgencyComments;
                    _agencyComments = newCollection;
                }
                return _agencyComments;
            }
            set
            {
                if (!ReferenceEquals(_agencyComments, value))
                {
                    var previousValue = _agencyComments as FixupCollection<Comment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgencyComments;
                    }
                    _agencyComments = value;
                    var newValue = value as FixupCollection<Comment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgencyComments;
                    }
                }
            }
        }
        private ICollection<Comment> _agencyComments;
    
        public virtual ICollection<Comment> PoComments
        {
            get
            {
                if (_poComments == null)
                {
                    var newCollection = new FixupCollection<Comment>();
                    newCollection.CollectionChanged += FixupPoComments;
                    _poComments = newCollection;
                }
                return _poComments;
            }
            set
            {
                if (!ReferenceEquals(_poComments, value))
                {
                    var previousValue = _poComments as FixupCollection<Comment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPoComments;
                    }
                    _poComments = value;
                    var newValue = value as FixupCollection<Comment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPoComments;
                    }
                }
            }
        }
        private ICollection<Comment> _poComments;
    
        public virtual ICollection<MainReportStatusAudit> MainReportStatusAudits
        {
            get
            {
                if (_mainReportStatusAudits == null)
                {
                    var newCollection = new FixupCollection<MainReportStatusAudit>();
                    newCollection.CollectionChanged += FixupMainReportStatusAudits;
                    _mainReportStatusAudits = newCollection;
                }
                return _mainReportStatusAudits;
            }
            set
            {
                if (!ReferenceEquals(_mainReportStatusAudits, value))
                {
                    var previousValue = _mainReportStatusAudits as FixupCollection<MainReportStatusAudit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMainReportStatusAudits;
                    }
                    _mainReportStatusAudits = value;
                    var newValue = value as FixupCollection<MainReportStatusAudit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMainReportStatusAudits;
                    }
                }
            }
        }
        private ICollection<MainReportStatusAudit> _mainReportStatusAudits;
    
        public virtual ICollection<SubReport> SubReports
        {
            get
            {
                if (_subReports == null)
                {
                    var newCollection = new FixupCollection<SubReport>();
                    newCollection.CollectionChanged += FixupSubReports;
                    _subReports = newCollection;
                }
                return _subReports;
            }
            set
            {
                if (!ReferenceEquals(_subReports, value))
                {
                    var previousValue = _subReports as FixupCollection<SubReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubReports;
                    }
                    _subReports = value;
                    var newValue = value as FixupCollection<SubReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubReports;
                    }
                }
            }
        }
        private ICollection<SubReport> _subReports;
    
    	
    	public virtual AppBudget AppBudget
        {
            get { return _appBudget; }
            set
            {
                if (!ReferenceEquals(_appBudget, value))
                {
                    var previousValue = _appBudget;
                    _appBudget = value;
                    FixupAppBudget(previousValue);
                }
            }
        }
        private AppBudget _appBudget;
    
    		
    	public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
    		
    	public virtual User User1
        {
            get { return _user1; }
            set
            {
                if (!ReferenceEquals(_user1, value))
                {
                    var previousValue = _user1;
                    _user1 = value;
                    FixupUser1(previousValue);
                }
            }
        }
        private User _user1;
    
    		
    	public virtual User User2
        {
            get { return _user2; }
            set
            {
                if (!ReferenceEquals(_user2, value))
                {
                    var previousValue = _user2;
                    _user2 = value;
                    FixupUser2(previousValue);
                }
            }
        }
        private User _user2;
    
        public virtual ICollection<Comment> InternalComments
        {
            get
            {
                if (_internalComments == null)
                {
                    var newCollection = new FixupCollection<Comment>();
                    newCollection.CollectionChanged += FixupInternalComments;
                    _internalComments = newCollection;
                }
                return _internalComments;
            }
            set
            {
                if (!ReferenceEquals(_internalComments, value))
                {
                    var previousValue = _internalComments as FixupCollection<Comment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInternalComments;
                    }
                    _internalComments = value;
                    var newValue = value as FixupCollection<Comment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInternalComments;
                    }
                }
            }
        }
        private ICollection<Comment> _internalComments;
    
        public virtual ICollection<Comment> PostApprovalComments
        {
            get
            {
                if (_postApprovalComments == null)
                {
                    var newCollection = new FixupCollection<Comment>();
                    newCollection.CollectionChanged += FixupPostApprovalComments;
                    _postApprovalComments = newCollection;
                }
                return _postApprovalComments;
            }
            set
            {
                if (!ReferenceEquals(_postApprovalComments, value))
                {
                    var previousValue = _postApprovalComments as FixupCollection<Comment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPostApprovalComments;
                    }
                    _postApprovalComments = value;
                    var newValue = value as FixupCollection<Comment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPostApprovalComments;
                    }
                }
            }
        }
        private ICollection<Comment> _postApprovalComments;
    
    		
    	public virtual MainReportStatuses MainReportStatuses
        {
            get { return _mainReportStatuses; }
            set
            {
                if (!ReferenceEquals(_mainReportStatuses, value))
                {
                    var previousValue = _mainReportStatuses;
                    _mainReportStatuses = value;
                    FixupMainReportStatuses(previousValue);
                }
            }
        }
        private MainReportStatuses _mainReportStatuses;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAppBudget(AppBudget previousValue)
        {
            if (previousValue != null && previousValue.MainReports.Contains(this))
            {
                previousValue.MainReports.Remove(this);
            }
    
            if (AppBudget != null)
            {
                if (!AppBudget.MainReports.Contains(this))
                {
                    AppBudget.MainReports.Add(this);
                }
                if (AppBudgetId != AppBudget.Id)
                {
                    AppBudgetId = AppBudget.Id;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.MainReports.Contains(this))
            {
                previousValue.MainReports.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.MainReports.Contains(this))
                {
                    User.MainReports.Add(this);
                }
                if (ApprovedById != User.Id)
                {
                    ApprovedById = User.Id;
                }
            }
            else if (!_settingFK)
            {
                ApprovedById = null;
            }
        }
    
        private void FixupUser1(User previousValue)
        {
            if (previousValue != null && previousValue.MainReports1.Contains(this))
            {
                previousValue.MainReports1.Remove(this);
            }
    
            if (User1 != null)
            {
                if (!User1.MainReports1.Contains(this))
                {
                    User1.MainReports1.Add(this);
                }
                if (SubmittedById != User1.Id)
                {
                    SubmittedById = User1.Id;
                }
            }
            else if (!_settingFK)
            {
                SubmittedById = null;
            }
        }
    
        private void FixupUser2(User previousValue)
        {
            if (previousValue != null && previousValue.MainReports2.Contains(this))
            {
                previousValue.MainReports2.Remove(this);
            }
    
            if (User2 != null)
            {
                if (!User2.MainReports2.Contains(this))
                {
                    User2.MainReports2.Add(this);
                }
                if (UpdatedById != User2.Id)
                {
                    UpdatedById = User2.Id;
                }
            }
        }
    
        private void FixupMainReportStatuses(MainReportStatuses previousValue)
        {
            if (previousValue != null && previousValue.MainReports.Contains(this))
            {
                previousValue.MainReports.Remove(this);
            }
    
            if (MainReportStatuses != null)
            {
                if (!MainReportStatuses.MainReports.Contains(this))
                {
                    MainReportStatuses.MainReports.Add(this);
                }
                if (StatusId != MainReportStatuses.Id)
                {
                    StatusId = MainReportStatuses.Id;
                }
            }
        }
    
        private void FixupAgencyComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    if (!item.MainReportAgencyComments.Contains(this))
                    {
                        item.MainReportAgencyComments.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (item.MainReportAgencyComments.Contains(this))
                    {
                        item.MainReportAgencyComments.Remove(this);
                    }
                }
            }
        }
    
        private void FixupPoComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    if (!item.MainReportPoComments.Contains(this))
                    {
                        item.MainReportPoComments.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (item.MainReportPoComments.Contains(this))
                    {
                        item.MainReportPoComments.Remove(this);
                    }
                }
            }
        }
    
        private void FixupMainReportStatusAudits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MainReportStatusAudit item in e.NewItems)
                {
                    item.MainReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MainReportStatusAudit item in e.OldItems)
                {
                    if (ReferenceEquals(item.MainReport, this))
                    {
                        item.MainReport = null;
                    }
                }
            }
        }
    
        private void FixupSubReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SubReport item in e.NewItems)
                {
                    item.MainReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.MainReport, this))
                    {
                        item.MainReport = null;
                    }
                }
            }
        }
    
        private void FixupInternalComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    if (!item.MainReportInternalComments.Contains(this))
                    {
                        item.MainReportInternalComments.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (item.MainReportInternalComments.Contains(this))
                    {
                        item.MainReportInternalComments.Remove(this);
                    }
                }
            }
        }
    
        private void FixupPostApprovalComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    if (!item.MainReportPostApprovalComments.Contains(this))
                    {
                        item.MainReportPostApprovalComments.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (item.MainReportPostApprovalComments.Contains(this))
                    {
                        item.MainReportPostApprovalComments.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}
